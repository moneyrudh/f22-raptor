// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = globalThis.Module || (typeof Module != "undefined" ? Module : {});

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).
var ENVIRONMENT_IS_AUDIO_WORKLET = typeof AudioWorkletGlobalScope !== "undefined";

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == "object";

var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != "undefined";

// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string" && process.type != "renderer";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_AUDIO_WORKLET;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -sPROXY_TO_WORKER) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
// The way we signal to a worker that it is hosting a pthread is to construct
// it with a specific name.
var ENVIRONMENT_IS_PTHREAD = ENVIRONMENT_IS_WORKER && self.name?.startsWith("em-pthread");

if (ENVIRONMENT_IS_NODE) {
  var worker_threads = require("worker_threads");
  global.Worker = worker_threads.Worker;
  ENVIRONMENT_IS_WORKER = !worker_threads.isMainThread;
  // Under node we set `workerData` to `em-pthread` to signal that the worker
  // is hosting a pthread.
  ENVIRONMENT_IS_PTHREAD = ENVIRONMENT_IS_WORKER && worker_threads["workerData"] == "em-pthread";
}

var ENVIRONMENT_IS_WASM_WORKER = !!Module["$ww"];

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// include: /tmp/tmp8il73z81.js
Module["expectedDataFileDownloads"] ??= 0;

Module["expectedDataFileDownloads"]++;

(() => {
  // Do not attempt to redownload the virtual filesystem data when in a pthread or a Wasm Worker context.
  var isPthread = typeof ENVIRONMENT_IS_PTHREAD != "undefined" && ENVIRONMENT_IS_PTHREAD;
  var isWasmWorker = typeof ENVIRONMENT_IS_WASM_WORKER != "undefined" && ENVIRONMENT_IS_WASM_WORKER;
  if (isPthread || isWasmWorker) return;
  var isNode = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
  function loadPackage(metadata) {
    var PACKAGE_PATH = "";
    if (typeof window === "object") {
      PACKAGE_PATH = window["encodeURIComponent"](window.location.pathname.substring(0, window.location.pathname.lastIndexOf("/")) + "/");
    } else if (typeof process === "undefined" && typeof location !== "undefined") {
      // web worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.substring(0, location.pathname.lastIndexOf("/")) + "/");
    }
    var PACKAGE_NAME = "f22_raptor.data";
    var REMOTE_PACKAGE_BASE = "f22_raptor.data";
    var REMOTE_PACKAGE_NAME = Module["locateFile"] ? Module["locateFile"](REMOTE_PACKAGE_BASE, "") : REMOTE_PACKAGE_BASE;
    var REMOTE_PACKAGE_SIZE = metadata["remote_package_size"];
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      if (isNode) {
        require("fs").readFile(packageName, (err, contents) => {
          if (err) {
            errback(err);
          } else {
            callback(contents.buffer);
          }
        });
        return;
      }
      Module["dataFileDownloads"] ??= {};
      fetch(packageName).catch(cause => Promise.reject(new Error(`Network Error: ${packageName}`, {
        cause
      }))).then(response => {
        if (!response.ok) {
          return Promise.reject(new Error(`${response.status}: ${response.url}`));
        }
        if (!response.body && response.arrayBuffer) {
          // If we're using the polyfill, readers won't be available...
          return response.arrayBuffer().then(callback);
        }
        const reader = response.body.getReader();
        const iterate = () => reader.read().then(handleChunk).catch(cause => Promise.reject(new Error(`Unexpected error while handling : ${response.url} ${cause}`, {
          cause
        })));
        const chunks = [];
        const headers = response.headers;
        const total = Number(headers.get("Content-Length") ?? packageSize);
        let loaded = 0;
        const handleChunk = ({done, value}) => {
          if (!done) {
            chunks.push(value);
            loaded += value.length;
            Module["dataFileDownloads"][packageName] = {
              loaded,
              total
            };
            let totalLoaded = 0;
            let totalSize = 0;
            for (const download of Object.values(Module["dataFileDownloads"])) {
              totalLoaded += download.loaded;
              totalSize += download.total;
            }
            Module["setStatus"]?.(`Downloading data... (${totalLoaded}/${totalSize})`);
            return iterate();
          } else {
            const packageData = new Uint8Array(chunks.map(c => c.length).reduce((a, b) => a + b, 0));
            let offset = 0;
            for (const chunk of chunks) {
              packageData.set(chunk, offset);
              offset += chunk.length;
            }
            callback(packageData.buffer);
          }
        };
        Module["setStatus"]?.("Downloading data...");
        return iterate();
      });
    }
    function handleError(error) {
      console.error("package error:", error);
    }
    var fetchedCallback = null;
    var fetched = Module["getPreloadedPackage"] ? Module["getPreloadedPackage"](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;
    if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, data => {
      if (fetchedCallback) {
        fetchedCallback(data);
        fetchedCallback = null;
      } else {
        fetched = data;
      }
    }, handleError);
    function runWithFS(Module) {
      function assert(check, msg) {
        if (!check) throw msg + (new Error).stack;
      }
      Module["FS_createPath"]("/", "assets", true, true);
      Module["FS_createPath"]("/assets", "sounds", true, true);
      Module["FS_createPath"]("/assets/sounds", "music", true, true);
      function processPackageData(arrayBuffer) {
        assert(arrayBuffer, "Loading data file failed.");
        assert(arrayBuffer.constructor.name === ArrayBuffer.name, "bad input to processPackageData");
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        var compressedData = {
          "data": null,
          "cachedOffset": 26200932,
          "cachedIndexes": [ -1, -1 ],
          "cachedChunks": [ null, null ],
          "offsets": [ 0, 2013, 4061, 6109, 8166, 10222, 12270, 14325, 16373, 18425, 20473, 22521, 24576, 26632, 27996, 28793, 30296, 31706, 32846, 34380, 35741, 37292, 38304, 39773, 41049, 42525, 43566, 44926, 46143, 47384, 48802, 49918, 51239, 52358, 53583, 54659, 56157, 57440, 58743, 60035, 61128, 62573, 63552, 65375, 66636, 67888, 68998, 70376, 71738, 72961, 74345, 75459, 76943, 78087, 79625, 80880, 82257, 83291, 84614, 85814, 86979, 88402, 89501, 90961, 92099, 93472, 94810, 96239, 97595, 98827, 100347, 101473, 102850, 103933, 105421, 106650, 108066, 109243, 110525, 111842, 113061, 114589, 115521, 116883, 117817, 118987, 120218, 121458, 122808, 124161, 125554, 126620, 128125, 128952, 130389, 131569, 132865, 134121, 135394, 136639, 138110, 139678, 140728, 142071, 143314, 144689, 145882, 147074, 148389, 149605, 150955, 152412, 153848, 154957, 156654, 157822, 158972, 160386, 161581, 162916, 163993, 165479, 166518, 167740, 168786, 170250, 171475, 172731, 174067, 175201, 176651, 177771, 179175, 180103, 181440, 182688, 183854, 185279, 186529, 187854, 189104, 190495, 191603, 192907, 193980, 195316, 196604, 197895, 199175, 200406, 201637, 202889, 204390, 205781, 207304, 208695, 210150, 211430, 212496, 213801, 215012, 216329, 217333, 218651, 219697, 221199, 222607, 224162, 225521, 226552, 227928, 228861, 230913, 232963, 235020, 237067, 239118, 241166, 243201, 245252, 247309, 249347, 251398, 253455, 255496, 257547, 259604, 261659, 263709, 265766, 267808, 269856, 271913, 273953, 276004, 278047, 280089, 282140, 284197, 286226, 288265, 288720, 288813, 288902, 288991, 290303, 292351, 294399, 296447, 298495, 300543, 302591, 304639, 306687, 308735, 310783, 312831, 314879, 316927, 318975, 321032, 323080, 325128, 327176, 329224, 331272, 333320, 335368, 337416, 339464, 341512, 343560, 345608, 347656, 349704, 351752, 353800, 355848, 357896, 359944, 361992, 364040, 366088, 368136, 370184, 372232, 374280, 376328, 378376, 380424, 382472, 384520, 386568, 388616, 390664, 392712, 394760, 396808, 398865, 400913, 402969, 405017, 407065, 409113, 411161, 413218, 415266, 417314, 419362, 421410, 423458, 425506, 427554, 429602, 431650, 433698, 435746, 437794, 439842, 441890, 443947, 445995, 448043, 450091, 452139, 454187, 456235, 458283, 460331, 462379, 464431, 466479, 468527, 470575, 472623, 474671, 476719, 478767, 480815, 482863, 484911, 486959, 489007, 491055, 493103, 495151, 497199, 499247, 501295, 503343, 505400, 507448, 509496, 511544, 513592, 515640, 517688, 519736, 521784, 523832, 525880, 527928, 529976, 532024, 534072, 536120, 538168, 540216, 542264, 544312, 546360, 548408, 550456, 552504, 554552, 556600, 558648, 560696, 562744, 564792, 566849, 568897, 570945, 572993, 575041, 577089, 579137, 581185, 583233, 585281, 587329, 589377, 591425, 593473, 595521, 597577, 599625, 601673, 603721, 605769, 607817, 609865, 611913, 613961, 616009, 618057, 620105, 622153, 624201, 626249, 628297, 630345, 632393, 634441, 636489, 638537, 640585, 642633, 644681, 646729, 648777, 650825, 652873, 654921, 656969, 659017, 661065, 663113, 665161, 667209, 669257, 671305, 673362, 675410, 677458, 679506, 681554, 683602, 685650, 687698, 689755, 691803, 693851, 695899, 697947, 699995, 702043, 704091, 706142, 708190, 710238, 712286, 714334, 716382, 718430, 720487, 722535, 724583, 726631, 728679, 730727, 732784, 734832, 736880, 738928, 740976, 743024, 745072, 747120, 749168, 751216, 753264, 755312, 757360, 759408, 761456, 763504, 765552, 767600, 769648, 771696, 773744, 775792, 777840, 779888, 781945, 783993, 786050, 788098, 790146, 792194, 794242, 796290, 798338, 800386, 802434, 804482, 806530, 808578, 810626, 812683, 814731, 816779, 818827, 820875, 822930, 824985, 827033, 829081, 831129, 833177, 835225, 837273, 839321, 841369, 843426, 845474, 847522, 849570, 851618, 853666, 855714, 857762, 859810, 861858, 863906, 865954, 868002, 870050, 872098, 874155, 876203, 878251, 880299, 882347, 884395, 886443, 888491, 890539, 892587, 894635, 896683, 898731, 900779, 902827, 904882, 906930, 908978, 911026, 913074, 915122, 917178, 919226, 921274, 923322, 925370, 927418, 929466, 931514, 933562, 935619, 937667, 939715, 941763, 943811, 945859, 947907, 949955, 952003, 954051, 956099, 958147, 960195, 962243, 964291, 966348, 968396, 970444, 972492, 974540, 976588, 978636, 980684, 982732, 984780, 986828, 988876, 990924, 992972, 995020, 997077, 999125, 1001173, 1003221, 1005269, 1007323, 1009378, 1011426, 1013474, 1015522, 1017570, 1019618, 1021666, 1023714, 1025762, 1027819, 1029867, 1031915, 1033963, 1036011, 1038059, 1040107, 1042155, 1044203, 1046251, 1048299, 1050347, 1052395, 1054443, 1056491, 1058548, 1060596, 1062644, 1064692, 1066740, 1068796, 1070844, 1072892, 1074940, 1076988, 1079036, 1081084, 1083132, 1085180, 1087228, 1089285, 1091333, 1093390, 1095438, 1097486, 1099534, 1101582, 1103630, 1105678, 1107726, 1109774, 1111822, 1113870, 1115921, 1117977, 1120025, 1122073, 1124121, 1126178, 1128231, 1130279, 1132327, 1134375, 1136423, 1138471, 1140519, 1142567, 1144615, 1146663, 1148711, 1150759, 1152807, 1154855, 1156903, 1158951, 1160999, 1163047, 1165095, 1167143, 1169191, 1171239, 1173287, 1175335, 1177383, 1179431, 1181479, 1183527, 1185575, 1187631, 1189679, 1191727, 1193775, 1195823, 1197871, 1199919, 1201967, 1204015, 1206063, 1208111, 1210159, 1212215, 1214263, 1216311, 1218359, 1220407, 1222455, 1224503, 1226551, 1228599, 1230656, 1232704, 1234752, 1236800, 1238848, 1240896, 1242951, 1244999, 1247047, 1249104, 1251152, 1253204, 1255252, 1257300, 1259348, 1261396, 1263444, 1265492, 1267540, 1269588, 1271636, 1273684, 1275732, 1277780, 1279828, 1281876, 1283924, 1285972, 1288020, 1290068, 1292116, 1294164, 1296212, 1298260, 1300308, 1302356, 1304413, 1306461, 1308509, 1310566, 1312614, 1314662, 1316710, 1318758, 1320806, 1322854, 1324902, 1326950, 1328998, 1331046, 1333094, 1335151, 1337199, 1339247, 1341295, 1343343, 1345391, 1347439, 1349487, 1351535, 1353583, 1355631, 1357679, 1359727, 1361775, 1363823, 1365880, 1367928, 1369983, 1372031, 1374079, 1376127, 1378175, 1380223, 1382271, 1384319, 1386367, 1388415, 1390463, 1392511, 1394559, 1396616, 1398668, 1400719, 1402776, 1404824, 1406872, 1408920, 1410968, 1413016, 1415064, 1417112, 1419160, 1421208, 1423256, 1425304, 1427361, 1429415, 1431463, 1433511, 1435559, 1437607, 1439655, 1441703, 1443751, 1445799, 1447847, 1449895, 1451943, 1453991, 1456039, 1458096, 1460144, 1462198, 1464246, 1466294, 1468342, 1470390, 1472438, 1474486, 1476534, 1478582, 1480630, 1482678, 1484726, 1486774, 1488831, 1490879, 1492927, 1494975, 1497023, 1499071, 1501119, 1503167, 1505215, 1507263, 1509311, 1511359, 1513407, 1515455, 1517503, 1519560, 1521608, 1523656, 1525704, 1527752, 1529800, 1531848, 1533896, 1535944, 1537992, 1540040, 1542088, 1544136, 1546184, 1548232, 1550289, 1552337, 1554385, 1556438, 1558486, 1560534, 1562582, 1564630, 1566678, 1568726, 1570774, 1572822, 1574870, 1576918, 1578966, 1581023, 1583071, 1585119, 1587167, 1589215, 1591263, 1593311, 1595359, 1597407, 1599455, 1601503, 1603551, 1605599, 1607647, 1609695, 1611752, 1613806, 1615854, 1617902, 1619950, 1621998, 1624046, 1626094, 1628142, 1630190, 1632238, 1634286, 1636334, 1638382, 1640430, 1642487, 1644535, 1646583, 1648631, 1650679, 1652727, 1654775, 1656823, 1658871, 1660919, 1662967, 1665015, 1667063, 1669111, 1671167, 1673223, 1675271, 1677319, 1679367, 1681415, 1683463, 1685511, 1687559, 1689607, 1691655, 1693703, 1695751, 1697799, 1699847, 1701895, 1703952, 1706e3, 1708048, 1710096, 1712144, 1714192, 1716249, 1718297, 1720345, 1722393, 1724441, 1726489, 1728537, 1730585, 1732633, 1734687, 1736735, 1738783, 1740831, 1742879, 1744927, 1746975, 1749023, 1751071, 1753119, 1755167, 1757215, 1759263, 1761311, 1763368, 1765425, 1767473, 1769521, 1771569, 1773617, 1775665, 1777713, 1779770, 1781818, 1783866, 1785914, 1787962, 1790010, 1792058, 1794112, 1796167, 1798215, 1800263, 1802311, 1804359, 1806416, 1808464, 1810512, 1812560, 1814608, 1816656, 1818704, 1820752, 1822800, 1824848, 1826905, 1828953, 1831001, 1833049, 1835097, 1837145, 1839193, 1841241, 1843289, 1845337, 1847385, 1849433, 1851481, 1853529, 1855577, 1857634, 1859682, 1861730, 1863778, 1865826, 1867883, 1869931, 1871979, 1874027, 1876075, 1878123, 1880171, 1882219, 1884267, 1886315, 1888372, 1890420, 1892468, 1894516, 1896564, 1898612, 1900660, 1902708, 1904756, 1906804, 1908852, 1910900, 1912948, 1914996, 1917044, 1919101, 1921149, 1923205, 1925253, 1927301, 1929358, 1931406, 1933454, 1935502, 1937550, 1939607, 1941655, 1943703, 1945751, 1947799, 1949856, 1951904, 1953952, 1956e3, 1958048, 1960096, 1962144, 1964192, 1966240, 1968288, 1970336, 1972384, 1974432, 1976480, 1978528, 1980585, 1982633, 1984681, 1986729, 1988777, 1990825, 1992873, 1994921, 1996969, 1999017, 2001065, 2003113, 2005161, 2007209, 2009257, 2011314, 2013362, 2015410, 2017458, 2019506, 2021554, 2023602, 2025650, 2027698, 2029755, 2031803, 2033851, 2035899, 2037947, 2039995, 2042052, 2044100, 2046148, 2048196, 2050244, 2052292, 2054340, 2056388, 2058436, 2060484, 2062532, 2064580, 2066628, 2068676, 2070724, 2072781, 2074829, 2076877, 2078925, 2080973, 2083021, 2085069, 2087117, 2089165, 2091213, 2093261, 2095309, 2097357, 2099405, 2101453, 2103510, 2105558, 2107606, 2109654, 2111702, 2113750, 2115798, 2117846, 2119894, 2121942, 2123990, 2126038, 2128086, 2130134, 2132182, 2134239, 2136287, 2138335, 2140383, 2142431, 2144479, 2146527, 2148575, 2150623, 2152671, 2154719, 2156767, 2158822, 2160870, 2162918, 2164975, 2167023, 2169071, 2171119, 2173167, 2175215, 2177263, 2179311, 2181359, 2183407, 2185455, 2187508, 2189556, 2191604, 2193652, 2195709, 2197757, 2199805, 2201853, 2203901, 2205949, 2207997, 2210045, 2212093, 2214141, 2216189, 2218243, 2220291, 2222339, 2224387, 2226444, 2228492, 2230540, 2232588, 2234636, 2236684, 2238732, 2240780, 2242828, 2244876, 2246924, 2248972, 2251020, 2253068, 2255116, 2257173, 2259221, 2261269, 2263317, 2265365, 2267413, 2269461, 2271509, 2273557, 2275605, 2277653, 2279701, 2281758, 2283806, 2285863, 2287920, 2289968, 2292016, 2294064, 2296112, 2298160, 2300208, 2302256, 2304304, 2306352, 2308400, 2310448, 2312496, 2314544, 2316592, 2318649, 2320697, 2322745, 2324802, 2326850, 2328898, 2330955, 2333003, 2335051, 2337099, 2339152, 2341200, 2343248, 2345296, 2347344, 2349400, 2351448, 2353496, 2355544, 2357592, 2359640, 2361688, 2363736, 2365784, 2367832, 2369880, 2371928, 2373976, 2376024, 2378072, 2380129, 2382177, 2384225, 2386273, 2388321, 2390369, 2392417, 2394465, 2396513, 2398561, 2400609, 2402665, 2404713, 2406761, 2408809, 2410863, 2412911, 2414963, 2417017, 2419065, 2421113, 2423161, 2425209, 2427257, 2429305, 2431353, 2433401, 2435449, 2437497, 2439545, 2441602, 2443650, 2445698, 2447746, 2449794, 2451851, 2453899, 2455947, 2457995, 2460043, 2462091, 2464139, 2466187, 2468235, 2470283, 2472340, 2474388, 2476436, 2478484, 2480532, 2482580, 2484628, 2486676, 2488724, 2490772, 2492820, 2494868, 2496916, 2498964, 2501012, 2503069, 2505117, 2507165, 2509213, 2511261, 2513309, 2515357, 2517413, 2519461, 2521509, 2523557, 2525605, 2527653, 2529701, 2531749, 2533806, 2535854, 2537902, 2539950, 2541998, 2544046, 2546094, 2548142, 2550190, 2552238, 2554286, 2556334, 2558382, 2560430, 2562478, 2564535, 2566583, 2568631, 2570679, 2572727, 2574775, 2576823, 2578871, 2580919, 2582966, 2585022, 2587070, 2589118, 2591166, 2593214, 2595271, 2597319, 2599367, 2601415, 2603463, 2605511, 2607559, 2609607, 2611655, 2613703, 2615751, 2617799, 2619847, 2621895, 2623943, 2625999, 2628047, 2630095, 2632143, 2634191, 2636239, 2638287, 2640335, 2642386, 2644438, 2646486, 2648534, 2650582, 2652630, 2654678, 2656735, 2658783, 2660831, 2662879, 2664927, 2666975, 2669023, 2671071, 2673119, 2675167, 2677215, 2679272, 2681320, 2683368, 2685416, 2687473, 2689521, 2691569, 2693617, 2695665, 2697713, 2699761, 2701809, 2703857, 2705905, 2707953, 2710001, 2712049, 2714097, 2716145, 2718202, 2720250, 2722298, 2724346, 2726394, 2728442, 2730490, 2732538, 2734586, 2736634, 2738682, 2740730, 2742778, 2744826, 2746874, 2748931, 2750979, 2753027, 2755075, 2757123, 2759171, 2761219, 2763267, 2765315, 2767363, 2769411, 2771459, 2773507, 2775555, 2777603, 2779660, 2781708, 2783756, 2785804, 2787852, 2789900, 2791948, 2793996, 2796044, 2798092, 2800140, 2802188, 2804236, 2806284, 2808332, 2810380, 2812428, 2814476, 2816524, 2818572, 2820620, 2822668, 2824716, 2826773, 2828821, 2830869, 2832917, 2834965, 2837013, 2839061, 2841118, 2843174, 2845222, 2847270, 2849318, 2851366, 2853414, 2855462, 2857517, 2859565, 2861613, 2863661, 2865709, 2867757, 2869805, 2871862, 2873910, 2875958, 2878006, 2880054, 2882102, 2884150, 2886205, 2888253, 2890301, 2892349, 2894397, 2896445, 2898493, 2900541, 2902589, 2904637, 2906685, 2908733, 2910781, 2912829, 2914877, 2916925, 2918973, 2921021, 2923069, 2925117, 2927165, 2929213, 2931261, 2933318, 2935366, 2937414, 2939462, 2941510, 2943558, 2945606, 2947654, 2949702, 2951750, 2953798, 2955846, 2957894, 2959942, 2961990, 2964047, 2966095, 2968143, 2970191, 2972239, 2974287, 2976335, 2978383, 2980431, 2982479, 2984527, 2986575, 2988623, 2990671, 2992719, 2994776, 2996824, 2998872, 3000920, 3002968, 3005016, 3007064, 3009112, 3011160, 3013208, 3015256, 3017304, 3019352, 3021400, 3023448, 3025504, 3027552, 3029600, 3031648, 3033696, 3035744, 3037792, 3039840, 3041888, 3043936, 3045984, 3048032, 3050080, 3052128, 3054176, 3056232, 3058280, 3060328, 3062376, 3064424, 3066472, 3068520, 3070568, 3072616, 3074664, 3076712, 3078760, 3080808, 3082856, 3084904, 3086961, 3089009, 3091057, 3093105, 3095153, 3097201, 3099249, 3101297, 3103345, 3105393, 3107441, 3109489, 3111537, 3113585, 3115633, 3117690, 3119738, 3121786, 3123834, 3125882, 3127930, 3129984, 3132032, 3134080, 3136128, 3138176, 3140224, 3142272, 3144320, 3146368, 3148425, 3150473, 3152521, 3154569, 3156617, 3158665, 3160713, 3162761, 3164809, 3166866, 3168914, 3170962, 3173010, 3175058, 3177106, 3179154, 3181202, 3183250, 3185298, 3187346, 3189400, 3191448, 3193496, 3195544, 3197592, 3199640, 3201688, 3203736, 3205784, 3207832, 3209889, 3211937, 3213985, 3216033, 3218081, 3220129, 3222177, 3224225, 3226273, 3228321, 3230369, 3232417, 3234465, 3236513, 3238561, 3240618, 3242666, 3244714, 3246762, 3248810, 3250858, 3252915, 3254963, 3257011, 3259059, 3261107, 3263155, 3265203, 3267251, 3269299, 3271347, 3273395, 3275443, 3277491, 3279539, 3281587, 3283635, 3285683, 3287731, 3289779, 3291827, 3293875, 3295923, 3297971, 3300028, 3302076, 3304124, 3306172, 3308220, 3310268, 3312325, 3314373, 3316421, 3318469, 3320517, 3322565, 3324613, 3326661, 3328709, 3330757, 3332814, 3334862, 3336910, 3338958, 3341012, 3343060, 3345108, 3347156, 3349204, 3351252, 3353300, 3355348, 3357396, 3359444, 3361492, 3363549, 3365597, 3367645, 3369693, 3371750, 3373798, 3375846, 3377894, 3379942, 3381990, 3384038, 3386086, 3388134, 3390182, 3392230, 3394287, 3396335, 3398383, 3400431, 3402479, 3404527, 3406575, 3408623, 3410671, 3412719, 3414767, 3416815, 3418863, 3420911, 3422959, 3425016, 3427064, 3429112, 3431160, 3433208, 3435256, 3437304, 3439352, 3441400, 3443448, 3445496, 3447544, 3449592, 3451640, 3453688, 3455745, 3457793, 3459841, 3461898, 3463946, 3465994, 3468042, 3470090, 3472138, 3474186, 3476234, 3478282, 3480330, 3482378, 3484426, 3486483, 3488531, 3490579, 3492627, 3494682, 3496730, 3498778, 3500826, 3502874, 3504922, 3506970, 3509018, 3511066, 3513114, 3515162, 3517219, 3519267, 3521315, 3523363, 3525411, 3527459, 3529516, 3531564, 3533612, 3535660, 3537708, 3539756, 3541804, 3543852, 3545900, 3547948, 3549996, 3552044, 3554092, 3556140, 3558188, 3560236, 3562284, 3564332, 3566380, 3568428, 3570476, 3572533, 3574581, 3576629, 3578677, 3580725, 3582773, 3584830, 3586878, 3588926, 3590974, 3593022, 3595070, 3597118, 3599166, 3601223, 3603271, 3605319, 3607367, 3609424, 3611472, 3613520, 3615568, 3617616, 3619664, 3621712, 3623760, 3625808, 3627856, 3629904, 3631952, 3634e3, 3636048, 3638096, 3640153, 3642201, 3644249, 3646297, 3648345, 3650393, 3652441, 3654489, 3656537, 3658585, 3660633, 3662681, 3664729, 3666777, 3668825, 3670882, 3672930, 3674981, 3677038, 3679093, 3681141, 3683189, 3685237, 3687285, 3689333, 3691381, 3693429, 3695477, 3697525, 3699573, 3701630, 3703678, 3705726, 3707774, 3709830, 3711878, 3713926, 3715974, 3718022, 3720070, 3722118, 3724175, 3726223, 3728271, 3730319, 3732376, 3734424, 3736472, 3738520, 3740568, 3742616, 3744664, 3746712, 3748760, 3750808, 3752856, 3754904, 3756952, 3759e3, 3761048, 3763105, 3765153, 3767201, 3769249, 3771297, 3773345, 3775393, 3777441, 3779489, 3781537, 3783585, 3785633, 3787681, 3789729, 3791777, 3793834, 3795882, 3797930, 3799978, 3802026, 3804074, 3806122, 3808179, 3810227, 3812275, 3814323, 3816371, 3818419, 3820467, 3822515, 3824571, 3826619, 3828667, 3830715, 3832763, 3834811, 3836859, 3838907, 3840955, 3843003, 3845051, 3847099, 3849147, 3851195, 3853243, 3855297, 3857345, 3859400, 3861448, 3863496, 3865544, 3867592, 3869640, 3871688, 3873736, 3875784, 3877832, 3879880, 3881928, 3883976, 3886033, 3888089, 3890137, 3892185, 3894233, 3896281, 3898329, 3900377, 3902425, 3904473, 3906521, 3908569, 3910617, 3912665, 3914713, 3916768, 3918816, 3920864, 3922912, 3924960, 3927008, 3929056, 3931104, 3933152, 3935200, 3937248, 3939305, 3941362, 3943410, 3945458, 3947515, 3949571, 3951619, 3953667, 3955715, 3957763, 3959811, 3961859, 3963907, 3965955, 3968012, 3970060, 3972108, 3974156, 3976204, 3978257, 3980305, 3982353, 3984408, 3986456, 3988504, 3990552, 3992600, 3994648, 3996696, 3998744, 4000792, 4002840, 4004888, 4006936, 4008993, 4011041, 4013089, 4015137, 4017185, 4019233, 4021281, 4023329, 4025377, 4027425, 4029473, 4031521, 4033569, 4035617, 4037665, 4039720, 4041768, 4043816, 4045864, 4047912, 4049960, 4052008, 4054056, 4056104, 4058152, 4060200, 4062248, 4064296, 4066344, 4068392, 4070449, 4072497, 4074545, 4076593, 4078641, 4080689, 4082737, 4084785, 4086833, 4088881, 4090929, 4092977, 4095025, 4097073, 4099129, 4101185, 4103233, 4105281, 4107329, 4109377, 4111425, 4113473, 4115521, 4117569, 4119617, 4121665, 4123713, 4125761, 4127809, 4129859, 4131916, 4133964, 4136012, 4138060, 4140108, 4142156, 4144204, 4146252, 4148300, 4150348, 4152396, 4154444, 4156492, 4158540, 4160597, 4162654, 4164702, 4166750, 4168798, 4170846, 4172894, 4174942, 4176999, 4179047, 4181095, 4183143, 4185191, 4187239, 4189287, 4191335, 4193392, 4195449, 4197497, 4199545, 4201593, 4203641, 4205689, 4207737, 4209785, 4211833, 4213881, 4215929, 4217977, 4220025, 4222073, 4224130, 4226178, 4228226, 4230274, 4232322, 4234370, 4236418, 4238466, 4240523, 4242571, 4244619, 4246667, 4248715, 4250763, 4252811, 4254868, 4256916, 4258964, 4261012, 4263060, 4265108, 4267156, 4269204, 4271252, 4273300, 4275348, 4277396, 4279444, 4281492, 4283540, 4285597, 4287645, 4289693, 4291741, 4293789, 4295837, 4297885, 4299933, 4301981, 4304029, 4306077, 4308125, 4310173, 4312221, 4314269, 4316326, 4318374, 4320422, 4322470, 4324518, 4326566, 4328614, 4330662, 4332710, 4334758, 4336806, 4338854, 4340902, 4342950, 4344998, 4347055, 4349103, 4351151, 4353199, 4355247, 4357295, 4359343, 4361391, 4363439, 4365487, 4367535, 4369583, 4371639, 4373695, 4375743, 4377800, 4379848, 4381896, 4383944, 4385992, 4388040, 4390088, 4392136, 4394184, 4396232, 4398280, 4400328, 4402376, 4404424, 4406472, 4408529, 4410577, 4412625, 4414673, 4416721, 4418769, 4420817, 4422865, 4424913, 4426961, 4429009, 4431057, 4433105, 4435153, 4437201, 4439258, 4441306, 4443354, 4445402, 4447450, 4449498, 4451546, 4453594, 4455642, 4457690, 4459738, 4461786, 4463834, 4465882, 4467930, 4469987, 4472035, 4474083, 4476131, 4478179, 4480227, 4482275, 4484323, 4486371, 4488419, 4490467, 4492522, 4494570, 4496618, 4498666, 4500723, 4502771, 4504819, 4506867, 4508915, 4510963, 4513011, 4515059, 4517107, 4519155, 4521203, 4523251, 4525299, 4527347, 4529395, 4531451, 4533499, 4535547, 4537595, 4539643, 4541691, 4543739, 4545787, 4547835, 4549883, 4551931, 4553979, 4556027, 4558075, 4560123, 4562180, 4564237, 4566285, 4568333, 4570381, 4572429, 4574477, 4576525, 4578573, 4580621, 4582669, 4584717, 4586765, 4588813, 4590861, 4592918, 4594966, 4597014, 4599062, 4601110, 4603158, 4605206, 4607254, 4609302, 4611350, 4613398, 4615446, 4617494, 4619542, 4621590, 4623647, 4625695, 4627743, 4629791, 4631839, 4633887, 4635935, 4637983, 4640031, 4641901, 4641990, 4642088, 4642181, 4642270, 4642359, 4642451, 4642550, 4642640, 4642729, 4642823, 4642912, 4643010, 4643099, 4643186, 4643275, 4643364, 4643462, 4643555, 4643644, 4643733, 4643825, 4643924, 4644014, 4644103, 4644197, 4644286, 4644384, 4644752, 4646696, 4648744, 4650792, 4652840, 4654888, 4656936, 4658984, 4661032, 4663080, 4665128, 4667176, 4669224, 4671272, 4673320, 4675377, 4677425, 4679473, 4681521, 4683569, 4685617, 4687665, 4689713, 4691761, 4693809, 4695857, 4697905, 4699953, 4702001, 4704049, 4706106, 4708154, 4710202, 4712250, 4714298, 4716346, 4718394, 4720442, 4722490, 4724538, 4726586, 4728634, 4730682, 4732730, 4734778, 4736835, 4738890, 4740938, 4742986, 4745034, 4747082, 4749130, 4751178, 4753226, 4755274, 4757322, 4759370, 4761418, 4763466, 4765519, 4767576, 4769624, 4771672, 4773720, 4775774, 4777822, 4779870, 4781918, 4783966, 4786014, 4788062, 4790110, 4792158, 4794206, 4796254, 4798311, 4800359, 4802407, 4804455, 4806503, 4808551, 4810599, 4812647, 4814695, 4816743, 4818800, 4820848, 4822896, 4824944, 4826992, 4829040, 4831088, 4833144, 4835192, 4837240, 4839291, 4841339, 4843392, 4845440, 4847488, 4849536, 4851584, 4853632, 4855680, 4857728, 4859785, 4861822, 4863870, 4865918, 4867966, 4870014, 4872062, 4874110, 4876158, 4878206, 4880239, 4882287, 4884335, 4886392, 4888440, 4890497, 4892545, 4894593, 4896641, 4898689, 4900737, 4902785, 4904841, 4906880, 4908928, 4910976, 4913024, 4915072, 4917120, 4919168, 4921225, 4923273, 4925321, 4927369, 4929417, 4931465, 4933513, 4935561, 4937616, 4939664, 4941712, 4943760, 4945808, 4947856, 4949904, 4951961, 4954009, 4956057, 4958107, 4960155, 4962203, 4964251, 4966299, 4968353, 4970409, 4972459, 4974507, 4976555, 4978603, 4980646, 4982694, 4984742, 4986790, 4988838, 4990886, 4992934, 4994982, 4997030, 4999078, 5001126, 5003177, 5005225, 5007273, 5009321, 5011368, 5013425, 5015473, 5017521, 5019569, 5021617, 5023665, 5025713, 5027761, 5029809, 5031857, 5033905, 5035944, 5037992, 5040040, 5042088, 5044145, 5046193, 5048241, 5050289, 5052337, 5054385, 5056433, 5058481, 5060529, 5062577, 5064625, 5066673, 5068721, 5070769, 5072817, 5074874, 5076922, 5078970, 5081018, 5083066, 5085114, 5087162, 5089210, 5091266, 5093323, 5095371, 5097419, 5099467, 5101515, 5103563, 5105620, 5107668, 5109716, 5111771, 5113819, 5115867, 5117915, 5119963, 5122011, 5124059, 5126107, 5128155, 5130211, 5132259, 5134307, 5136355, 5138403, 5140451, 5142499, 5144547, 5146595, 5148643, 5150690, 5152738, 5154786, 5156834, 5158882, 5160930, 5162978, 5165028, 5167083, 5169131, 5171179, 5173227, 5175275, 5177323, 5179371, 5181419, 5183467, 5185515, 5187552, 5189600, 5191648, 5193696, 5195744, 5197801, 5199849, 5201897, 5203945, 5205993, 5208041, 5210089, 5212137, 5214181, 5216229, 5218277, 5220325, 5222379, 5224427, 5226475, 5228532, 5230580, 5232628, 5234676, 5236724, 5238772, 5240820, 5242868, 5244917, 5246965, 5249013, 5251061, 5253109, 5255157, 5257205, 5259262, 5261310, 5263358, 5265406, 5267454, 5269502, 5271550, 5273598, 5275646, 5277694, 5279742, 5281790, 5283838, 5285886, 5287934, 5289991, 5292039, 5294087, 5296135, 5298183, 5300231, 5302279, 5304327, 5306375, 5308423, 5310471, 5312519, 5314567, 5316615, 5318663, 5320720, 5322774, 5324822, 5326870, 5328918, 5330966, 5333014, 5335062, 5337110, 5339158, 5341206, 5343245, 5345293, 5347341, 5349389, 5351428, 5353476, 5355524, 5357572, 5359620, 5361668, 5363716, 5365764, 5367804, 5369852, 5371900, 5373948, 5375996, 5378053, 5380101, 5382158, 5384206, 5386254, 5388302, 5390350, 5392407, 5394455, 5396503, 5398551, 5400592, 5402640, 5404688, 5406736, 5408784, 5410832, 5412888, 5414936, 5416984, 5419032, 5421080, 5423128, 5425181, 5427229, 5429285, 5431333, 5433381, 5435429, 5437477, 5439525, 5441573, 5443615, 5445663, 5447711, 5449759, 5451807, 5453855, 5455903, 5457952, 546e4, 5462048, 5464096, 5466144, 5468192, 5470240, 5472288, 5474345, 5476393, 5478441, 5480489, 5482537, 5484585, 5486626, 5488674, 5490722, 5492770, 5494809, 5496857, 5498905, 5500953, 5503001, 5505058, 5507106, 5509154, 5511202, 5513250, 5515298, 5517346, 5519394, 5521436, 5523484, 5525532, 5527580, 5529630, 5531678, 5533726, 5535783, 5537831, 5539879, 5541927, 5543975, 5546023, 5548076, 5550124, 5552172, 5554223, 5556271, 5558319, 5560367, 5562415, 5564463, 5566513, 5568570, 5570618, 5572666, 5574714, 5576770, 5578818, 5580866, 5582919, 5584967, 5587015, 5589063, 5591111, 5593167, 5595223, 5597280, 5599328, 5601376, 5603424, 5605472, 5607520, 5609568, 5611616, 5613664, 5615712, 5617760, 5619808, 5621856, 5623904, 5625952, 5628009, 5630057, 5632105, 5634162, 5636210, 5638258, 5640314, 5642362, 5644410, 5646458, 5648506, 5650554, 5652602, 5654650, 5656698, 5658755, 5660803, 5662851, 5664899, 5666947, 5668995, 5671043, 5673091, 5675137, 5677194, 5679242, 5681290, 5683338, 5685386, 5687434, 5689491, 5691539, 5693587, 5695635, 5697683, 5699731, 5701779, 5703827, 5705875, 5707923, 5709971, 5712019, 5714067, 5716115, 5718163, 5720220, 5722268, 5724316, 5726364, 5728412, 5730468, 5732516, 5734564, 5736612, 5738667, 5740718, 5742766, 5744814, 5746862, 5748910, 5750955, 5753003, 5755051, 5757099, 5759156, 5761209, 5763257, 5765305, 5767353, 5769401, 5771449, 5773497, 5775545, 5777593, 5779640, 5781697, 5783745, 5785793, 5787841, 5789889, 5791937, 5793985, 5796033, 5798081, 5800129, 5802177, 5804225, 5806273, 5808321, 5810369, 5812426, 5814474, 5816522, 5818570, 5820618, 5822666, 5824714, 5826762, 5828803, 5830851, 5832899, 5834947, 5837001, 5839049, 5841097, 5843154, 5845202, 5847250, 5849298, 5851346, 5853394, 5855442, 5857490, 5859538, 5861586, 5863634, 5865682, 5867730, 5869778, 5871826, 5873883, 5875931, 5877979, 5880027, 5882075, 5884123, 5886171, 5888219, 5890267, 5892315, 5894363, 5896411, 5898459, 5900507, 5902555, 5904612, 5906660, 5908708, 5910756, 5912804, 5914852, 5916900, 5918948, 5920996, 5923044, 5925092, 5927140, 5929188, 5931236, 5933289, 5935346, 5937394, 5939442, 5941490, 5943546, 5945594, 5947645, 5949688, 5951731, 5953779, 5955815, 5957863, 5959911, 5961959, 5964007, 5966064, 5968112, 5970160, 5972208, 5974256, 5976308, 5978356, 5980404, 5982448, 5984496, 5986534, 5988587, 5990635, 5992683, 5994731, 5996782, 5998830, 6000869, 6002917, 6004966, 6007021, 6009072, 6011116, 6013164, 6015202, 6017249, 6019294, 6021342, 6023390, 6025433, 6027474, 6029525, 6031573, 6033621, 6035669, 6037721, 6039769, 6041817, 6043863, 6045911, 6047959, 6050007, 6052055, 6054103, 6056151, 6058208, 6060256, 6062304, 6064352, 6066400, 6068448, 6070496, 6072544, 6074592, 6076640, 6078688, 6080736, 6082784, 6084832, 6086880, 6088937, 6090985, 6093033, 6095081, 6097129, 6099177, 6101225, 6103273, 6105321, 6107369, 6109417, 6111465, 6113513, 6115561, 6117609, 6119666, 6121714, 6123762, 6125810, 6127858, 6129906, 6131954, 6134002, 6136050, 6138098, 6140146, 6142194, 6144242, 6146290, 6148338, 6150395, 6152443, 6154491, 6156539, 6158594, 6160642, 6162690, 6164738, 6166786, 6168834, 6170882, 6172930, 6174978, 6177026, 6179074, 6181131, 6183179, 6185227, 6187275, 6189323, 6191371, 6193419, 6195467, 6197515, 6199571, 6201613, 6203663, 6205711, 6207759, 6209807, 6211855, 6213903, 6215951, 6217999, 6220047, 6222095, 6224143, 6226199, 6228247, 6230295, 6232344, 6234392, 6236440, 6238488, 6240536, 6242593, 6244641, 6246689, 6248737, 6250785, 6252833, 6254881, 6256929, 6258977, 6261025, 6263073, 6265121, 6267169, 6269217, 6271265, 6273322, 6275370, 6277418, 6279466, 6281514, 6283562, 6285610, 6287658, 6289702, 6291750, 6293798, 6295846, 6297894, 6299942, 6301993, 6304050, 6306101, 6308149, 6310194, 6312242, 6314290, 6316338, 6318386, 6320434, 6322482, 6324530, 6326578, 6328626, 6330674, 6332722, 6334779, 6336827, 6338875, 6340923, 6342971, 6345019, 6347067, 6349115, 6351163, 6353211, 6355259, 6357307, 6359355, 6361403, 6363451, 6365508, 6367556, 6369604, 6371652, 6373700, 6375748, 6377796, 6379844, 6381892, 6383940, 6385988, 6388036, 6390084, 6392132, 6394180, 6396237, 6398285, 6400333, 6402381, 6404429, 6406477, 6408525, 6410573, 6412621, 6414669, 6416717, 6418765, 6420813, 6422861, 6424909, 6426963, 6429011, 6431059, 6433107, 6435155, 6437203, 6439251, 6441299, 6443347, 6445395, 6447443, 6449491, 6451539, 6453587, 6455635, 6457692, 6459740, 6461788, 6463836, 6465884, 6467932, 6469980, 6472028, 6474076, 6476124, 6478172, 6480220, 6482268, 6484316, 6486364, 6488418, 6490466, 6492514, 6494570, 6496618, 6498666, 6500722, 6502770, 6504818, 6506874, 6508922, 6510972, 6513029, 6515077, 6517125, 6519166, 6521214, 6523262, 6525310, 6527358, 6529406, 6531454, 6533502, 6535559, 6537610, 6539663, 6541711, 6543759, 6545807, 6547855, 6549912, 6551960, 6554008, 6556056, 6558104, 6560152, 6562200, 6564248, 6566296, 6568344, 6570392, 6572440, 6574488, 6576536, 6578584, 6580641, 6582698, 6584754, 6586802, 6588850, 6590898, 6592946, 6594994, 6597036, 6599084, 6601132, 6603180, 6605228, 6607276, 6609324, 6611381, 6613433, 6615481, 6617529, 6619577, 6621625, 6623673, 6625721, 6627769, 6629817, 6631865, 6633913, 6635961, 6638009, 6640057, 6642114, 6644162, 6646210, 6648258, 6650306, 6652354, 6654402, 6656450, 6658498, 6660555, 6662603, 6664651, 6666699, 6668747, 6670795, 6672852, 6674900, 6676948, 6678996, 6681044, 6683092, 6685140, 6687188, 6689236, 6691284, 6693332, 6695380, 6697428, 6699476, 6701524, 6703581, 6705638, 6707686, 6709734, 6711782, 6713830, 6715878, 6717926, 6719974, 6722022, 6724070, 6726089, 6728137, 6730185, 6732233, 6734290, 6736338, 6738386, 6740434, 6742482, 6744530, 6746578, 6748626, 6750674, 6752722, 6754770, 6756818, 6758866, 6760914, 6762962, 6765019, 6767067, 6769115, 6771163, 6773211, 6775259, 6777307, 6779355, 6781403, 6783446, 6785494, 6787542, 6789590, 6791638, 6793686, 6795743, 6797791, 6799839, 6801887, 6803935, 6805983, 6808031, 6810079, 6812127, 6814175, 6816223, 6818271, 6820319, 6822367, 6824415, 6826458, 6828506, 6830554, 6832602, 6834650, 6836698, 6838746, 6840797, 6842845, 6844893, 6846941, 6848989, 6851037, 6853085, 6855133, 6857190, 6859236, 6861284, 6863332, 6865380, 6867428, 6869479, 6871527, 6873575, 6875623, 6877655, 6879703, 6881751, 6883799, 6885847, 6887904, 6889952, 6892e3, 6894048, 6896096, 6898144, 6900192, 6902240, 6904286, 6906334, 6908382, 6910430, 6912478, 6914526, 6916574, 6918631, 6920679, 6922727, 6924775, 6926823, 6928871, 6930919, 6932967, 6935015, 6937053, 6939101, 6941149, 6943197, 6945245, 6947293, 6949350, 6951398, 6953446, 6955494, 6957542, 6959590, 6961638, 6963686, 6965742, 6967790, 6969838, 6971886, 6973934, 6975982, 6978030, 6980087, 6982135, 6984183, 6986231, 6988279, 6990327, 6992375, 6994423, 6996471, 6998519, 7000567, 7002615, 7004663, 7006719, 7008767, 7010824, 7012872, 7014920, 7016968, 7019016, 7021064, 7023112, 7025160, 7027208, 7029256, 7031304, 7033352, 7035400, 7037448, 7039496, 7041553, 7043601, 7045649, 7047697, 7049745, 7051793, 7053841, 7055889, 7057937, 7059985, 7062033, 7064081, 7066129, 7068177, 7070225, 7072282, 7074330, 7076378, 7078426, 7080474, 7082522, 7084570, 7086618, 7088666, 7090714, 7092762, 7094810, 7096858, 7098906, 7100954, 7103011, 7105064, 7107112, 7109160, 7111208, 7113256, 7115304, 7117352, 7119400, 7121448, 7123496, 7125544, 7127592, 7129640, 7131688, 7133735, 7135783, 7137831, 7139879, 7141927, 7143975, 7146023, 7148076, 7150132, 7152180, 7154228, 7156276, 7158324, 7160372, 7162420, 7164477, 7166525, 7168573, 7170621, 7172669, 7174717, 7176765, 7178813, 7180861, 7182909, 7184957, 7187005, 7189053, 7191101, 7193149, 7195206, 7197254, 7199302, 7201350, 7203398, 7205446, 7207494, 7209542, 7211586, 7213634, 7215682, 7217730, 7219787, 7221835, 7223892, 7225949, 7227997, 7230045, 7232093, 7234141, 7236189, 7238237, 7240285, 7242342, 7244390, 7246438, 7248486, 7250534, 7252582, 7254630, 7256687, 7258735, 7260783, 7262840, 7264888, 7266936, 7268984, 7271032, 7273085, 7275133, 7277181, 7279229, 7281277, 7283325, 7285373, 7287430, 7289478, 7291526, 7293574, 7295622, 7297670, 7299718, 7301766, 7303814, 7305862, 7307910, 7309958, 7312006, 7314054, 7316102, 7318159, 7320207, 7322255, 7324303, 7326351, 7328399, 7330447, 7332495, 7334543, 7336591, 7338639, 7340687, 7342735, 7344783, 7346831, 7348888, 7350936, 7352984, 7355032, 7357080, 7359128, 7361176, 7363207, 7365255, 7367303, 7369351, 7371407, 7373464, 7375517, 7377566, 7379623, 7381671, 7383719, 7385767, 7387815, 7389863, 7391911, 7393959, 7396007, 7398063, 7400111, 7402159, 7404207, 7406255, 7408303, 7410359, 7412407, 7414455, 7416503, 7418551, 7420599, 7422648, 7424696, 7426753, 7428801, 7430849, 7432897, 7434945, 7436993, 7439041, 7441097, 7443145, 7445193, 7447241, 7449289, 7451337, 7453385, 7455433, 7457481, 7459529, 7461577, 7463634, 7465682, 7467730, 7469778, 7471835, 7473883, 7475931, 7477979, 7480027, 7482075, 7484123, 7486171, 7488219, 7490267, 7492315, 7494363, 7496411, 7498460, 7500508, 7502565, 7504613, 7506661, 7508709, 7510757, 7512806, 7514854, 7516902, 7518950, 7520998, 7523046, 7525094, 7527142, 7529190, 7531238, 7533295, 7535343, 7537391, 7539439, 7541487, 7543535, 7545583, 7547631, 7549685, 7551733, 7553781, 7555829, 7557877, 7559934, 7561982, 7564037, 7566085, 7568133, 7570181, 7572229, 7574277, 7576325, 7578373, 7580421, 7582469, 7584517, 7586565, 7588613, 7590661, 7592709, 7594766, 7596814, 7598862, 7600910, 7602958, 7605006, 7607054, 7609102, 7611150, 7613198, 7615246, 7617294, 7619342, 7621390, 7623438, 7625495, 7627543, 7629591, 7631639, 7633687, 7635735, 7637783, 7639831, 7641885, 7643933, 7645981, 7648029, 7650077, 7652125, 7654173, 7656230, 7658278, 7660326, 7662374, 7664422, 7666470, 7668518, 7670566, 7672614, 7674662, 7676710, 7678758, 7680806, 7682854, 7684902, 7686959, 7689012, 7691060, 7693108, 7695156, 7697211, 7699259, 7701307, 7703355, 7705403, 7707451, 7709506, 7711554, 7713602, 7715650, 7717707, 7719755, 7721803, 7723851, 7725899, 7727947, 7729995, 7732043, 7734091, 7736139, 7738187, 7740235, 7742283, 7744331, 7746379, 7748421, 7750469, 7752517, 7754565, 7756613, 7758661, 7760715, 7762763, 7764811, 7766859, 7768915, 7770963, 7773011, 7775059, 7777107, 7779164, 7781212, 7783260, 7785308, 7787356, 7789410, 7791458, 7793506, 7795554, 7797602, 7799650, 7801698, 7803741, 7805789, 7807837, 7809892, 7811940, 7813988, 7816036, 7818084, 7820133, 7822181, 7824229, 7826277, 7828325, 7830373, 7832427, 7834475, 7836528, 7838576, 7840633, 7842681, 7844729, 7846777, 7848825, 7850873, 7852921, 7854969, 7857017, 7859061, 7861109, 7863157, 7865205, 7867253, 7869301, 7871358, 7873406, 7875454, 7877502, 7879550, 7881598, 7883646, 7885694, 7887742, 7889790, 7891838, 7893886, 7895934, 7897982, 7900030, 7902087, 7904135, 7906183, 7908231, 7910279, 7912327, 7914375, 7916423, 7918471, 7920519, 7922567, 7924615, 7926663, 7928711, 7930759, 7932815, 7934866, 7936914, 7938962, 7941010, 7943058, 7945106, 7947154, 7949202, 7951250, 7953298, 7955336, 7957384, 7959432, 7961480, 7963536, 7965584, 7967632, 7969680, 7971728, 7973776, 7975824, 7977872, 7979920, 7981968, 7984016, 7986064, 7988112, 7990160, 7992208, 7994265, 7996313, 7998361, 8000409, 8002457, 8004513, 8006561, 8008609, 8010657, 8012705, 8014753, 8016801, 8018849, 8020897, 8022945, 8025002, 8027050, 8029095, 8031143, 8033191, 8035239, 8037287, 8039335, 8041383, 8043431, 8045479, 8047527, 8049575, 8051623, 8053671, 8055718, 8057766, 8059814, 8061862, 8063910, 8065958, 8068006, 8070056, 8072104, 8074152, 8076200, 8078248, 8080296, 8082344, 8084392, 8086449, 8088500, 8090548, 8092596, 8094644, 8096692, 8098737, 8100794, 8102842, 8104890, 8106926, 8108974, 8111022, 8113070, 8115118, 8117174, 8119222, 8121270, 8123318, 8125366, 8127414, 8129462, 8131505, 8133547, 8135595, 8137643, 8139691, 8141739, 8143787, 8145835, 8147881, 8149937, 8151985, 8154033, 8156081, 8158129, 8160177, 8162225, 8164273, 8166324, 8168372, 8170420, 8172468, 8174516, 8176564, 8178621, 8180669, 8182717, 8184765, 8186813, 8188861, 8190909, 8192957, 8195012, 8197060, 8199108, 8201156, 8203204, 8205252, 8207300, 8209357, 8211405, 8213453, 8215501, 8217549, 8219597, 8221645, 8223693, 8225741, 8227798, 8229846, 8231894, 8233942, 8235990, 8238042, 8240099, 8242147, 8244195, 8246243, 8248291, 8250339, 8252387, 8254435, 8256483, 8258531, 8260579, 8262627, 8264675, 8266723, 8268771, 8270828, 8272876, 8274924, 8276972, 8279020, 8281068, 8283116, 8285164, 8287209, 8289257, 8291305, 8293353, 8295401, 8297449, 8299497, 8301554, 8303602, 8305650, 8307698, 8309746, 8311794, 8313842, 8315890, 8317938, 8319986, 8322034, 8324082, 8326130, 8328178, 8330226, 8332283, 8334337, 8336385, 8338433, 8340481, 8342529, 8344577, 8346625, 8348673, 8350729, 8352777, 8354825, 8356873, 8358921, 8360969, 8363003, 8365051, 8367099, 8369147, 8371195, 8373240, 8375288, 8377338, 8379393, 8381441, 8383489, 8385537, 8387585, 8389633, 8391682, 8393739, 8395787, 8397835, 8399883, 8401931, 8403979, 8406027, 8408075, 8410123, 8412171, 8414219, 8416267, 8418315, 8420363, 8422411, 8424468, 8426516, 8428564, 8430612, 8432660, 8434710, 8436758, 8438806, 8440847, 8442895, 8444943, 8446991, 8449041, 8451089, 8453144, 8455201, 8457249, 8459297, 8461345, 8463393, 8465441, 8467495, 8469543, 8471591, 8473639, 8475687, 8477735, 8479783, 8481831, 8483879, 8485936, 8487984, 8490032, 8492080, 8494128, 8496176, 8498224, 8500272, 8502320, 8504377, 8506425, 8508473, 8510521, 8512569, 8514617, 8516674, 8518722, 8520770, 8522818, 8524866, 8526914, 8528962, 8531010, 8533058, 8535106, 8537154, 8539202, 8541250, 8543298, 8545346, 8547403, 8549451, 8551499, 8553547, 8555595, 8557643, 8559691, 8561739, 8563787, 8565835, 8567883, 8569931, 8571979, 8574027, 8576075, 8578119, 8580175, 8582223, 8584271, 8586319, 8588367, 8590415, 8592463, 8594507, 8596555, 8598603, 8600651, 8602699, 8604747, 8606795, 8608852, 8610900, 8612948, 8614996, 8617044, 8619092, 8621140, 8623188, 8625236, 8627284, 8629332, 8631380, 8633428, 8635476, 8637524, 8639581, 8641629, 8643677, 8645725, 8647781, 8649829, 8651877, 8653925, 8655973, 8658030, 8660078, 8662126, 8664183, 8666238, 8668286, 8670329, 8672377, 8674425, 8676473, 8678521, 8680569, 8682617, 8684665, 8686713, 8688761, 8690809, 8692857, 8694905, 8696953, 8699003, 8701060, 8703108, 8705156, 8707204, 8709252, 8711300, 8713348, 8715396, 8717444, 8719492, 8721546, 8723594, 8725642, 8727690, 8729738, 8731794, 8733851, 8735905, 8737953, 8740001, 8742054, 8744111, 8746159, 8747628, 8748499, 8750556, 8752604, 8754652, 8756709, 8758757, 8760804, 8762852, 8764906, 8766954, 8769002, 8771051, 8773108, 8775159, 8777207, 8779255, 8781312, 8783360, 8785408, 8787465, 8789520, 8791568, 8793616, 8795670, 8797720, 8799768, 8801813, 8803858, 8805906, 8807954, 8810002, 8812059, 8814107, 8816164, 8818218, 8820266, 8822314, 8824362, 8826419, 8828467, 8830523, 8832571, 8834628, 8836678, 8838726, 8840767, 8842824, 8844872, 8846920, 8848977, 8851025, 8853073, 8855130, 8857181, 8859229, 8861277, 8863325, 8865366, 8867388, 8869436, 8871485, 8873534, 8875582, 8877630, 8879687, 8881735, 8883783, 8885831, 8887879, 8889927, 8891975, 8894023, 8896080, 8898122, 8900170, 8902210, 8904267, 8906311, 8908359, 8910407, 8912458, 8914506, 8916549, 8918303, 8919980, 8922028, 8924076, 8926133, 8928181, 8930229, 8932277, 8934334, 8936372, 8938429, 8940482, 8942530, 8944585, 8946638, 8948679, 8950727, 8952775, 8954823, 8956880, 8958936, 8960984, 8963032, 8965089, 8967137, 8969184, 8971239, 8973292, 8975340, 8977388, 8979441, 8981489, 8983537, 8985594, 8987641, 8989689, 8991737, 8993785, 8995842, 8997899, 8999947, 9001993, 9004041, 9006089, 9008143, 9010194, 9012226, 9014272, 9016320, 9018370, 9020423, 9022471, 9024519, 9026576, 9028624, 9030672, 9032729, 9034777, 9036825, 9038873, 9040930, 9042978, 9045026, 9047061, 9049117, 9051165, 9053213, 9055261, 9057318, 9059366, 9061414, 9063471, 9065519, 9067567, 9069615, 9071672, 9073720, 9075768, 9077816, 9079861, 9081901, 9083948, 9085996, 9088053, 9090101, 9092143, 9094200, 9096238, 9098286, 9100334, 9102391, 9104439, 9106487, 9108535, 9110589, 9112637, 9114685, 9116733, 9118790, 9120838, 9122886, 9124936, 9126988, 9129040, 9131088, 9133145, 9135193, 9137242, 9139294, 9141351, 9143399, 9145447, 9147495, 9149552, 9151600, 9153648, 9155705, 9157753, 9159808, 9161856, 9163913, 9165961, 9168009, 9170057, 9172114, 9174162, 9176210, 9178261, 9180318, 9182370, 9184418, 9186475, 9188522, 9190570, 9192618, 9194675, 9196732, 9198789, 9200837, 9202894, 9204942, 9206997, 9209045, 9211100, 9213155, 9215210, 9217267, 9219315, 9221363, 9223411, 9225468, 9227516, 9229564, 9231612, 9233669, 9235720, 9237768, 9239816, 9241870, 9243927, 9245975, 9248029, 9250077, 9252125, 9254173, 9256230, 9258278, 9260326, 9262379, 9264435, 9266483, 9268531, 9270579, 9272636, 9274693, 9276741, 9278796, 9280844, 9282892, 9284947, 9287003, 9289051, 9291099, 9293147, 9295203, 9297251, 9299299, 9301347, 9303404, 9305452, 9307500, 9309555, 9311605, 9313653, 9315701, 9317746, 9319794, 9321842, 9323890, 9325940, 9327988, 9330045, 9332093, 9334150, 9336198, 9338246, 9340303, 9342351, 9344408, 9346465, 9348522, 9350570, 9352618, 9354666, 9356723, 9358776, 9360824, 9362877, 9364934, 9366982, 9369030, 9371087, 9373135, 9375186, 9377234, 9379291, 9381348, 9383396, 9385444, 9387501, 9389549, 9391597, 9393645, 9395702, 9397750, 9399798, 9401855, 9403903, 9405954, 9408002, 9410059, 9412107, 9414155, 9416203, 9418260, 9420308, 9422356, 9424404, 9426461, 9428516, 9430564, 9432621, 9434676, 9436724, 9438773, 9440826, 9442883, 9444931, 9446979, 9449036, 9451093, 9453149, 9455202, 9457259, 9459307, 9461355, 9463412, 9465466, 9467514, 9469564, 9471608, 9473656, 9475704, 9477752, 9479808, 9481856, 9483904, 9485952, 9488009, 9490057, 9492111, 9494168, 9496216, 9498264, 9500312, 9502342, 9504396, 9506444, 9508495, 9510539, 9512587, 9514635, 9516683, 9518728, 9520776, 9522824, 9524881, 9526929, 9528977, 9531025, 9533082, 9535139, 9537187, 9539235, 9541292, 9543340, 9545388, 9547436, 9549493, 9551550, 9553598, 9555655, 9557703, 9559751, 9561799, 9563847, 9565895, 9567943, 9569991, 9572048, 9574096, 9576144, 9578192, 9580249, 9582297, 9584351, 9586407, 9588455, 9590503, 9592551, 9594605, 9596653, 9598704, 9600752, 9602809, 9604857, 9606905, 9608953, 9611010, 9613058, 9615106, 9617163, 9619211, 9621268, 9623325, 9625382, 9627430, 9629478, 9631533, 9633589, 9635646, 9637694, 9639742, 9641799, 9643847, 9645895, 9647952, 965e4, 9652048, 9654096, 9656153, 9658201, 9660249, 9662299, 9664356, 9666404, 9668452, 9670500, 9672557, 9674605, 9676659, 9678716, 9680764, 9682812, 9684865, 9686922, 9688970, 9691018, 9693066, 9695123, 9697171, 9699219, 9701264, 9703310, 9705358, 9707406, 9709463, 9711511, 9713559, 9715607, 9717664, 9719712, 9721760, 9723808, 9725865, 9727913, 9729961, 9732009, 9734066, 9736116, 9738173, 9740229, 9742277, 9744325, 9746381, 9748438, 9750486, 9752542, 9754599, 9756656, 9758704, 9760752, 9762800, 9764848, 9766896, 9768944, 9771001, 9773049, 9775097, 9777145, 9779202, 9781250, 9783298, 9785346, 9787398, 9789446, 9791494, 9793542, 9795599, 9797648, 9799696, 9801753, 9803801, 9805849, 9807906, 9809962, 9812010, 9814058, 9816114, 9818171, 9820219, 9822267, 9824315, 9826370, 9828418, 9830466, 9832523, 9834580, 9836628, 9838676, 9840733, 9842781, 9844829, 9846877, 9848930, 9850987, 9853035, 9855083, 9857140, 9859188, 9861236, 9863290, 9865345, 9867393, 9869441, 9871498, 9873546, 9875594, 9877642, 9879693, 9881750, 9883798, 9885846, 9887903, 9889951, 9891999, 9894056, 9896104, 9898155, 9900203, 9902260, 9904308, 9906356, 9908404, 9910461, 9912509, 9914561, 9916618, 9918675, 9920723, 9922779, 9924836, 9926880, 9928928, 9930976, 9933033, 9935089, 9937145, 9939195, 9941247, 9943295, 9945343, 9947391, 9949446, 9951498, 9953546, 9955603, 9957651, 9959699, 9961756, 9963811, 9965862, 9967917, 9969967, 9972024, 9974072, 9976120, 9978177, 9980234, 9982288, 9984345, 9986402, 9988450, 9990498, 9992546, 9994603, 9996651, 9998699, 10000754, 10002811, 10004859, 10006907, 10008955, 10011011, 10013059, 10015114, 10017164, 10019212, 10021260, 10023308, 10025365, 10027413, 10029461, 10031512, 10033553, 10035601, 10037649, 10039697, 10041754, 10043802, 10045850, 10047906, 10049954, 10052002, 10054050, 10056098, 10058146, 10060203, 10062251, 10064308, 10066356, 10068404, 10070460, 10072508, 10074558, 10076606, 10078659, 10080711, 10082746, 10084794, 10086837, 10088885, 10090942, 10092993, 10095039, 10097094, 10099142, 10101190, 10103247, 10105295, 10107343, 10109400, 10111457, 10113505, 10115553, 10117610, 10119658, 10121706, 10123762, 10125819, 10127864, 10129912, 10131960, 10134017, 10136065, 10138113, 10140170, 10142218, 10144264, 10146312, 10148369, 10150417, 10152465, 10154513, 10156570, 10158618, 10160673, 10162721, 10164769, 10166817, 10168865, 10170921, 10172969, 10175017, 10177071, 10179128, 10181176, 10183224, 10185272, 10187328, 10189376, 10191424, 10193472, 10195519, 10197567, 10199615, 10201672, 10203729, 10205777, 10207825, 10209882, 10211930, 10213978, 10216026, 10218080, 10220128, 10222176, 10224220, 10226266, 10228314, 10230371, 10232428, 10234476, 10236533, 10238581, 10240638, 10242686, 10244734, 10246789, 10248846, 10250903, 10252958, 10255007, 10257055, 10259111, 10261163, 10263220, 10265268, 10267325, 10269373, 10271430, 10273478, 10275535, 10277583, 10279639, 10281687, 10283735, 10285774, 10287831, 10289879, 10291927, 10293970, 10296018, 10298032, 10300080, 10302137, 10304185, 10306238, 10308286, 10310342, 10312390, 10314438, 10316486, 10318543, 10320591, 10322639, 10324696, 10326744, 10328795, 10330843, 10332895, 10334943, 10336991, 10339039, 10341096, 10343144, 10345192, 10347240, 10349297, 10351345, 10353393, 10355450, 10357498, 10359546, 10361598, 10363655, 10365705, 10367753, 10369808, 10371865, 10373913, 10375961, 10378009, 10380066, 10382114, 10384162, 10386219, 10388267, 10390315, 10392372, 10394429, 10396485, 10398533, 10400581, 10402638, 10404686, 10406723, 10408780, 10410837, 10412885, 10414936, 10416993, 10419039, 10421085, 10423136, 10425188, 10427242, 10429290, 10431338, 10433395, 10435443, 10437491, 10439539, 10441593, 10443641, 10445689, 10447746, 10449802, 10451850, 10453898, 10455955, 10458003, 10460060, 10462108, 10464158, 10466206, 10468254, 10470306, 10472363, 10474411, 10476459, 10478513, 10480566, 10482614, 10484662, 10486719, 10488767, 10490815, 10492872, 10494928, 10496984, 10499032, 10501080, 10503137, 10505185, 10507233, 10509290, 10511338, 10513386, 10515434, 10517487, 10519535, 10521592, 10523640, 10525697, 10527748, 10529798, 10531846, 10533897, 10535945, 10537993, 10540050, 10542098, 10544148, 10546196, 10548253, 10550301, 10552349, 10554397, 10556452, 10558500, 10560553, 10562609, 10564666, 10566709, 10568757, 10570814, 10572862, 10574915, 10576963, 10579020, 10581068, 10583116, 10585164, 10587221, 10589269, 10591326, 10593374, 10595426, 10597472, 10599520, 10601577, 10603625, 10605673, 10607729, 10609777, 10611825, 10613873, 10615921, 10617978, 10620034, 10622082, 10624139, 10626190, 10628247, 10630295, 10632352, 10634400, 10636448, 10638496, 10640550, 10642598, 10644646, 10646702, 10648759, 10650807, 10652855, 10654910, 10656964, 10659021, 10661069, 10663126, 10665174, 10667222, 10669270, 10671324, 10673372, 10675420, 10677468, 10679525, 10681573, 10683621, 10685669, 10687718, 10689772, 10691820, 10693877, 10695925, 10697973, 10700021, 10702076, 10704133, 10706181, 10708237, 10710285, 10712333, 10714389, 10716437, 10718494, 10720542, 10722595, 10724652, 10726704, 10728752, 10730800, 10732857, 10734913, 10736966, 10739013, 10741070, 10743118, 10745166, 10747222, 10749270, 10751327, 10753382, 10755439, 10757487, 10759535, 10761591, 10763645, 10765702, 10767750, 10769798, 10771855, 10773909, 10775957, 10778009, 10780066, 10782123, 10784178, 10786222, 10788278, 10790326, 10792374, 10794431, 10796479, 10798527, 10800582, 10802635, 10804683, 10806731, 10808779, 10810827, 10812878, 10814926, 10816978, 10819033, 10821081, 10823132, 10825189, 10827237, 10829285, 10831333, 10833386, 10835434, 10837482, 10839530, 10841583, 10843631, 10845679, 10847736, 10849775, 10851832, 10853880, 10855937, 10857985, 10860033, 10862081, 10864136, 10866191, 10868239, 10870287, 10872344, 10874392, 10876449, 10878506, 10880552, 10882600, 10884648, 10886705, 10888761, 10890809, 10892866, 10894923, 10896971, 10899019, 10901065, 10903121, 10905169, 10907217, 10909273, 10911329, 10913376, 10915424, 10917481, 10919529, 10921577, 10923634, 10925691, 10927739, 10929793, 10931849, 10933906, 10935954, 10938010, 10940067, 10942122, 10944170, 10946218, 10948275, 10950323, 10952371, 10954419, 10956476, 10958524, 10960572, 10962620, 10964677, 10966730, 10968778, 10970823, 10972871, 10974919, 10976967, 10979024, 10981072, 10983120, 10985168, 10987223, 10989271, 10991328, 10993376, 10995433, 10997481, 10999529, 11001578, 11003633, 11005689, 11007737, 11009785, 11011833, 11013881, 11015929, 11017980, 11020035, 11022083, 11024129, 11026186, 11028234, 11030282, 11032339, 11034391, 11036439, 11038487, 11040544, 11042592, 11044640, 11046688, 11048745, 11050797, 11052845, 11054893, 11056950, 11058998, 11061046, 11063103, 11065151, 11067199, 11069247, 11071304, 11073352, 11075400, 11077448, 11079505, 11081553, 11083606, 11085654, 11087711, 11089759, 11091807, 11093864, 11095915, 11097971, 11100019, 11102076, 11104124, 11106172, 11108220, 11110275, 11112331, 11114383, 11116431, 11118488, 11120536, 11122584, 11124641, 11126689, 11128737, 11130783, 11132832, 11134880, 11136928, 11138976, 11141033, 11143081, 11145129, 11147175, 11149232, 11151289, 11153337, 11155394, 11157442, 11159490, 11161539, 11163596, 11165644, 11167692, 11169740, 11171797, 11173845, 11175893, 11177949, 11180006, 11182054, 11184102, 11186159, 11188207, 11190255, 11192300, 11194356, 11196412, 11198468, 11200516, 11202573, 11204621, 11206669, 11208713, 11210770, 11212826, 11214874, 11216924, 11218968, 11221016, 11223071, 11225128, 11227176, 11229233, 11231281, 11233332, 11235389, 11237444, 11239492, 11241549, 11243597, 11245651, 11247695, 11249743, 11251798, 11253846, 11255903, 11257951, 11259999, 11262047, 11264091, 11266143, 11268191, 11270247, 11272295, 11274343, 11276399, 11278456, 11280509, 11282557, 11284605, 11286659, 11288707, 11290755, 11292803, 11294860, 11296908, 11298959, 11301007, 11303064, 11305112, 11307160, 11309217, 11311265, 11313314, 11315366, 11317423, 11319471, 11321519, 11323567, 11325624, 11327672, 11329728, 11331774, 11333831, 11335879, 11337927, 11339984, 11342032, 11344080, 11346128, 11348185, 11350241, 11352289, 11354337, 11356389, 11358437, 11360486, 11362531, 11364588, 11366636, 11368676, 11370733, 11372781, 11374829, 11376859, 11378915, 11380963, 11383011, 11385059, 11387116, 11389164, 11391212, 11393260, 11395316, 11397364, 11399419, 11401476, 11403524, 11405580, 11407626, 11409682, 11411730, 11413778, 11415829, 11417886, 11419934, 11421990, 11424045, 11426096, 11428144, 11430192, 11432249, 11434297, 11436354, 11438402, 11440459, 11442515, 11444563, 11446611, 11448667, 11450715, 11452763, 11454811, 11456868, 11458919, 11460967, 11463024, 11465072, 11467128, 11469176, 11471233, 11473281, 11475329, 11477385, 11479441, 11481489, 11483537, 11485585, 11487642, 11489690, 11491738, 11493795, 11495843, 11497900, 11499944, 11502001, 11504052, 11506099, 11508149, 11510202, 11512250, 11514298, 11516346, 11518396, 11520444, 11522492, 11524549, 11526597, 11528645, 11530693, 11532735, 11534783, 11536834, 11538889, 11540938, 11542984, 11545038, 11547086, 11549141, 11551196, 11553244, 11555300, 11557357, 11559405, 11561453, 11563510, 11565552, 11567561, 11569605, 11571656, 11573707, 11575758, 11577799, 11579855, 11581903, 11583951, 11586008, 11588056, 11590108, 11592156, 11594213, 11596261, 11598309, 11600357, 11602414, 11604462, 11606510, 11608558, 11610591, 11612639, 11614687, 11616744, 11618792, 11620840, 11622888, 11624934, 11626982, 11629029, 11631086, 11633143, 11635191, 11637247, 11639295, 11641346, 11643403, 11645450, 11647488, 11649538, 11651588, 11653636, 11655673, 11657728, 11659780, 11661828, 11663885, 11665933, 11667981, 11670029, 11672086, 11674134, 11676182, 11678230, 11680278, 11682326, 11684374, 11686431, 11688479, 11690527, 11692575, 11694632, 11696680, 11698728, 11700776, 11702833, 11704881, 11706929, 11708977, 11711025, 11711653, 11712020, 11713790, 11715838, 11717892, 11719940, 11721979, 11724027, 11726063, 11728111, 11730159, 11732207, 11734255, 11736311, 11738322, 11740363, 11742408, 11744456, 11746504, 11748502, 11750550, 11752598, 11754646, 11756686, 11758734, 11760782, 11762830, 11764850, 11766898, 11768946, 11771003, 11773054, 11775102, 11777150, 11779198, 11781234, 11783282, 11785330, 11787378, 11789411, 11791468, 11793516, 11795528, 11797549, 11799603, 11801640, 11803688, 11805736, 11807784, 11809832, 11811880, 11813928, 11815941, 11817989, 11820037, 11822093, 11824144, 11826192, 11828240, 11830288, 11832336, 11834384, 11836432, 11838480, 11840528, 11842576, 11844624, 11846672, 11848720, 11850768, 11852822, 11854870, 11856915, 11858958, 11861006, 11863054, 11865102, 11867150, 11869198, 11871246, 11873294, 11875343, 11877391, 11879439, 11881487, 11883544, 11885592, 11887640, 11889688, 11891736, 11893793, 11895841, 11897889, 11899937, 11901985, 11904033, 11906081, 11908134, 11910182, 11912230, 11914287, 11916335, 11918383, 11920431, 11922479, 11924527, 11926572, 11928620, 11930668, 11932716, 11934762, 11936810, 11938858, 11940906, 11942962, 11945019, 11947067, 11949115, 11951157, 11953205, 11955253, 11957301, 11959349, 11961397, 11963445, 11965493, 11967541, 11969589, 11971637, 11973685, 11975733, 11977781, 11979829, 11981879, 11983927, 11985975, 11988023, 11990071, 11992119, 11994167, 11996215, 11998263, 12000311, 12002359, 12004407, 12006464, 12008512, 12010560, 12012608, 12014656, 12016704, 12018752, 12020800, 12022856, 12024904, 12026947, 12029002, 12031051, 12033099, 12035144, 12037201, 12039249, 12041297, 12043351, 12045399, 12047456, 12049504, 12051552, 12053600, 12055648, 12057696, 12059744, 12061789, 12063846, 12065902, 12067959, 12070007, 12072055, 12074103, 12076151, 12078188, 12080236, 12082284, 12084332, 12086380, 12088428, 12090476, 12092524, 12094570, 12096618, 12098674, 12100722, 12102770, 12104818, 12106866, 12108914, 12110966, 12113014, 12115062, 12117110, 12119167, 12121205, 12123253, 12125301, 12127349, 12129406, 12131454, 12133502, 12135550, 12137598, 12139646, 12141694, 12143742, 12145799, 12147847, 12149895, 12151951, 12153999, 12156047, 12158095, 12160152, 12162200, 12164248, 12166296, 12168344, 12170392, 12172440, 12174488, 12176536, 12178584, 12180632, 12182680, 12184736, 12186793, 12188841, 12190898, 12192952, 12195e3, 12197048, 12199096, 12201144, 12203192, 12205240, 12207297, 12209353, 12211401, 12213419, 12215473, 12217521, 12219569, 12221613, 12223667, 12225715, 12227763, 12229811, 12231859, 12233907, 12235955, 12238003, 12240051, 12242099, 12244147, 12246195, 12248247, 12250304, 12252361, 12254409, 12256462, 12258510, 12260558, 12262606, 12264654, 12266702, 12268750, 12270798, 12272846, 12274894, 12276942, 12278990, 12281044, 12283092, 12285140, 12287188, 12289240, 12291288, 12293336, 12295392, 12297440, 12299482, 12301530, 12303587, 12305635, 12307685, 12309733, 12311781, 12313838, 12315890, 12317938, 12319986, 12322034, 12324082, 12326130, 12328178, 12330226, 12332274, 12334322, 12336370, 12338418, 12340466, 12342514, 12344571, 12346619, 12348667, 12350717, 12352765, 12354819, 12356867, 12358915, 12360963, 12363011, 12365059, 12367107, 12369156, 12371204, 12373252, 12375309, 12377357, 12379414, 12381462, 12383512, 12385560, 12387608, 12389656, 12391704, 12393752, 12395800, 12397848, 12399896, 12401953, 12404001, 12406049, 12408097, 12410145, 12412193, 12414241, 12416294, 12418342, 12420390, 12422438, 12424486, 12426534, 12428582, 12430630, 12432678, 12434731, 12436788, 12438836, 12440884, 12442932, 12444980, 12447028, 12449076, 12451124, 12453172, 12455220, 12457268, 12459325, 12461373, 12463421, 12465469, 12467526, 12469574, 12471622, 12473670, 12475718, 12477766, 12479814, 12481862, 12483916, 12485964, 12488012, 12490060, 12492108, 12494156, 12496204, 12498261, 12500309, 12502357, 12504405, 12506453, 12508501, 12510549, 12512597, 12514645, 12516693, 12518743, 12520791, 12522839, 12524887, 12526935, 12528992, 12531040, 12533088, 12535136, 12537184, 12539232, 12541280, 12543328, 12545376, 12547424, 12549472, 12551520, 12553568, 12555616, 12557664, 12559712, 12561760, 12563808, 12565856, 12567904, 12569941, 12571989, 12574037, 12576085, 12578133, 12580189, 12582232, 12584280, 12586328, 12588376, 12590433, 12592481, 12594529, 12596577, 12598625, 12600673, 12602715, 12604763, 12606811, 12608859, 12610916, 12612972, 12615020, 12617077, 12619125, 12621182, 12623230, 12625278, 12627326, 12629374, 12631422, 12633470, 12635518, 12637566, 12639614, 12641670, 12643718, 12645766, 12647814, 12649862, 12651919, 12653967, 12656015, 12658063, 12660111, 12662159, 12664207, 12666255, 12668303, 12670351, 12672399, 12674447, 12676495, 12678543, 12680599, 12682656, 12684704, 12686752, 12688800, 12690848, 12692896, 12694944, 12696992, 12699040, 12701088, 12703136, 12705190, 12707238, 12709286, 12711334, 12713391, 12715439, 12717477, 12719525, 12721573, 12723621, 12725669, 12727717, 12729765, 12731813, 12733861, 12735909, 12737957, 12740005, 12742053, 12744110, 12746158, 12748206, 12750254, 12752302, 12754350, 12756398, 12758446, 12760494, 12762542, 12764590, 12766638, 12768686, 12770734, 12772785, 12774842, 12776890, 12778938, 12780986, 12783034, 12785082, 12787130, 12789178, 12791226, 12793274, 12795322, 12797370, 12799418, 12801466, 12803514, 12805571, 12807619, 12809667, 12811715, 12813763, 12815811, 12817859, 12819907, 12821955, 12824003, 12826051, 12828099, 12830147, 12832195, 12834243, 12836300, 12838348, 12840401, 12842449, 12844497, 12846545, 12848593, 12850641, 12852689, 12854737, 12856790, 12858838, 12860886, 12862942, 12864990, 12867047, 12869095, 12871143, 12873191, 12875220, 12877268, 12879316, 12881364, 12883412, 12885460, 12887508, 12889556, 12891604, 12893652, 12895700, 12897757, 12899805, 12901853, 12903901, 12905949, 12907997, 12910045, 12912093, 12914141, 12916189, 12918237, 12920285, 12922333, 12924381, 12926429, 12928477, 12930525, 12932573, 12934621, 12936669, 12938717, 12940765, 12942813, 12944861, 12946909, 12948966, 12951014, 12953070, 12955125, 12957173, 12959221, 12961269, 12963317, 12965365, 12967416, 12969464, 12971512, 12973560, 12975608, 12977656, 12979704, 12981752, 12983800, 12985848, 12987896, 12989940, 12991988, 12994045, 12996093, 12998141, 13000189, 13002237, 13004285, 13006333, 13008381, 13010429, 13012477, 13014525, 13016573, 13018621, 13020678, 13022726, 13024774, 13026822, 13028870, 13030918, 13032966, 13035014, 13037062, 13039110, 13041158, 13043206, 13045254, 13047302, 13049350, 13051407, 13053455, 13055503, 13057551, 13059599, 13061647, 13063695, 13065743, 13067791, 13069839, 13071887, 13073935, 13075983, 13078031, 13080079, 13082136, 13084184, 13086232, 13088280, 13090328, 13092279, 13094327, 13096375, 13098425, 13100472, 13102528, 13104585, 13106621, 13108669, 13110721, 13112758, 13114806, 13116854, 13118902, 13120946, 13122994, 13125042, 13127090, 13129138, 13131186, 13133234, 13135289, 13137338, 13139386, 13141434, 13143491, 13145541, 13147595, 13149643, 13151691, 13153746, 13155794, 13157845, 13159893, 13161941, 13163989, 13166037, 13168085, 13170133, 13172185, 13174242, 13176290, 13178338, 13180386, 13182435, 13184483, 13186531, 13188579, 13190627, 13192675, 13194723, 13196771, 13198819, 13200867, 13202915, 13204961, 13207009, 13209057, 13211105, 13213153, 13215201, 13217249, 13219297, 13221345, 13223393, 13225441, 13227489, 13229536, 13231584, 13233632, 13235689, 13237737, 13239785, 13241838, 13243886, 13245934, 13247978, 13250026, 13252082, 13254130, 13256178, 13258226, 13260274, 13262322, 13264368, 13266425, 13268473, 13270521, 13272561, 13274609, 13276657, 13278705, 13280740, 13282788, 13284836, 13286884, 13288925, 13290973, 13293021, 13295069, 13297113, 13299161, 13301209, 13303257, 13305305, 13307353, 13309401, 13311449, 13313497, 13315523, 13317571, 13319619, 13321675, 13323723, 13325771, 13327828, 13329876, 13331919, 13333967, 13336015, 13338063, 13340111, 13342159, 13344207, 13346255, 13348303, 13350351, 13352399, 13354447, 13356495, 13358552, 13360600, 13362648, 13364696, 13366744, 13368792, 13370840, 13372888, 13374936, 13376984, 13379032, 13381080, 13383128, 13385176, 13387224, 13389272, 13391320, 13393368, 13395416, 13397464, 13399512, 13401560, 13403608, 13405656, 13407704, 13409752, 13411800, 13413848, 13415896, 13417944, 13420001, 13422049, 13424097, 13426145, 13428193, 13430241, 13432289, 13434343, 13436391, 13438448, 13440496, 13442544, 13444592, 13446640, 13448688, 13450745, 13452793, 13454841, 13456889, 13458937, 13460985, 13463033, 13465081, 13467116, 13469164, 13471212, 13473260, 13475308, 13477356, 13479404, 13481461, 13483509, 13485557, 13487605, 13489653, 13491701, 13493749, 13495797, 13497851, 13499899, 13501948, 13503982, 13506030, 13508078, 13510126, 13512183, 13514231, 13516286, 13518334, 13520382, 13522430, 13524485, 13526533, 13528581, 13530629, 13532677, 13534715, 13536763, 13538811, 13540859, 13542916, 13544964, 13547012, 13549060, 13551108, 13553156, 13555204, 13557252, 13559305, 13561353, 13563401, 13565449, 13567497, 13569532, 13571580, 13573637, 13575685, 13577733, 13579781, 13581829, 13583877, 13585925, 13587973, 13590021, 13592069, 13594117, 13596165, 13598213, 13600261, 13602308, 13604365, 13606413, 13608461, 13610509, 13612565, 13614613, 13616661, 13618709, 13620749, 13622797, 13624845, 13626893, 13628941, 13630989, 13633037, 13635094, 13637142, 13639190, 13641238, 13643286, 13645334, 13647382, 13649430, 13651478, 13653535, 13655583, 13657631, 13659679, 13661727, 13663775, 13665832, 13667880, 13669928, 13671976, 13674024, 13676072, 13678120, 13680168, 13682216, 13684264, 13686312, 13688360, 13690417, 13692465, 13694513, 13696570, 13698618, 13700666, 13702714, 13704762, 13706810, 13708858, 13710906, 13712954, 13715002, 13717050, 13719098, 13721146, 13723194, 13725242, 13727290, 13729338, 13731386, 13733434, 13735482, 13737530, 13739578, 13741626, 13743674, 13745722, 13747770, 13749818, 13751866, 13753914, 13755962, 13758019, 13760067, 13762115, 13764163, 13766211, 13768259, 13770307, 13772355, 13774411, 13776459, 13778507, 13780555, 13782603, 13784651, 13786699, 13788756, 13790804, 13792852, 13794900, 13796957, 13799005, 13801053, 13803095, 13805143, 13807191, 13809239, 13811287, 13813344, 13815392, 13817440, 13819497, 13821545, 13823593, 13825641, 13827689, 13829737, 13831785, 13833833, 13835881, 13837929, 13839983, 13842031, 13844079, 13846127, 13848175, 13850232, 13852280, 13854328, 13856376, 13858424, 13860472, 13862520, 13864568, 13866616, 13868664, 13870712, 13872760, 13874810, 13876858, 13878906, 13880963, 13883011, 13885059, 13887107, 13889155, 13891203, 13893251, 13895299, 13897347, 13899395, 13901443, 13903491, 13905539, 13907587, 13909635, 13911692, 13913740, 13915788, 13917836, 13919884, 13921932, 13923980, 13926028, 13928076, 13930124, 13932172, 13934220, 13936268, 13938316, 13940364, 13942411, 13944459, 13946507, 13948555, 13950603, 13952651, 13954699, 13956747, 13958795, 13960843, 13962891, 13964939, 13966995, 13969043, 13971091, 13973148, 13975198, 13977246, 13979294, 13981342, 13983390, 13985438, 13987486, 13989534, 13991582, 13993630, 13995678, 13997726, 13999774, 14001822, 14003879, 14005927, 14007975, 14010023, 14012071, 14014119, 14016176, 14018224, 14020272, 14022320, 14024368, 14026425, 14028473, 14030521, 14032569, 14034626, 14036674, 14038722, 14040770, 14042818, 14044866, 14046914, 14048962, 14051010, 14053058, 14055106, 14057154, 14059202, 14061250, 14063298, 14065355, 14067403, 14069424, 14071472, 14073520, 14075568, 14077598, 14079646, 14081694, 14083742, 14085790, 14087838, 14089886, 14091934, 14093982, 14096039, 14098087, 14100135, 14102183, 14104231, 14106279, 14108327, 14110375, 14112423, 14114471, 14116519, 14118567, 14120615, 14122663, 14124711, 14126768, 14128816, 14130873, 14132921, 14134969, 14137017, 14139065, 14141122, 14143170, 14145218, 14147266, 14149314, 14151362, 14153410, 14155458, 14157515, 14159563, 14161611, 14163659, 14165707, 14167755, 14169811, 14171859, 14173907, 14175949, 14177997, 14180045, 14182093, 14184141, 14186189, 14188246, 14190294, 14192347, 14194404, 14196452, 14198500, 14200548, 14202605, 14204653, 14206701, 14208749, 14210797, 14212854, 14214902, 14216950, 14219007, 14221055, 14223103, 14225151, 14227199, 14229247, 14231295, 14233343, 14235391, 14237439, 14239487, 14241535, 14243583, 14245631, 14247679, 14249736, 14251784, 14253832, 14255880, 14257928, 14259976, 14262024, 14264072, 14266120, 14268168, 14270216, 14272264, 14274312, 14276360, 14278408, 14280456, 14282504, 14284552, 14286600, 14288648, 14290696, 14292744, 14294792, 14296840, 14298888, 14300936, 14302984, 14305041, 14307089, 14309137, 14311194, 14313185, 14315233, 14317288, 14319336, 14321390, 14323439, 14325487, 14327544, 14329592, 14331629, 14333677, 14335725, 14337773, 14339830, 14341887, 14343935, 14345983, 14348035, 14350083, 14352131, 14354179, 14356227, 14358267, 14360315, 14362359, 14364407, 14366436, 14368484, 14370532, 14372589, 14374637, 14376685, 14378727, 14380775, 14382795, 14384851, 14386905, 14388953, 14390999, 14393047, 14395095, 14397143, 14399167, 14401215, 14403259, 14405311, 14407335, 14409383, 14411431, 14413488, 14415540, 14417588, 14419636, 14421684, 14423732, 14425780, 14427828, 14429876, 14431924, 14433959, 14436007, 14438055, 14440103, 14442143, 14444191, 14446239, 14448287, 14450335, 14452383, 14454431, 14456479, 14458505, 14460553, 14462608, 14464665, 14466713, 14468766, 14470814, 14472862, 14474910, 14476958, 14479006, 14481054, 14483095, 14485132, 14487180, 14489228, 14491276, 14493322, 14495370, 14497418, 14499466, 14501500, 14503548, 14505596, 14507644, 14509681, 14511729, 14513777, 14515825, 14517857, 14519913, 14521961, 14524009, 14526066, 14528114, 14530170, 14532218, 14534266, 14536314, 14538370, 14540418, 14542466, 14544514, 14546562, 14548610, 14550658, 14552706, 14554754, 14556811, 14558859, 14560898, 14562946, 14564994, 14567042, 14569090, 14571138, 14573186, 14575234, 14577282, 14579330, 14581380, 14583428, 14585476, 14587533, 14589587, 14591635, 14593683, 14595731, 14597785, 14599833, 14601890, 14603940, 14605988, 14608036, 14610084, 14612131, 14614179, 14616227, 14618284, 14620330, 14622378, 14624426, 14626474, 14628522, 14630570, 14632626, 14634674, 14636706, 14638752, 14640800, 14642848, 14644902, 14646950, 14648992, 14651040, 14653088, 14655136, 14657184, 14659232, 14661280, 14663328, 14665381, 14667429, 14669486, 14671536, 14673590, 14675638, 14677686, 14679743, 14681791, 14683839, 14685887, 14687937, 14689985, 14692033, 14694081, 14696130, 14698178, 14700226, 14702274, 14704322, 14706370, 14708425, 14710482, 14712530, 14714578, 14716626, 14718674, 14720722, 14722770, 14724818, 14726875, 14728932, 14730980, 14733028, 14735076, 14737131, 14739188, 14741231, 14743279, 14745327, 14747375, 14749423, 14751471, 14753523, 14753959, 14754051, 14754142, 14754232, 14754321, 14754426, 14754515, 14754605, 14754694, 14754781, 14755925, 14757973, 14760021, 14762078, 14764134, 14766182, 14768230, 14770278, 14772335, 14774380, 14776437, 14778485, 14780542, 14782590, 14784638, 14786686, 14788743, 14790790, 14792828, 14794884, 14796932, 14798980, 14801028, 14803085, 14805133, 14807181, 14809229, 14811286, 14813334, 14815382, 14817430, 14819483, 14821531, 14823579, 14825635, 14827683, 14829731, 14831779, 14833809, 14835857, 14837901, 14839949, 14842006, 14844054, 14846102, 14848150, 14850207, 14852255, 14854303, 14856351, 14858399, 14860447, 14862495, 14864547, 14866595, 14868647, 14870695, 14872752, 14874809, 14876857, 14878905, 14880953, 14883008, 14885056, 14887112, 14889160, 14891208, 14893256, 14895313, 14897361, 14899409, 14901457, 14903514, 14905539, 14907587, 14909612, 14911669, 14913717, 14915768, 14917824, 14919861, 14921909, 14923941, 14925989, 14928037, 14930085, 14932133, 14934190, 14936232, 14938280, 14940328, 14942373, 14944421, 14946464, 14948520, 14950569, 14952617, 14954643, 14956691, 14958725, 14960773, 14962821, 14964874, 14966922, 14968970, 14971018, 14973057, 14975105, 14977153, 14979201, 14981255, 14983303, 14985351, 14987406, 14989454, 14991501, 14993549, 14995600, 14997648, 14999683, 15001731, 15003782, 15005830, 15007878, 15009934, 15011982, 15014023, 15016071, 15018120, 15020168, 15022214, 15024262, 15026286, 15028334, 15030382, 15032403, 15034460, 15036482, 15038530, 15040583, 15042631, 15044678, 15046726, 15048768, 15050816, 15052864, 15054912, 15056969, 15059015, 15061063, 15063110, 15065167, 15067215, 15069269, 15071325, 15073373, 15075421, 15077469, 15079526, 15081574, 15083622, 15085670, 15087726, 15089774, 15091822, 15093870, 15095927, 15097975, 15100023, 15102079, 15104127, 15106175, 15108223, 15110277, 15112325, 15114373, 15116421, 15118478, 15120526, 15122574, 15124622, 15126679, 15128727, 15130783, 15132839, 15134887, 15136935, 15138983, 15141040, 15143088, 15145136, 15147184, 15149241, 15151289, 15153337, 15155385, 15157442, 15159490, 15161538, 15163594, 15165642, 15167690, 15169738, 15171795, 15173843, 15175891, 15177939, 15179996, 15182048, 15184096, 15186144, 15188201, 15190249, 15192297, 15194353, 15196401, 15198430, 15200479, 15202527, 15204575, 15206623, 15208671, 15210728, 15212776, 15214824, 15216861, 15218909, 15220957, 15223005, 15225061, 15227109, 15229157, 15231205, 15233262, 15235310, 15237358, 15239406, 15241463, 15243518, 15245566, 15247614, 15249671, 15251710, 15253767, 15255811, 15257859, 15259907, 15261955, 15264012, 15266060, 15268108, 15270156, 15272213, 15274248, 15276296, 15278344, 15280392, 15282440, 15284488, 15286544, 15288592, 15290640, 15292688, 15294745, 15296793, 15298841, 15300889, 15302946, 15304994, 15307042, 15309090, 15311138, 15313186, 15315222, 15317278, 15319326, 15321374, 15323422, 15325479, 15327527, 15329575, 15331623, 15333671, 15335719, 15337742, 15339790, 15341820, 15343868, 15345916, 15347972, 15350020, 15352068, 15354116, 15356173, 15358221, 15360269, 15362317, 15364374, 15366422, 15368470, 15370518, 15372575, 15374623, 15376671, 15378727, 15380775, 15382823, 15384871, 15386928, 15388976, 15391024, 15393072, 15395129, 15397177, 15399225, 15401273, 15403330, 15405378, 15407426, 15409482, 15411530, 15413578, 15415626, 15417683, 15419731, 15421779, 15423802, 15425859, 15427907, 15429955, 15432003, 15434060, 15436108, 15438156, 15440191, 15442239, 15444287, 15446335, 15448392, 15450440, 15452488, 15454536, 15456593, 15458641, 15460689, 15462737, 15464794, 15466842, 15468879, 15470934, 15472982, 15475039, 15477087, 15479144, 15481192, 15483240, 15485297, 15487354, 15489402, 15491434, 15493482, 15495539, 15497587, 15499635, 15501691, 15503739, 15505787, 15507843, 15509900, 15511948, 15513996, 15516044, 15518101, 15520149, 15522202, 15524250, 15526298, 15528346, 15530394, 15532442, 15534490, 15536538, 15538586, 15540617, 15542672, 15544720, 15546768, 15548816, 15550864, 15552912, 15554960, 15557016, 15559064, 15561112, 15563161, 15565209, 15567257, 15569305, 15571362, 15573410, 15575458, 15577506, 15579563, 15581611, 15583668, 15585716, 15587773, 15589821, 15591869, 15593912, 15595960, 15598008, 15600056, 15602113, 15604161, 15606209, 15608257, 15610314, 15612366, 15614414, 15616462, 15618518, 15620566, 15622614, 15624670, 15626716, 15628764, 15630812, 15632869, 15634917, 15636965, 15639013, 15641070, 15643118, 15645166, 15647214, 15649271, 15651319, 15653367, 15655423, 15657471, 15659519, 15661567, 15663624, 15665672, 15667720, 15669768, 15671825, 15673873, 15675921, 15677969, 15680026, 15682074, 15684122, 15686179, 15688227, 15690275, 15692323, 15694379, 15696427, 15698475, 15700523, 15702569, 15704617, 15706665, 15708713, 15710770, 15712818, 15714866, 15716922, 15718970, 15721018, 15723066, 15725123, 15727171, 15729219, 15731267, 15733321, 15735369, 15737417, 15739465, 15741522, 15743570, 15745618, 15747674, 15749722, 15751770, 15753818, 15755871, 15757919, 15759961, 15762009, 15764066, 15766114, 15768162, 15770210, 15772267, 15774315, 15776363, 15778402, 15780450, 15782498, 15784546, 15786603, 15788651, 15790699, 15792747, 15794804, 15796852, 15798900, 15800948, 15803005, 15805053, 15807101, 15809157, 15811205, 15813253, 15815301, 15817349, 15819397, 15821445, 15823493, 15825550, 15827598, 15829646, 15831690, 15833738, 15835786, 15837834, 15839890, 15841938, 15843986, 15846034, 15848091, 15850139, 15852187, 15854235, 15856292, 15858349, 15860397, 15862445, 15864502, 15866550, 15868598, 15870654, 15872702, 15874750, 15876798, 15878855, 15880903, 15882946, 15884994, 15887042, 15889090, 15891138, 15893186, 15895243, 15897291, 15899339, 15901389, 15903437, 15905485, 15907533, 15909590, 15911638, 15913695, 15915743, 15917791, 15919839, 15921887, 15923906, 15925963, 15928011, 15930059, 15932107, 15934155, 15936203, 15938251, 15940308, 15942356, 15944404, 15946452, 15948509, 15950557, 15952605, 15954653, 15956710, 15958758, 15960806, 15962854, 15964902, 15966950, 15968998, 15971055, 15973079, 15975129, 15977177, 15979234, 15981282, 15983330, 15985378, 15987435, 15989483, 15991531, 15993587, 15995623, 15997671, 15999719, 16001776, 16003824, 16005872, 16007920, 16009977, 16012025, 16014073, 16016121, 16018169, 16020226, 16022274, 16024322, 16026370, 16028418, 16030466, 16032523, 16034571, 16036619, 16038667, 16040724, 16042772, 16044824, 16046872, 16048929, 16050977, 16053025, 16055081, 16057129, 16059167, 16061215, 16063258, 16065306, 16067354, 16069402, 16071450, 16073507, 16075559, 16077607, 16079664, 16081712, 16083760, 16085808, 16087856, 16089904, 16091952, 16094009, 16096057, 16098105, 16100153, 16102210, 16104258, 16106306, 16108329, 16110386, 16112428, 16114476, 16116533, 16118581, 16120632, 16122680, 16124737, 16126785, 16128833, 16130881, 16132938, 16134985, 16137033, 16139081, 16141138, 16143186, 16145234, 16147291, 16149339, 16151387, 16153435, 16155492, 16157546, 16159594, 16161642, 16163698, 16165746, 16167794, 16169842, 16171899, 16173947, 16175995, 16178051, 16180099, 16182147, 16184195, 16186252, 16188300, 16190348, 16192403, 16194460, 16196508, 16198556, 16200604, 16202652, 16204700, 16206748, 16208804, 16210852, 16212900, 16214948, 16217005, 16219053, 16221098, 16223146, 16225190, 16227238, 16229280, 16231328, 16233376, 16235424, 16237472, 16239528, 16241576, 16243624, 16245672, 16247729, 16249777, 16251825, 16253873, 16255921, 16257969, 16260011, 16262048, 16264100, 16266148, 16268196, 16270252, 16272300, 16274342, 16276390, 16278438, 16280486, 16282534, 16284582, 16286639, 16288687, 16290735, 16292783, 16294840, 16296888, 16298936, 16300992, 16303040, 16305088, 16307136, 16309193, 16311241, 16313289, 16315337, 16317394, 16319442, 16321490, 16323538, 16325595, 16327643, 16329691, 16331747, 16333795, 16335844, 16337892, 16339949, 16341997, 16344045, 16346093, 16348150, 16350181, 16352235, 16354279, 16356327, 16358375, 16360423, 16362477, 16364525, 16366573, 16368621, 16370677, 16372725, 16374773, 16376821, 16378878, 16380926, 16382974, 16385022, 16387070, 16389118, 16391166, 16393222, 16395270, 16397318, 16399366, 16401423, 16403471, 16405511, 16407566, 16409616, 16411664, 16413712, 16415760, 16417817, 16419872, 16421920, 16423956, 16426004, 16428052, 16430100, 16432148, 16434196, 16436244, 16438292, 16440321, 16442369, 16444417, 16446465, 16448522, 16450570, 16452618, 16454674, 16456722, 16458770, 16460818, 16462857, 16464905, 16466948, 16468996, 16471051, 16473101, 16475149, 16477183, 16479240, 16481288, 16483336, 16485384, 16487432, 16489480, 16491528, 16493585, 16495633, 16497681, 16499729, 16501786, 16503834, 16505882, 16507930, 16509978, 16512026, 16514074, 16516130, 16518178, 16520226, 16522274, 16524331, 16526379, 16528427, 16530475, 16532532, 16534580, 16536628, 16538676, 16540724, 16542772, 16544820, 16546876, 16548924, 16550979, 16553027, 16555084, 16557132, 16559180, 16561228, 16563271, 16565319, 16567343, 16569391, 16571448, 16573496, 16575544, 16577600, 16579648, 16581696, 16583744, 16585801, 16587849, 16589897, 16591945, 16594002, 16596050, 16598098, 16600146, 16602203, 16604251, 16606299, 16608355, 16610403, 16612451, 16614499, 16616556, 16618604, 16620652, 16622700, 16624757, 16626805, 16628853, 16630901, 16632958, 16635006, 16637054, 16639110, 16641166, 16643214, 16645262, 16647319, 16649367, 16651415, 16653463, 16655520, 16657568, 16659616, 16661664, 16663721, 16665769, 16667817, 16669873, 16671921, 16673977, 16676025, 16678082, 16680130, 16682178, 16684226, 16686283, 16688331, 16690379, 16692427, 16694475, 16696530, 16698578, 16700634, 16702682, 16704730, 16706778, 16708835, 16710888, 16712936, 16714972, 16717029, 16719077, 16721125, 16723173, 16725230, 16727278, 16729326, 16731374, 16733429, 16735477, 16737525, 16739582, 16741630, 16743678, 16745726, 16747753, 16749801, 16751849, 16753897, 16755945, 16757993, 16760041, 16762097, 16764145, 16766193, 16768248, 16770296, 16772344, 16774392, 16776440, 16778488, 16780536, 16782584, 16784632, 16786689, 16788737, 16790785, 16792841, 16794889, 16796937, 16798985, 16801040, 16803088, 16805136, 16807184, 16809239, 16811287, 16813335, 16815383, 16817440, 16819484, 16821532, 16823587, 16825635, 16827683, 16829731, 16831774, 16833814, 16835862, 16837910, 16839958, 16842006, 16844054, 16846102, 16848159, 16850207, 16852255, 16854303, 16856351, 16858399, 16860447, 16862504, 16864554, 16866602, 16868650, 16870707, 16872755, 16874803, 16876851, 16878906, 16880954, 16883002, 16885058, 16887106, 16889154, 16891202, 16893257, 16895305, 16897353, 16899401, 16901449, 16903497, 16905545, 16907593, 16909648, 16911705, 16913753, 16915809, 16917857, 16919905, 16921953, 16924010, 16926058, 16928109, 16930157, 16932214, 16934262, 16936310, 16938358, 16940415, 16942463, 16944511, 16946567, 16948615, 16950663, 16952711, 16954759, 16956807, 16958855, 16960903, 16962951, 16964999, 16967047, 16969095, 16971143, 16973191, 16975239, 16977287, 16979335, 16981383, 16983437, 16985494, 16987542, 16989590, 16991638, 16993695, 16995743, 16997791, 16999848, 17001905, 17003953, 17006001, 17008057, 17010105, 17012153, 17014201, 17016258, 17018306, 17020354, 17022402, 17024459, 17026507, 17028555, 17030603, 17032660, 17034680, 17036728, 17038784, 17040832, 17042880, 17044928, 17046985, 17049033, 17051081, 17053137, 17055189, 17057245, 17059293, 17061341, 17063398, 17065454, 17067502, 17069557, 17071605, 17073653, 17075701, 17077758, 17079813, 17081861, 17083909, 17085966, 17088014, 17090062, 17092110, 17094158, 17096206, 17098263, 17100319, 17102367, 17104415, 17106463, 17108494, 17110542, 17112590, 17114638, 17116695, 17118743, 17120791, 17122839, 17124896, 17126944, 17129001, 17131057, 17133105, 17135153, 17137201, 17139240, 17141288, 17143336, 17145384, 17147432, 17149480, 17151528, 17153576, 17155633, 17157681, 17159729, 17161785, 17163833, 17165881, 17167929, 17169986, 17172034, 17174082, 17176130, 17178187, 17180235, 17182283, 17184331, 17186388, 17188436, 17190484, 17192540, 17194588, 17196636, 17198690, 17200734, 17202782, 17204830, 17206878, 17208935, 17210983, 17213031, 17215063, 17217120, 17219171, 17221228, 17223284, 17225332, 17227380, 17229428, 17231485, 17233533, 17235581, 17237629, 17239686, 17241734, 17243782, 17245830, 17247887, 17249935, 17251983, 17254039, 17256087, 17258135, 17260183, 17262240, 17264288, 17266336, 17268384, 17270441, 17272490, 17274538, 17276586, 17278643, 17280691, 17282739, 17284795, 17286840, 17288887, 17290935, 17292975, 17295023, 17297071, 17299119, 17301176, 17303224, 17305272, 17307320, 17309377, 17311425, 17313473, 17315529, 17317577, 17319625, 17321673, 17323721, 17325778, 17327826, 17329874, 17331922, 17333970, 17336018, 17338066, 17340123, 17342158, 17344206, 17346262, 17348310, 17350358, 17352406, 17354463, 17356511, 17358559, 17360610, 17362667, 17364715, 17366763, 17368811, 17370868, 17372916, 17374964, 17377010, 17379058, 17381106, 17383154, 17385211, 17387259, 17389307, 17391355, 17393410, 17395458, 17397506, 17399554, 17401611, 17403660, 17405698, 17407754, 17409802, 17411850, 17413883, 17415939, 17417987, 17420035, 17422083, 17424140, 17426190, 17428235, 17430283, 17432320, 17434368, 17436404, 17438460, 17440508, 17442556, 17444612, 17446668, 17448716, 17450764, 17452812, 17454869, 17456917, 17458965, 17461013, 17463070, 17464445, 17464821, 17464915, 17465004, 17465094, 17465183, 17466577, 17468525, 17470573, 17472610, 17474402, 17476203, 17478144, 17480192, 17482240, 17484297, 17486345, 17488396, 17490444, 17492498, 17494478, 17496460, 17498508, 17500410, 17502448, 17504496, 17506544, 17508592, 17510640, 17512679, 17514728, 17516782, 17518824, 17520879, 17522936, 17524899, 17526938, 17528986, 17531034, 17533082, 17535130, 17537178, 17539234, 17541180, 17542931, 17544977, 17547025, 17549039, 17551077, 17553134, 17555182, 17557230, 17559278, 17561326, 17563379, 17565420, 17567476, 17569524, 17571572, 17573545, 17575602, 17577650, 17579698, 17581746, 17583803, 17585852, 17587900, 17589778, 17591817, 17593860, 17595822, 17597845, 17599893, 17601941, 17603989, 17606035, 17608083, 17610131, 17612170, 17614227, 17616284, 17618322, 17620344, 17622370, 17624418, 17626466, 17628514, 17630558, 17632606, 17634654, 17636519, 17638350, 17640380, 17642428, 17644385, 17646433, 17648481, 17650529, 17652577, 17654629, 17656677, 17658676, 17660562, 17662387, 17664435, 17666479, 17668520, 17670568, 17672616, 17674670, 17676718, 17678766, 17680820, 17682868, 17684916, 17686956, 17688739, 17690485, 17692532, 17694580, 17696637, 17698685, 17700733, 17702781, 17704821, 17706869, 17708885, 17710933, 17712805, 17714752, 17716800, 17718848, 17720896, 17722944, 17724992, 17727049, 17729097, 17731145, 17733193, 17735250, 17737298, 17739346, 17741394, 17743442, 17745490, 17747538, 17749586, 17751634, 17753655, 17755532, 17757515, 17759570, 17761614, 17763662, 17765719, 17767767, 17769815, 17771872, 17773920, 17775974, 17778022, 17780078, 17782132, 17784184, 17786232, 17788283, 17790331, 17792379, 17794427, 17796468, 17798516, 17800572, 17802399, 17804303, 17806336, 17808384, 17810439, 17812487, 17814535, 17816583, 17818640, 17820688, 17822728, 17824776, 17826734, 17828542, 17830475, 17832531, 17834586, 17836638, 17838651, 17840580, 17842322, 17844171, 17846205, 17848261, 17850309, 17852356, 17854404, 17856461, 17858495, 17860543, 17862591, 17864639, 17866687, 17868735, 17870783, 17872831, 17874879, 17876909, 17878966, 17881023, 17883064, 17885112, 17887135, 17889186, 17891234, 17893278, 17895326, 17897374, 17899428, 17901484, 17903538, 17905579, 17907627, 17909682, 17911737, 17913785, 17915833, 17917872, 17919920, 17921968, 17924016, 17926064, 17928112, 17930163, 17932211, 17934259, 17936308, 17938358, 17940415, 17942461, 17944509, 17946557, 17948599, 17950655, 17952703, 17954751, 17956799, 17958847, 17960896, 17962939, 17964987, 17967035, 17969092, 17971133, 17973157, 17975205, 17977251, 17979308, 17981356, 17983404, 17985452, 17987484, 17989532, 17991580, 17993628, 17995676, 17997733, 17999779, 18001836, 18003884, 18005932, 18007980, 18010037, 18012083, 18014131, 18016179, 18018227, 18020275, 18022323, 18024371, 18026419, 18028467, 18030515, 18032572, 18034620, 18036668, 18038715, 18040772, 18042820, 18044862, 18046910, 18048958, 18051004, 18053052, 18055100, 18057148, 18059192, 18061240, 18063296, 18065344, 18067392, 18069440, 18071497, 18073553, 18075601, 18077649, 18079697, 18081745, 18083771, 18085819, 18087867, 18089915, 18091954, 18094e3, 18096056, 18098110, 18100158, 18102215, 18104263, 18106311, 18108368, 18110415, 18112463, 18114511, 18116559, 18118607, 18120655, 18122703, 18124760, 18126808, 18128856, 18130904, 18132961, 18135016, 18137064, 18139112, 18141160, 18143208, 18145256, 18147298, 18149346, 18151398, 18153446, 18155491, 18157539, 18159587, 18161635, 18163672, 18165720, 18167768, 18169816, 18171864, 18173912, 18175960, 18178008, 18180052, 18182100, 18184148, 18186205, 18188260, 18190314, 18192370, 18194426, 18196474, 18198522, 18200578, 18202623, 18204671, 18206719, 18208767, 18210815, 18212863, 18214911, 18216959, 18218989, 18221037, 18223085, 18225142, 18227190, 18229238, 18231286, 18233334, 18235383, 18237439, 18239487, 18241539, 18243587, 18245635, 18247680, 18249723, 18251779, 18253827, 18255875, 18257923, 18259971, 18262019, 18264067, 18266094, 18268142, 18270190, 18272238, 18274286, 18276334, 18278386, 18280434, 18282482, 18284508, 18286565, 18288620, 18290654, 18292702, 18294758, 18296806, 18298854, 18300902, 18302957, 18305005, 18307059, 18309112, 18311160, 18313208, 18315256, 18317313, 18319361, 18321411, 18323459, 18325514, 18327547, 18329595, 18331651, 18333691, 18335739, 18337787, 18339844, 18341892, 18343940, 18345988, 18348042, 18350090, 18352142, 18354190, 18356238, 18358286, 18360342, 18362389, 18364437, 18366485, 18368533, 18370582, 18372630, 18374678, 18376726, 18378782, 18380824, 18382872, 18384928, 18386983, 18389031, 18391079, 18393127, 18395175, 18397223, 18399279, 18401336, 18403384, 18405432, 18407487, 18409544, 18411592, 18413640, 18415688, 18417736, 18419784, 18421832, 18423887, 18425935, 18427983, 18430036, 18432090, 18434144, 18436201, 18438249, 18440306, 18442354, 18444405, 18446460, 18448507, 18450555, 18452608, 18454656, 18456704, 18458738, 18460786, 18462843, 18464891, 18466948, 18469003, 18471060, 18473108, 18475164, 18477209, 18479258, 18481306, 18483354, 18485396, 18487443, 18489491, 18491539, 18493594, 18495646, 18497694, 18499742, 18501799, 18503847, 18505895, 18507943, 18509991, 18512042, 18514097, 18516145, 18518202, 18520250, 18522298, 18524332, 18526380, 18528436, 18530484, 18532540, 18534588, 18536636, 18538684, 18540739, 18542796, 18544844, 18546892, 18548940, 18550979, 18553027, 18555084, 18557127, 18559175, 18561223, 18563280, 18565328, 18567376, 18569433, 18571476, 18573522, 18575570, 18577615, 18579663, 18581711, 18583759, 18585816, 18587864, 18589920, 18591968, 18594025, 18596073, 18598121, 18600169, 18602217, 18604265, 18606313, 18608361, 18610409, 18612457, 18614505, 18616552, 18618577, 18620625, 18622679, 18624734, 18626764, 18628812, 18630860, 18632908, 18634956, 18637004, 18639044, 18641100, 18643148, 18645197, 18647247, 18649295, 18651343, 18653391, 18655448, 18657494, 18659542, 18661594, 18663642, 18665690, 18667745, 18669793, 18671845, 18673893, 18675941, 18677994, 18680047, 18682095, 18684143, 18686195, 18688243, 18690291, 18692339, 18694393, 18696441, 18698489, 18700537, 18702585, 18704633, 18706681, 18708738, 18710791, 18712846, 18714894, 18716935, 18718983, 18721035, 18723083, 18725131, 18727186, 18729234, 18731284, 18733341, 18735395, 18737443, 18739500, 18741548, 18743603, 18745651, 18747708, 18749756, 18751804, 18753853, 18755904, 18757952, 18759989, 18762037, 18764085, 18766133, 18768181, 18770223, 18772271, 18774319, 18776369, 18778426, 18780483, 18782538, 18784586, 18786634, 18788687, 18790735, 18792783, 18794831, 18796884, 18798938, 18800995, 18803048, 18805096, 18807152, 18809206, 18811255, 18813312, 18815361, 18817417, 18819437, 18821485, 18823541, 18825595, 18827652, 18829709, 18831766, 18833814, 18835862, 18837910, 18839958, 18842006, 18844054, 18846102, 18848150, 18850206, 18852254, 18854302, 18856356, 18858404, 18860452, 18862498, 18864550, 18866590, 18868638, 18870687, 18872735, 18874783, 18876831, 18878879, 18880927, 18882975, 18885021, 18887069, 18889117, 18891159, 18893216, 18895264, 18897312, 18899360, 18901417, 18903465, 18905513, 18907561, 18909617, 18911665, 18913713, 18915761, 18917809, 18919857, 18921914, 18923971, 18926019, 18928067, 18930115, 18932172, 18934220, 18936276, 18938324, 18940372, 18942420, 18944468, 18946516, 18948564, 18950612, 18952669, 18954726, 18956777, 18958834, 18960890, 18962944, 18964992, 18967040, 18969096, 18971144, 18973201, 18975257, 18977312, 18979360, 18981408, 18983456, 18985513, 18987556, 18989604, 18991652, 18993706, 18995754, 18997802, 18999850, 19001898, 19003946, 19005994, 19008042, 19010095, 19012143, 19014191, 19016248, 19018296, 19020344, 19022401, 19024455, 19026503, 19028551, 19030599, 19032647, 19034697, 19036745, 19038793, 19040841, 19042890, 19044938, 19046995, 19049052, 19051108, 19053156, 19055213, 19057261, 19059301, 19061349, 19063397, 19065448, 19067496, 19069544, 19071601, 19073649, 19075702, 19077757, 19079805, 19081853, 19083901, 19085958, 19088006, 19090054, 19092102, 19094150, 19096198, 19098246, 19100301, 19102325, 19104379, 19106427, 19108466, 19110514, 19112560, 19114617, 19116674, 19118722, 19120770, 19122818, 19124866, 19126914, 19128971, 19131019, 19133067, 19135115, 19137163, 19139220, 19141268, 19143325, 19145373, 19147412, 19149460, 19151508, 19153560, 19155615, 19157663, 19159711, 19161768, 19163824, 19165872, 19167929, 19169986, 19172034, 19174082, 19176130, 19178187, 19180235, 19182283, 19184331, 19186379, 19188427, 19190475, 19192532, 19194580, 19196634, 19198688, 19200740, 19202796, 19204844, 19206892, 19208945, 19210993, 19213039, 19215095, 19217152, 19219209, 19221229, 19223277, 19225325, 19227365, 19229413, 19231470, 19233518, 19235566, 19237614, 19239671, 19241719, 19243773, 19245821, 19247865, 19249921, 19251977, 19254025, 19256073, 19258121, 19260169, 19262226, 19264281, 19266338, 19268386, 19270428, 19272476, 19274524, 19276572, 19278620, 19280668, 19282716, 19284764, 19286817, 19288862, 19290919, 19292966, 19295018, 19297066, 19299116, 19301172, 19303220, 19305274, 19307322, 19309356, 19311404, 19313452, 19315508, 19317563, 19319611, 19321659, 19323707, 19325762, 19327810, 19329867, 19331916, 19333964, 19336020, 19338076, 19340122, 19342170, 19344224, 19346281, 19348330, 19350378, 19352426, 19354483, 19356540, 19358588, 19360636, 19362693, 19364741, 19366789, 19368837, 19370885, 19372933, 19374984, 19377025, 19379073, 19381121, 19383170, 19385223, 19387270, 19389318, 19391374, 19393429, 19395472, 19397520, 19399568, 19401622, 19403670, 19405710, 19407760, 19409808, 19411856, 19413884, 19415941, 19417989, 19420027, 19422075, 19424132, 19426180, 19428228, 19430276, 19432333, 19434389, 19436445, 19438493, 19440546, 19442594, 19444631, 19446688, 19448729, 19450772, 19452820, 19454877, 19456925, 19458973, 19461014, 19463062, 19465110, 19467149, 19469197, 19471245, 19473293, 19475341, 19477398, 19479448, 19481502, 19483554, 19485576, 19487617, 19489665, 19491711, 19493759, 19495807, 19497855, 19499903, 19501949, 19503990, 19506042, 19508099, 19510144, 19512200, 19514248, 19516293, 19518341, 19520389, 19522437, 19524480, 19526528, 19528576, 19530625, 19532679, 19534727, 19536784, 19538825, 19540880, 19542928, 19544976, 19547033, 19549075, 19551131, 19553188, 19555236, 19557284, 19559332, 19561389, 19563438, 19565486, 19567534, 19569591, 19571647, 19573695, 19575743, 19577800, 19579848, 19581898, 19583946, 19585994, 19588042, 19590087, 19592137, 19594194, 19596243, 19598300, 19600357, 19602405, 19604453, 19606469, 19608526, 19610580, 19612624, 19614672, 19616720, 19618770, 19620819, 19622863, 19624911, 19626959, 19629007, 19631053, 19633101, 19635158, 19637206, 19639262, 19641310, 19643358, 19645406, 19647451, 19649499, 19651547, 19653595, 19655643, 19657691, 19659720, 19661777, 19663825, 19665873, 19667921, 19669968, 19672023, 19674071, 19676119, 19678156, 19680204, 19682252, 19684298, 19686346, 19688394, 19690408, 19692465, 19694513, 19696561, 19698609, 19700656, 19702705, 19704753, 19706801, 19708857, 19710905, 19712953, 19715001, 19717042, 19719090, 19721138, 19723195, 19725243, 19727291, 19729329, 19731375, 19733423, 19735471, 19737519, 19739564, 19741606, 19743654, 19745702, 19747750, 19749798, 19751854, 19753911, 19755957, 19758014, 19760070, 19762127, 19764175, 19766232, 19768280, 19770328, 19772376, 19774433, 19776481, 19778529, 19780577, 19782625, 19784682, 19786730, 19788778, 19790826, 19792883, 19794931, 19796979, 19799027, 19801075, 19803132, 19805180, 19807228, 19809276, 19811331, 19813382, 19815439, 19817487, 19819535, 19821582, 19823639, 19825693, 19827741, 19829789, 19831843, 19833895, 19835943, 19837991, 19840042, 19842090, 19844138, 19846195, 19848243, 19850291, 19852339, 19854396, 19856444, 19858492, 19860540, 19862595, 19864640, 19866688, 19868736, 19870779, 19872835, 19874883, 19876940, 19878988, 19881036, 19883084, 19885132, 19887180, 19889228, 19891276, 19893326, 19895377, 19897425, 19899471, 19901513, 19903561, 19905609, 19907666, 19909703, 19911751, 19913799, 19915856, 19917906, 19919960, 19922016, 19924063, 19926111, 19928159, 19930215, 19932268, 19934316, 19936364, 19938421, 19940469, 19942517, 19944565, 19946613, 19948662, 19950710, 19952767, 19954821, 19956869, 19958917, 19960963, 19963011, 19965068, 19967116, 19969173, 19971223, 19973271, 19975328, 19977380, 19979428, 19981479, 19983518, 19985567, 19987615, 19989663, 19991711, 19993759, 19995806, 19997854, 19999911, 20001959, 20004009, 20006046, 20008103, 20010151, 20012199, 20014241, 20016289, 20018337, 20020385, 20022433, 20024488, 20026526, 20028574, 20030631, 20032679, 20034727, 20036784, 20038841, 20040889, 20042937, 20044985, 20047033, 20049081, 20051138, 20053186, 20055234, 20057280, 20059328, 20061381, 20063414, 20065468, 20067516, 20069572, 20071620, 20073673, 20075721, 20077769, 20079817, 20081874, 20083922, 20085970, 20088024, 20090072, 20092114, 20094162, 20096210, 20098237, 20100293, 20102350, 20104399, 20106452, 20108500, 20110555, 20112610, 20114666, 20116714, 20118762, 20120810, 20122860, 20124912, 20126964, 20129012, 20131068, 20133116, 20135172, 20137227, 20139275, 20141323, 20143371, 20145419, 20147470, 20149518, 20151574, 20153631, 20155679, 20157727, 20159783, 20161839, 20163892, 20165949, 20167997, 20170045, 20172093, 20174150, 20176207, 20178255, 20180303, 20182360, 20184408, 20186456, 20188487, 20190535, 20192592, 20194640, 20196688, 20198741, 20200797, 20202845, 20204893, 20206926, 20208974, 20211022, 20213042, 20215099, 20217147, 20219195, 20221243, 20223300, 20225354, 20227411, 20229468, 20231525, 20233573, 20235621, 20237669, 20239717, 20241770, 20243818, 20245875, 20247918, 20249964, 20252021, 20254056, 20256082, 20258135, 20260179, 20262227, 20264275, 20266323, 20268371, 20270419, 20272472, 20274520, 20276577, 20278632, 20280680, 20282728, 20284767, 20286815, 20288863, 20290911, 20292959, 20295007, 20297055, 20299103, 20301151, 20303193, 20305250, 20307303, 20309359, 20311416, 20313464, 20315521, 20317540, 20319588, 20321636, 20323684, 20325732, 20327780, 20329834, 20331882, 20333930, 20335978, 20338035, 20340083, 20342131, 20344179, 20346235, 20348283, 20350330, 20352378, 20354433, 20356481, 20358529, 20360577, 20362625, 20364673, 20366730, 20368787, 20370835, 20372883, 20374939, 20376996, 20379044, 20381092, 20383140, 20385188, 20387237, 20389294, 20391342, 20393382, 20395430, 20397486, 20399537, 20401585, 20403633, 20405681, 20407738, 20409773, 20411830, 20413878, 20415926, 20417972, 20420020, 20422068, 20424116, 20426164, 20428212, 20430269, 20432317, 20434365, 20436413, 20438470, 20440521, 20442569, 20444617, 20446673, 20448728, 20450773, 20452820, 20454868, 20456916, 20458972, 20461029, 20463077, 20465133, 20467181, 20469238, 20471286, 20473334, 20475382, 20477427, 20479475, 20481523, 20483571, 20485623, 20487671, 20489719, 20491775, 20493823, 20495864, 20497912, 20499963, 20502011, 20504059, 20506107, 20508164, 20510212, 20512260, 20514316, 20516360, 20518408, 20520456, 20522513, 20524561, 20526609, 20528658, 20530715, 20532763, 20534811, 20536859, 20538912, 20540969, 20543013, 20545061, 20547109, 20549157, 20551205, 20553262, 20555310, 20557358, 20559412, 20561469, 20563525, 20565573, 20567629, 20569677, 20571725, 20573773, 20575821, 20577869, 20579919, 20581961, 20584015, 20586072, 20588120, 20590172, 20592218, 20594265, 20596313, 20598361, 20600409, 20602462, 20604510, 20606558, 20608606, 20610654, 20612709, 20614766, 20616814, 20618862, 20620910, 20622967, 20625015, 20627063, 20629115, 20631163, 20633210, 20635258, 20637306, 20639350, 20641398, 20643447, 20645504, 20647552, 20649600, 20651648, 20653701, 20655756, 20657804, 20659852, 20661900, 20663948, 20665996, 20668044, 20670092, 20672147, 20674195, 20676252, 20678297, 20680345, 20682401, 20684453, 20686506, 20688554, 20690597, 20692644, 20694692, 20696740, 20698788, 20700836, 20702887, 20704942, 20706999, 20709047, 20711095, 20713143, 20715200, 20717248, 20719296, 20721344, 20723400, 20725448, 20727496, 20729548, 20731603, 20733651, 20735702, 20737758, 20739806, 20741854, 20743902, 20745959, 20748015, 20750066, 20752114, 20754162, 20756210, 20758258, 20760306, 20762354, 20764402, 20766450, 20768507, 20770555, 20772603, 20774651, 20776708, 20778756, 20780813, 20782861, 20784884, 20786932, 20788982, 20791030, 20793078, 20795126, 20797174, 20799231, 20801279, 20803327, 20805380, 20807435, 20809483, 20811531, 20813585, 20815633, 20817681, 20819729, 20821777, 20823834, 20825882, 20827930, 20829985, 20832033, 20834063, 20836102, 20838159, 20840207, 20842258, 20844306, 20846354, 20848402, 20850450, 20852498, 20854546, 20856599, 20858653, 20860710, 20862758, 20864806, 20866854, 20868911, 20870959, 20873007, 20875055, 20877104, 20879147, 20881195, 20883251, 20885299, 20887347, 20889395, 20891452, 20893500, 20895555, 20897602, 20899659, 20901707, 20903764, 20905812, 20907869, 20909917, 20911965, 20914013, 20916061, 20918109, 20920157, 20922214, 20924262, 20926310, 20928365, 20930421, 20932454, 20934498, 20936546, 20938598, 20940653, 20942709, 20944757, 20946805, 20948853, 20950901, 20952957, 20955005, 20957054, 20959107, 20961164, 20963218, 20965262, 20967310, 20969358, 20971406, 20973454, 20975503, 20977551, 20979599, 20981656, 20983711, 20985767, 20987818, 20989866, 20991923, 20993971, 20996019, 20998067, 21000115, 21002163, 21004211, 21006268, 21008316, 21010364, 21012412, 21014469, 21016517, 21018573, 21020629, 21022684, 21024724, 21026780, 21028828, 21030876, 21032924, 21034976, 21037024, 21039072, 21041120, 21043174, 21045231, 21047267, 21049315, 21051363, 21053420, 21055468, 21057516, 21059569, 21061617, 21063665, 21065721, 21067769, 21069826, 21071876, 21073924, 21075981, 21078030, 21080086, 21082134, 21084189, 21086233, 21088282, 21090330, 21092378, 21094426, 21096474, 21098522, 21100570, 21102618, 21104666, 21106723, 21108771, 21110819, 21112867, 21114919, 21116975, 21119028, 21121085, 21123138, 21125163, 21127218, 21129269, 21131322, 21133370, 21135392, 21137447, 21139499, 21141547, 21143585, 21145636, 21147684, 21149729, 21151777, 21153825, 21155873, 21157921, 21159969, 21162026, 21164080, 21166128, 21168184, 21170235, 21172283, 21174331, 21176388, 21178436, 21180484, 21182532, 21184580, 21186628, 21188681, 21190724, 21192779, 21194827, 21196884, 21198941, 21200989, 21203037, 21205085, 21207134, 21209182, 21211232, 21213286, 21215341, 21217379, 21219434, 21221482, 21223534, 21225582, 21227630, 21229687, 21231735, 21233791, 21235844, 21237901, 21239949, 21241997, 21244045, 21246101, 21248149, 21250197, 21252252, 21254300, 21256348, 21258396, 21260453, 21262501, 21264542, 21266590, 21268639, 21270687, 21272735, 21274783, 21276837, 21278880, 21280920, 21282977, 21285032, 21287080, 21289137, 21291178, 21293227, 21295275, 21297329, 21299385, 21301433, 21303481, 21305529, 21307580, 21309632, 21311686, 21313734, 21315791, 21317826, 21319874, 21321929, 21323982, 21326034, 21328054, 21330110, 21332158, 21334206, 21336249, 21338297, 21340345, 21342393, 21344441, 21346489, 21348543, 21350591, 21352648, 21354696, 21356744, 21358792, 21360841, 21362897, 21364945, 21366991, 21369039, 21371091, 21373139, 21375187, 21377235, 21379287, 21381335, 21383392, 21385440, 21387488, 21389539, 21391596, 21393644, 21395692, 21397740, 21399797, 21401854, 21403907, 21405943, 21407995, 21410048, 21412096, 21414153, 21416201, 21418249, 21420300, 21422352, 21424395, 21426446, 21428494, 21430542, 21432590, 21434638, 21436686, 21438731, 21440779, 21442827, 21444884, 21446906, 21448954, 21451002, 21453045, 21455098, 21457149, 21459204, 21461255, 21463303, 21465351, 21467399, 21469455, 21471495, 21473548, 21475605, 21477653, 21479701, 21481753, 21483805, 21485859, 21487907, 21489955, 21492003, 21494051, 21496099, 21498147, 21500195, 21502243, 21504285, 21506342, 21508390, 21510438, 21512486, 21514534, 21516582, 21518635, 21520683, 21522731, 21524779, 21526827, 21528879, 21530935, 21532983, 21535034, 21537091, 21539139, 21541186, 21543234, 21545291, 21547339, 21549387, 21551436, 21553484, 21555532, 21557580, 21559628, 21561685, 21563716, 21565761, 21567818, 21569870, 21571918, 21573966, 21576023, 21578071, 21580119, 21582167, 21584215, 21586263, 21588319, 21590367, 21592415, 21594466, 21596514, 21598571, 21600590, 21602638, 21604686, 21606726, 21608774, 21610822, 21612870, 21614917, 21616974, 21619022, 21621070, 21623127, 21625175, 21627223, 21629280, 21631328, 21633376, 21635427, 21637484, 21639534, 21641582, 21643630, 21645678, 21647726, 21649774, 21651821, 21653869, 21655925, 21657973, 21660023, 21662062, 21664105, 21666153, 21668210, 21670258, 21672306, 21674354, 21676402, 21678447, 21680495, 21682543, 21684591, 21686639, 21688693, 21690750, 21692798, 21694846, 21696890, 21698947, 21700995, 21703043, 21705091, 21707147, 21709195, 21711238, 21713286, 21715334, 21717382, 21719424, 21721481, 21723529, 21725579, 21727627, 21729684, 21731731, 21733784, 21735832, 21737880, 21739928, 21741976, 21744015, 21746063, 21748111, 21750162, 21752219, 21754275, 21756330, 21758378, 21760435, 21762478, 21764526, 21766574, 21768622, 21770670, 21772718, 21774766, 21776814, 21778862, 21780910, 21782967, 21785024, 21787074, 21789122, 21791167, 21793223, 21795271, 21797324, 21799372, 21801420, 21803468, 21805516, 21807564, 21809612, 21811660, 21813717, 21815765, 21817810, 21819858, 21821910, 21823958, 21826006, 21828055, 21830103, 21832156, 21834204, 21836252, 21838300, 21840348, 21842396, 21844453, 21846499, 21848547, 21850595, 21852649, 21854690, 21856736, 21858784, 21860832, 21862880, 21864928, 21866976, 21869024, 21871068, 21873124, 21875170, 21877218, 21879266, 21881314, 21883369, 21885417, 21887474, 21889529, 21891577, 21893628, 21895669, 21897717, 21899769, 21901817, 21903865, 21905922, 21907970, 21910018, 21912066, 21914123, 21916171, 21918216, 21920264, 21922312, 21924337, 21926385, 21928437, 21930485, 21932533, 21934581, 21936601, 21938649, 21940697, 21942746, 21944803, 21946851, 21948899, 21950947, 21952995, 21955047, 21957095, 21959143, 21961191, 21963239, 21965287, 21967344, 21969392, 21971440, 21973488, 21975545, 21977593, 21979634, 21981679, 21983732, 21985784, 21987834, 21989873, 21991921, 21993969, 21996016, 21998073, 22000121, 22002169, 22004223, 22006280, 22008337, 22010393, 22012441, 22014487, 22016535, 22018583, 22020631, 22022684, 22024738, 22026786, 22028843, 22030891, 22032939, 22034984, 22037041, 22039089, 22041137, 22043185, 22045221, 22047269, 22049317, 22051371, 22053419, 22055467, 22057515, 22059571, 22061619, 22063667, 22065723, 22067780, 22069836, 22071884, 22073937, 22075985, 22078033, 22080080, 22082128, 22084176, 22086213, 22088261, 22090310, 22092358, 22094406, 22096461, 22098517, 22100565, 22102613, 22104662, 22106710, 22108758, 22110801, 22112849, 22114897, 22116945, 22118999, 22121056, 22123104, 22125152, 22127200, 22129244, 22131292, 22133349, 22135401, 22137449, 22139497, 22141545, 22143593, 22145641, 22147689, 22149737, 22151794, 22153843, 22155891, 22157939, 22159996, 22162044, 22164092, 22166140, 22168188, 22170236, 22172293, 22174346, 22176394, 22178438, 22180489, 22182533, 22184581, 22186629, 22188677, 22190734, 22192790, 22194845, 22196893, 22198941, 22200997, 22203045, 22205093, 22207141, 22209189, 22211237, 22213294, 22215342, 22217390, 22219438, 22221492, 22223540, 22225597, 22227645, 22229693, 22231741, 22233789, 22235845, 22237893, 22239937, 22241985, 22244039, 22246087, 22248135, 22250183, 22252240, 22254288, 22256336, 22258384, 22260432, 22262480, 22264528, 22266576, 22268346, 22270089, 22271715, 22273753, 22275808, 22277847, 22279904, 22281950, 22284e3, 22286045, 22288101, 22290146, 22292182, 22294230, 22296287, 22298327, 22300375, 22302180, 22303929, 22305744, 22307780, 22309835, 22311878, 22313055, 22313245, 22313334, 22313424, 22313513, 22313886, 22315835, 22317883, 22319931, 22321979, 22324027, 22326083, 22328131, 22330179, 22332227, 22334284, 22336332, 22338380, 22340428, 22342476, 22344524, 22346572, 22348620, 22350668, 22352716, 22354764, 22356812, 22358860, 22360908, 22362956, 22365013, 22367061, 22369109, 22371157, 22373205, 22375253, 22377301, 22379349, 22381397, 22383445, 22385493, 22387541, 22389589, 22391637, 22393685, 22395742, 22397790, 22399838, 22401886, 22403934, 22405982, 22408030, 22410078, 22412126, 22414174, 22416222, 22418270, 22420318, 22422366, 22424414, 22426471, 22428519, 22430567, 22432615, 22434663, 22436711, 22438759, 22440807, 22442855, 22444903, 22446951, 22448999, 22451047, 22453095, 22455143, 22457200, 22459248, 22461296, 22463344, 22465401, 22467449, 22469497, 22471545, 22473593, 22475641, 22477689, 22479737, 22481785, 22483833, 22485881, 22487938, 22489986, 22492034, 22494082, 22496130, 22498178, 22500226, 22502274, 22504322, 22506370, 22508418, 22510466, 22512514, 22514562, 22516610, 22518667, 22520715, 22522763, 22524811, 22526859, 22528907, 22530955, 22533003, 22535051, 22537099, 22539147, 22541195, 22543243, 22545291, 22547339, 22549396, 22551444, 22553492, 22555540, 22557588, 22559636, 22561684, 22563732, 22565780, 22567828, 22569876, 22571924, 22573981, 22576029, 22578077, 22580134, 22582182, 22584230, 22586278, 22588326, 22590374, 22592422, 22594470, 22596518, 22598566, 22600614, 22602662, 22604710, 22606758, 22608806, 22610862, 22612910, 22614958, 22617006, 22619054, 22621102, 22623150, 22625198, 22627246, 22629294, 22631342, 22633390, 22635438, 22637486, 22639534, 22641591, 22643639, 22645687, 22647735, 22649783, 22651831, 22653879, 22655927, 22657975, 22660023, 22662071, 22664119, 22666167, 22668215, 22670263, 22672320, 22674368, 22676416, 22678464, 22680512, 22682560, 22684608, 22686656, 22688704, 22690752, 22692800, 22694848, 22696898, 22698946, 22700994, 22703050, 22705107, 22707155, 22709203, 22711251, 22713299, 22715347, 22717395, 22719443, 22721491, 22723539, 22725587, 22727635, 22729683, 22731731, 22733788, 22735836, 22737884, 22739932, 22741980, 22744028, 22746076, 22748124, 22750172, 22752204, 22754252, 22756300, 22758348, 22760399, 22762447, 22764504, 22766552, 22768600, 22770648, 22772696, 22774744, 22776792, 22778840, 22780888, 22782936, 22784984, 22787032, 22789080, 22791128, 22793176, 22795233, 22797281, 22799329, 22801377, 22803425, 22805473, 22807521, 22809569, 22811617, 22813665, 22815713, 22817761, 22819813, 22821861, 22823909, 22825966, 22828013, 22830061, 22832109, 22834157, 22836205, 22838253, 22840301, 22842349, 22844397, 22846445, 22848493, 22850541, 22852589, 22854637, 22856685, 22858733, 22860781, 22862829, 22864877, 22866925, 22868973, 22871021, 22873069, 22875122, 22877170, 22879218, 22881266, 22883314, 22885362, 22887419, 22889467, 22891519, 22893567, 22895615, 22897663, 22899711, 22901759, 22903807, 22905855, 22907903, 22909951, 22911999, 22914047, 22916095, 22918152, 22920200, 22922257, 22924305, 22926347, 22928395, 22930443, 22932491, 22934539, 22936588, 22938636, 22940684, 22942732, 22944780, 22946828, 22948885, 22950933, 22952981, 22955029, 22957077, 22959125, 22961173, 22963221, 22965269, 22967317, 22969365, 22971413, 22973461, 22975509, 22977557, 22979614, 22981662, 22983710, 22985758, 22987806, 22989854, 22991902, 22993950, 22995998, 22998046, 23000094, 23002142, 23004199, 23006247, 23008295, 23010352, 23012400, 23014448, 23016496, 23018544, 23020592, 23022640, 23024688, 23026736, 23028784, 23030832, 23032880, 23034928, 23036976, 23039024, 23041081, 23043129, 23045177, 23047225, 23049273, 23051321, 23053369, 23055417, 23057465, 23059513, 23061561, 23063609, 23065657, 23067705, 23069753, 23071810, 23073858, 23075906, 23077954, 23080002, 23082050, 23084098, 23086146, 23088194, 23090250, 23092298, 23094346, 23096394, 23098442, 23100490, 23102546, 23104603, 23106651, 23108699, 23110747, 23112795, 23114843, 23116891, 23118939, 23120987, 23123035, 23125083, 23127131, 23129179, 23131227, 23133284, 23135332, 23137380, 23139428, 23141476, 23143524, 23145572, 23147620, 23149668, 23151716, 23153764, 23155812, 23157860, 23159908, 23161956, 23164013, 23166061, 23168109, 23170157, 23172205, 23174253, 23176301, 23178349, 23180406, 23182454, 23184511, 23186559, 23188607, 23190655, 23192703, 23194760, 23196808, 23198856, 23200904, 23202952, 23205e3, 23207048, 23209096, 23211144, 23213192, 23215240, 23217288, 23219336, 23221384, 23223432, 23225488, 23227536, 23229584, 23231632, 23233672, 23235720, 23237768, 23239816, 23241864, 23243912, 23245960, 23248008, 23250056, 23252104, 23254152, 23256209, 23258257, 23260305, 23262353, 23264401, 23266449, 23268497, 23270545, 23272593, 23274641, 23276689, 23278737, 23280785, 23282833, 23284881, 23286929, 23288977, 23291025, 23293073, 23295121, 23297169, 23299217, 23301265, 23303296, 23305353, 23307401, 23309449, 23311497, 23313545, 23315593, 23317650, 23319698, 23321746, 23323794, 23325842, 23327890, 23329938, 23331986, 23334034, 23336082, 23338130, 23340178, 23342226, 23344274, 23346322, 23348379, 23350427, 23352475, 23354523, 23356571, 23358619, 23360667, 23362719, 23364767, 23366815, 23368866, 23370914, 23372962, 23375010, 23377058, 23379115, 23381163, 23383211, 23385259, 23387307, 23389355, 23391403, 23393451, 23395499, 23397547, 23399595, 23401643, 23403691, 23405739, 23407787, 23409844, 23411892, 23413940, 23415988, 23418036, 23420084, 23422132, 23424180, 23426228, 23428276, 23430324, 23432372, 23434426, 23436474, 23438522, 23440579, 23442627, 23444675, 23446723, 23448771, 23450819, 23452867, 23454915, 23456963, 23459011, 23461059, 23463107, 23465155, 23467203, 23469251, 23471308, 23473356, 23475404, 23477452, 23479500, 23481546, 23483594, 23485642, 23487690, 23489738, 23491786, 23493834, 23495882, 23497930, 23499978, 23502035, 23504083, 23506131, 23508179, 23510227, 23512275, 23514323, 23516371, 23518419, 23520467, 23522515, 23524563, 23526611, 23528659, 23530707, 23532764, 23534812, 23536860, 23538908, 23540956, 23543004, 23545052, 23547100, 23549148, 23551196, 23553244, 23555292, 23557340, 23559388, 23561436, 23563491, 23565539, 23567587, 23569635, 23571683, 23573731, 23575779, 23577827, 23579875, 23581923, 23583971, 23586019, 23588067, 23590115, 23592163, 23594220, 23596268, 23598316, 23600364, 23602412, 23604460, 23606508, 23608556, 23610604, 23612652, 23614700, 23616748, 23618804, 23620852, 23622900, 23624956, 23627004, 23629052, 23631100, 23633148, 23635196, 23637244, 23639292, 23641340, 23643388, 23645436, 23647484, 23649541, 23651589, 23653637, 23655694, 23657742, 23659790, 23661838, 23663886, 23665934, 23667982, 23670030, 23672078, 23674126, 23676174, 23678222, 23680270, 23682318, 23684366, 23686423, 23688471, 23690519, 23692567, 23694615, 23696663, 23698711, 23700759, 23702807, 23704855, 23706903, 23708951, 23710999, 23713056, 23715104, 23717161, 23719209, 23721257, 23723305, 23725353, 23727401, 23729449, 23731497, 23733545, 23735593, 23737641, 23739689, 23741737, 23743785, 23745833, 23747890, 23749938, 23751986, 23754034, 23756082, 23758130, 23760178, 23762226, 23764274, 23766322, 23768370, 23770418, 23772466, 23774514, 23776562, 23778619, 23780667, 23782715, 23784763, 23786811, 23788859, 23790907, 23792955, 23795003, 23797051, 23799099, 23801147, 23803195, 23805243, 23807291, 23809348, 23811396, 23813444, 23815492, 23817540, 23819597, 23821645, 23823693, 23825741, 23827789, 23829837, 23831885, 23833933, 23835981, 23838029, 23840086, 23842134, 23844182, 23846230, 23848278, 23850326, 23852374, 23854422, 23856470, 23858518, 23860566, 23862614, 23864662, 23866710, 23868758, 23870815, 23872863, 23874911, 23876959, 23879007, 23881055, 23883103, 23885151, 23887199, 23889247, 23891295, 23893343, 23895391, 23897439, 23899487, 23901540, 23903588, 23905636, 23907684, 23909732, 23911780, 23913828, 23915876, 23917924, 23919972, 23922019, 23924067, 23926115, 23928163, 23930211, 23932268, 23934316, 23936364, 23938414, 23940462, 23942518, 23944566, 23946614, 23948662, 23950710, 23952758, 23954806, 23956854, 23958902, 23960950, 23963007, 23965055, 23967103, 23969151, 23971199, 23973247, 23975295, 23977343, 23979391, 23981439, 23983487, 23985535, 23987583, 23989631, 23991679, 23993736, 23995784, 23997832, 23999880, 24001928, 24003976, 24006024, 24008072, 24010120, 24012168, 24014216, 24016264, 24018312, 24020360, 24022408, 24024465, 24026513, 24028561, 24030609, 24032657, 24034705, 24036753, 24038801, 24040849, 24042897, 24044945, 24046993, 24049046, 24051094, 24053142, 24055199, 24057247, 24059295, 24061343, 24063391, 24065448, 24067496, 24069544, 24071592, 24073649, 24075697, 24077745, 24079793, 24081841, 24083889, 24085946, 24087994, 24090042, 24092090, 24094138, 24096186, 24098234, 24100282, 24102330, 24104378, 24106426, 24108474, 24110522, 24112570, 24114618, 24116675, 24118723, 24120771, 24122819, 24124867, 24126915, 24128963, 24131011, 24133059, 24135107, 24137155, 24139203, 24141251, 24143299, 24145347, 24147404, 24149452, 24151500, 24153548, 24155596, 24157644, 24159692, 24161740, 24163788, 24165836, 24167884, 24169932, 24171989, 24174037, 24176085, 24178142, 24180190, 24182238, 24184286, 24186334, 24188382, 24190430, 24192478, 24194526, 24196574, 24198622, 24200670, 24202718, 24204766, 24206814, 24208871, 24210919, 24212967, 24215015, 24217063, 24219111, 24221159, 24223207, 24225255, 24227310, 24229358, 24231406, 24233454, 24235502, 24237550, 24239607, 24241655, 24243712, 24245760, 24247808, 24249856, 24251912, 24253960, 24256008, 24258056, 24260108, 24262156, 24264204, 24266252, 24268300, 24270357, 24272405, 24274453, 24276501, 24278549, 24280597, 24282645, 24284693, 24286741, 24288789, 24290837, 24292885, 24294933, 24296981, 24299029, 24301086, 24303134, 24305182, 24307230, 24309278, 24311326, 24313374, 24315422, 24317471, 24319519, 24321567, 24323615, 24325663, 24327720, 24329768, 24331825, 24333873, 24335921, 24337969, 24340017, 24342065, 24344113, 24346161, 24348209, 24350257, 24352305, 24354353, 24356401, 24358449, 24360497, 24362553, 24364601, 24366649, 24368697, 24370745, 24372793, 24374841, 24376889, 24378937, 24380985, 24383033, 24385081, 24387129, 24389177, 24391225, 24393282, 24395330, 24397378, 24399426, 24401474, 24403522, 24405570, 24407618, 24409666, 24411714, 24413762, 24415810, 24417858, 24419906, 24421954, 24424011, 24426059, 24428109, 24430157, 24432205, 24434253, 24436301, 24438349, 24440397, 24442445, 24444493, 24446541, 24448589, 24450637, 24452685, 24454742, 24456790, 24458838, 24460886, 24462934, 24464982, 24467030, 24469078, 24471126, 24473174, 24475222, 24477270, 24479318, 24481366, 24483414, 24485462, 24487510, 24489558, 24491606, 24493654, 24495702, 24497750, 24499798, 24501846, 24503903, 24505951, 24507999, 24510047, 24512095, 24514143, 24516200, 24518248, 24520296, 24522344, 24524392, 24526440, 24528488, 24530536, 24532584, 24534632, 24536680, 24538728, 24540776, 24542824, 24544872, 24546929, 24548977, 24551025, 24553073, 24555121, 24557169, 24559217, 24561265, 24563313, 24565361, 24567409, 24569457, 24571505, 24573553, 24575601, 24577658, 24579706, 24581754, 24583802, 24585850, 24587898, 24589921, 24591969, 24594017, 24596064, 24598112, 24600160, 24602208, 24604256, 24606304, 24608361, 24610409, 24612457, 24614505, 24616553, 24618601, 24620649, 24622697, 24624745, 24626793, 24628841, 24630889, 24632937, 24634985, 24637033, 24639089, 24641137, 24643185, 24645233, 24647281, 24649329, 24651377, 24653432, 24655480, 24657528, 24659576, 24661624, 24663672, 24665720, 24667768, 24669825, 24671873, 24673929, 24675977, 24678025, 24680073, 24682121, 24684169, 24686217, 24688265, 24690313, 24692361, 24694409, 24696457, 24698505, 24700562, 24702610, 24704658, 24706706, 24708754, 24710802, 24712850, 24714898, 24716946, 24719003, 24721051, 24723099, 24725147, 24727195, 24729243, 24731300, 24733348, 24735396, 24737444, 24739492, 24741540, 24743588, 24745636, 24747684, 24749732, 24751780, 24753828, 24755876, 24757924, 24759972, 24762029, 24764077, 24766125, 24768173, 24770221, 24772269, 24774317, 24776365, 24778413, 24780461, 24782509, 24784557, 24786605, 24788653, 24790701, 24792758, 24794798, 24796846, 24798894, 24800950, 24802998, 24805046, 24807094, 24809142, 24811190, 24813238, 24815286, 24817334, 24819382, 24821430, 24823477, 24825533, 24827581, 24829629, 24831677, 24833725, 24835773, 24837821, 24839869, 24841917, 24843965, 24846013, 24848061, 24850109, 24852157, 24854212, 24856260, 24858308, 24860361, 24862409, 24864457, 24866505, 24868553, 24870610, 24872658, 24874706, 24876754, 24878802, 24880850, 24882898, 24884955, 24887003, 24889051, 24891099, 24893147, 24895195, 24897243, 24899291, 24901339, 24903387, 24905435, 24907483, 24909531, 24911579, 24913627, 24915684, 24917732, 24919780, 24921828, 24923876, 24925917, 24927965, 24930013, 24932061, 24934109, 24936157, 24938205, 24940253, 24942301, 24944349, 24946406, 24948454, 24950502, 24952550, 24954598, 24956646, 24958694, 24960742, 24962790, 24964838, 24966886, 24968934, 24970982, 24973030, 24975078, 24977122, 24979170, 24981218, 24983266, 24985314, 24987362, 24989410, 24991458, 24993506, 24995563, 24997611, 24999659, 25001707, 25003755, 25005803, 25007860, 25009908, 25011956, 25014004, 25016052, 25018100, 25020148, 25022196, 25024244, 25026292, 25028340, 25030388, 25032436, 25034484, 25036532, 25038589, 25040637, 25042685, 25044733, 25046781, 25048829, 25050877, 25052925, 25054973, 25057021, 25059069, 25061117, 25063165, 25065213, 25067261, 25069318, 25071366, 25073414, 25075462, 25077510, 25079558, 25081606, 25083654, 25085702, 25087750, 25089798, 25091846, 25093894, 25095942, 25097990, 25100047, 25102095, 25104143, 25106191, 25108239, 25110287, 25112335, 25114383, 25116431, 25118486, 25120534, 25122582, 25124630, 25126678, 25128726, 25130783, 25132831, 25134879, 25136927, 25138975, 25141023, 25143071, 25145119, 25147165, 25149213, 25151261, 25153309, 25155357, 25157405, 25159453, 25161510, 25163558, 25165606, 25167654, 25169702, 25171750, 25173798, 25175846, 25177894, 25179942, 25181990, 25184038, 25186086, 25188134, 25190182, 25192239, 25194287, 25196335, 25198383, 25200431, 25202479, 25204527, 25206575, 25208623, 25210671, 25212719, 25214776, 25216824, 25218872, 25220920, 25222977, 25225025, 25227073, 25229121, 25231169, 25233217, 25235265, 25237313, 25239361, 25241409, 25243457, 25245505, 25247553, 25249601, 25251649, 25253706, 25255754, 25257802, 25259850, 25261898, 25263946, 25265994, 25268042, 25270090, 25272138, 25274186, 25276234, 25278282, 25280330, 25282378, 25284435, 25286483, 25288531, 25290579, 25292627, 25294675, 25296723, 25298771, 25300819, 25302867, 25304915, 25306963, 25309011, 25311059, 25313107, 25315164, 25317212, 25319260, 25321308, 25323356, 25325404, 25327452, 25329500, 25331548, 25333596, 25335644, 25337692, 25339740, 25341788, 25343836, 25345893, 25347941, 25349989, 25352037, 25354085, 25356133, 25358181, 25360229, 25362277, 25364325, 25366373, 25368421, 25370469, 25372517, 25374565, 25376622, 25378647, 25380695, 25382743, 25384791, 25386839, 25388887, 25390927, 25392975, 25395023, 25397071, 25399119, 25401167, 25403215, 25405263, 25407320, 25409368, 25411416, 25413457, 25415505, 25417553, 25419601, 25421649, 25423697, 25425745, 25427793, 25429844, 25431892, 25433940, 25435988, 25438044, 25440092, 25442140, 25444188, 25446236, 25448284, 25450332, 25452380, 25454428, 25456476, 25458524, 25459678, 25460917, 25462974, 25465022, 25466979, 25468889, 25470784, 25472555, 25474450, 25476323, 25478163, 25479913, 25481791, 25483636, 25485482, 25487327, 25489198, 25491068, 25492821, 25494709, 25496603, 25498499, 25500276, 25502124, 25503977, 25505952, 25507733, 25509610, 25511483, 25513308, 25515177, 25517072, 25518936, 25520761, 25522617, 25524527, 25526397, 25528220, 25530054, 25531968, 25533832, 25535635, 25537524, 25539398, 25541313, 25543118, 25545003, 25546899, 25548705, 25550588, 25552447, 25554338, 25556176, 25558054, 25559887, 25561747, 25563545, 25565408, 25567287, 25569132, 25570981, 25572904, 25574809, 25576743, 25578613, 25580546, 25582459, 25584239, 25586179, 25588035, 25589885, 25591744, 25593608, 25595464, 25597328, 25599200, 25601057, 25602942, 25604734, 25606614, 25608498, 25610379, 25612178, 25614105, 25615969, 25617840, 25619684, 25621554, 25623443, 25625277, 25627140, 25629005, 25630864, 25632676, 25634548, 25636375, 25638265, 25640069, 25641992, 25643848, 25645690, 25647460, 25649315, 25651191, 25653025, 25654913, 25656781, 25658696, 25660528, 25662406, 25664309, 25666165, 25667992, 25669902, 25671789, 25673716, 25675503, 25677385, 25679245, 25681107, 25682951, 25684807, 25686655, 25688467, 25690397, 25692277, 25694140, 25695960, 25697831, 25699778, 25701643, 25703461, 25705326, 25707173, 25709009, 25710868, 25712740, 25714632, 25716433, 25718247, 25720149, 25722081, 25723886, 25725772, 25727627, 25729521, 25731314, 25733151, 25735021, 25736902, 25738707, 25740599, 25742514, 25744326, 25746237, 25748084, 25749960, 25751799, 25753646, 25755540, 25757432, 25759197, 25761065, 25762960, 25764807, 25766617, 25768515, 25770375, 25772163, 25774044, 25775910, 25777787, 25779553, 25781412, 25783263, 25785081, 25786948, 25788814, 25790647, 25792493, 25794312, 25796199, 25798082, 25799905, 25801797, 25803695, 25805584, 25807382, 25809237, 25811085, 25812951, 25814774, 25816627, 25818528, 25820357, 25822175, 25824062, 25825908, 25827748, 25829635, 25831507, 25833379, 25835132, 25837001, 25838896, 25840760, 25842523, 25844412, 25846271, 25848129, 25849992, 25851829, 25853701, 25855525, 25857402, 25859327, 25861167, 25862915, 25864836, 25866667, 25868531, 25870383, 25872231, 25874132, 25875983, 25877865, 25879766, 25881677, 25883477, 25885352, 25887200, 25889079, 25890929, 25892765, 25894628, 25896519, 25898281, 25900173, 25902058, 25903908, 25905760, 25907620, 25909488, 25911339, 25913182, 25915030, 25916921, 25918705, 25920596, 25922495, 25924349, 25926124, 25927962, 25929794, 25931696, 25933568, 25935450, 25937362, 25939140, 25941042, 25942909, 25944756, 25946622, 25948513, 25950410, 25952279, 25954100, 25956021, 25957893, 25959706, 25961589, 25963478, 25965341, 25967179, 25969040, 25970924, 25972769, 25974558, 25976427, 25978332, 25980176, 25981963, 25983869, 25985747, 25987615, 25989429, 25991278, 25993129, 25994932, 25996804, 25998659, 26000539, 26002338, 26004252, 26006106, 26007957, 26009759, 26011625, 26013533, 26015360, 26017201, 26019100, 26020931, 26022759, 26024681, 26026568, 26028446, 26030230, 26032077, 26033973, 26035853, 26037652, 26039542, 26041391, 26043218, 26045073, 26047003, 26048871, 26050731, 26052627, 26054524, 26056433, 26058211, 26060085, 26061951, 26063834, 26065661, 26067528, 26069384, 26071228, 26073059, 26074883, 26076773, 26078577, 26080450, 26082289, 26084144, 26085973, 26087930, 26089791, 26091696, 26093460, 26095325, 26097217, 26099045, 26100897, 26102767, 26104629, 26106487, 26108329, 26110042, 26111637, 26113685, 26114620, 26114709, 26114801, 26114901, 26114991, 26115080, 26115172, 26115261, 26115360, 26115449, 26115536, 26115625, 26115714, 26115812, 26115905, 26115994, 26117435, 26119415, 26120881, 26121494, 26122924, 26124327, 26126025, 26127419, 26128403, 26129614, 26130454, 26131475, 26132536, 26133823, 26134970, 26136219, 26137384, 26138488, 26139615, 26140721, 26141815, 26142897, 26143974, 26144899, 26145939, 26147175, 26148344, 26149464, 26150192, 26151239, 26152300, 26153252, 26154294, 26155470, 26156745, 26158044, 26159187, 26160387, 26161522, 26162722, 26163851, 26164901, 26165998, 26166942, 26167936, 26169163, 26170360, 26171256, 26172354, 26173461, 26174273, 26175282, 26176423, 26177716, 26179012, 26180237, 26181323, 26182662, 26183855, 26185065, 26186162, 26187448, 26188617, 26189858, 26191179, 26192401, 26193514, 26194643, 26195905, 26196959, 26198142, 26199441, 26200628 ],
          "sizes": [ 2013, 2048, 2048, 2057, 2056, 2048, 2055, 2048, 2052, 2048, 2048, 2055, 2056, 1364, 797, 1503, 1410, 1140, 1534, 1361, 1551, 1012, 1469, 1276, 1476, 1041, 1360, 1217, 1241, 1418, 1116, 1321, 1119, 1225, 1076, 1498, 1283, 1303, 1292, 1093, 1445, 979, 1823, 1261, 1252, 1110, 1378, 1362, 1223, 1384, 1114, 1484, 1144, 1538, 1255, 1377, 1034, 1323, 1200, 1165, 1423, 1099, 1460, 1138, 1373, 1338, 1429, 1356, 1232, 1520, 1126, 1377, 1083, 1488, 1229, 1416, 1177, 1282, 1317, 1219, 1528, 932, 1362, 934, 1170, 1231, 1240, 1350, 1353, 1393, 1066, 1505, 827, 1437, 1180, 1296, 1256, 1273, 1245, 1471, 1568, 1050, 1343, 1243, 1375, 1193, 1192, 1315, 1216, 1350, 1457, 1436, 1109, 1697, 1168, 1150, 1414, 1195, 1335, 1077, 1486, 1039, 1222, 1046, 1464, 1225, 1256, 1336, 1134, 1450, 1120, 1404, 928, 1337, 1248, 1166, 1425, 1250, 1325, 1250, 1391, 1108, 1304, 1073, 1336, 1288, 1291, 1280, 1231, 1231, 1252, 1501, 1391, 1523, 1391, 1455, 1280, 1066, 1305, 1211, 1317, 1004, 1318, 1046, 1502, 1408, 1555, 1359, 1031, 1376, 933, 2052, 2050, 2057, 2047, 2051, 2048, 2035, 2051, 2057, 2038, 2051, 2057, 2041, 2051, 2057, 2055, 2050, 2057, 2042, 2048, 2057, 2040, 2051, 2043, 2042, 2051, 2057, 2029, 2039, 455, 93, 89, 89, 1312, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2056, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2055, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2054, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2056, 2048, 2048, 2048, 2057, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2057, 2048, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2052, 2051, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2055, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2056, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2054, 2048, 2052, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2056, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2052, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2051, 2057, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2056, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 1870, 89, 98, 93, 89, 89, 92, 99, 90, 89, 94, 89, 98, 89, 87, 89, 89, 98, 93, 89, 89, 92, 99, 90, 89, 94, 89, 98, 368, 1944, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2051, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2037, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2033, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2039, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2050, 2048, 2048, 2048, 2048, 2054, 2056, 2050, 2048, 2048, 2048, 2043, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2048, 2047, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2039, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2037, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2054, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2039, 2048, 2048, 2048, 2039, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2040, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2041, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2041, 2048, 2048, 2048, 2039, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2042, 2048, 2048, 2048, 2050, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2051, 2048, 2048, 2048, 2048, 2048, 2050, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2056, 2056, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2046, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2055, 2051, 2048, 2048, 2048, 2048, 2045, 2048, 2048, 2048, 2057, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2041, 2048, 2048, 2048, 2054, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2057, 2048, 2048, 2048, 2056, 2048, 2051, 2043, 2043, 2048, 2036, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2052, 2048, 2048, 2044, 2048, 2038, 2053, 2048, 2048, 2048, 2051, 2048, 2039, 2048, 2049, 2055, 2051, 2044, 2048, 2038, 2047, 2045, 2048, 2048, 2043, 2041, 2051, 2048, 2048, 2048, 2052, 2048, 2048, 2046, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2042, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2048, 2048, 2051, 2057, 2051, 2048, 2045, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2056, 2048, 2048, 2056, 2048, 2048, 2056, 2048, 2050, 2057, 2048, 2048, 2041, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2051, 2053, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2056, 2048, 2048, 2048, 2048, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2019, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2043, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2043, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2046, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2048, 2032, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2046, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2038, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2057, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2031, 2048, 2048, 2048, 2056, 2057, 2053, 2049, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2049, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2049, 2048, 2057, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2057, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2053, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2043, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2053, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2038, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2045, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2051, 2048, 2048, 2048, 2048, 2045, 2057, 2048, 2048, 2036, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2043, 2042, 2048, 2048, 2048, 2048, 2048, 2048, 2046, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2052, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2045, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2034, 2048, 2048, 2048, 2048, 2045, 2048, 2050, 2055, 2048, 2048, 2048, 2048, 2048, 2049, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2041, 2048, 2048, 2048, 2050, 2048, 2055, 2057, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2055, 2048, 2043, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2056, 2057, 2054, 2048, 2048, 2053, 2057, 2048, 1469, 871, 2057, 2048, 2048, 2057, 2048, 2047, 2048, 2054, 2048, 2048, 2049, 2057, 2051, 2048, 2048, 2057, 2048, 2048, 2057, 2055, 2048, 2048, 2054, 2050, 2048, 2045, 2045, 2048, 2048, 2048, 2057, 2048, 2057, 2054, 2048, 2048, 2048, 2057, 2048, 2056, 2048, 2057, 2050, 2048, 2041, 2057, 2048, 2048, 2057, 2048, 2048, 2057, 2051, 2048, 2048, 2048, 2041, 2022, 2048, 2049, 2049, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2042, 2048, 2040, 2057, 2044, 2048, 2048, 2051, 2048, 2043, 1754, 1677, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2038, 2057, 2053, 2048, 2055, 2053, 2041, 2048, 2048, 2048, 2057, 2056, 2048, 2048, 2057, 2048, 2047, 2055, 2053, 2048, 2048, 2053, 2048, 2048, 2057, 2047, 2048, 2048, 2048, 2057, 2057, 2048, 2046, 2048, 2048, 2054, 2051, 2032, 2046, 2048, 2050, 2053, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2035, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2045, 2040, 2047, 2048, 2057, 2048, 2042, 2057, 2038, 2048, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2050, 2052, 2052, 2048, 2057, 2048, 2049, 2052, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2055, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2051, 2057, 2052, 2048, 2057, 2047, 2048, 2048, 2057, 2057, 2057, 2048, 2057, 2048, 2055, 2048, 2055, 2055, 2055, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2051, 2048, 2048, 2054, 2057, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2053, 2056, 2048, 2048, 2048, 2057, 2057, 2048, 2055, 2048, 2048, 2055, 2056, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2055, 2050, 2048, 2048, 2045, 2048, 2048, 2048, 2050, 2048, 2057, 2048, 2057, 2048, 2048, 2057, 2048, 2057, 2057, 2057, 2048, 2048, 2048, 2057, 2053, 2048, 2053, 2057, 2048, 2048, 2057, 2048, 2051, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2051, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2055, 2048, 2057, 2055, 2048, 2049, 2053, 2057, 2048, 2048, 2057, 2057, 2056, 2053, 2057, 2048, 2048, 2057, 2054, 2048, 2050, 2044, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2054, 2057, 2048, 2048, 2048, 2030, 2054, 2048, 2051, 2044, 2048, 2048, 2048, 2045, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2054, 2056, 2048, 2048, 2048, 2054, 2048, 2051, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2057, 2057, 2057, 2048, 2048, 2055, 2056, 2057, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2050, 2057, 2048, 2048, 2048, 2057, 2048, 2054, 2057, 2048, 2048, 2053, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2045, 2046, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2050, 2057, 2056, 2048, 2048, 2056, 2057, 2048, 2056, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2052, 2048, 2048, 2048, 2057, 2049, 2048, 2057, 2048, 2048, 2057, 2056, 2048, 2048, 2056, 2057, 2048, 2048, 2048, 2055, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2053, 2057, 2048, 2048, 2057, 2048, 2048, 2054, 2055, 2048, 2048, 2057, 2048, 2048, 2048, 2051, 2057, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2051, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2052, 2057, 2057, 2048, 2056, 2057, 2044, 2048, 2048, 2057, 2056, 2056, 2050, 2052, 2048, 2048, 2048, 2055, 2052, 2048, 2057, 2048, 2048, 2057, 2055, 2051, 2055, 2050, 2057, 2048, 2048, 2057, 2057, 2054, 2057, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2055, 2057, 2048, 2048, 2048, 2056, 2048, 2055, 2050, 2048, 2048, 2048, 2057, 2048, 2048, 2051, 2041, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2056, 2048, 2050, 2048, 2053, 2052, 2035, 2048, 2043, 2048, 2057, 2051, 2046, 2055, 2048, 2048, 2057, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2056, 2057, 2045, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2046, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2055, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2054, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2047, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2044, 2046, 2048, 2057, 2057, 2048, 2057, 2048, 2057, 2048, 2048, 2055, 2057, 2057, 2055, 2049, 2048, 2056, 2052, 2057, 2048, 2057, 2048, 2057, 2048, 2057, 2048, 2056, 2048, 2048, 2039, 2057, 2048, 2048, 2043, 2048, 2014, 2048, 2057, 2048, 2053, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2051, 2048, 2052, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2052, 2057, 2050, 2048, 2055, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2057, 2057, 2056, 2048, 2048, 2057, 2048, 2037, 2057, 2057, 2048, 2051, 2057, 2046, 2046, 2051, 2052, 2054, 2048, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2057, 2056, 2048, 2048, 2057, 2048, 2057, 2048, 2050, 2048, 2048, 2052, 2057, 2048, 2048, 2054, 2053, 2048, 2048, 2057, 2048, 2048, 2057, 2056, 2056, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2053, 2048, 2057, 2048, 2057, 2051, 2050, 2048, 2051, 2048, 2048, 2057, 2048, 2050, 2048, 2057, 2048, 2048, 2048, 2055, 2048, 2053, 2056, 2057, 2043, 2048, 2057, 2048, 2053, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2052, 2046, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2057, 2056, 2048, 2057, 2051, 2057, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2056, 2057, 2048, 2048, 2055, 2054, 2057, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2049, 2054, 2048, 2057, 2048, 2048, 2048, 2055, 2057, 2048, 2056, 2048, 2048, 2056, 2048, 2057, 2048, 2053, 2057, 2052, 2048, 2048, 2057, 2056, 2053, 2047, 2057, 2048, 2048, 2056, 2048, 2057, 2055, 2057, 2048, 2048, 2056, 2054, 2057, 2048, 2048, 2057, 2054, 2048, 2052, 2057, 2057, 2055, 2044, 2056, 2048, 2048, 2057, 2048, 2048, 2055, 2053, 2048, 2048, 2048, 2048, 2051, 2048, 2052, 2055, 2048, 2051, 2057, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2053, 2048, 2048, 2057, 2039, 2057, 2048, 2057, 2048, 2048, 2048, 2055, 2055, 2048, 2048, 2057, 2048, 2057, 2057, 2046, 2048, 2048, 2057, 2056, 2048, 2057, 2057, 2048, 2048, 2046, 2056, 2048, 2048, 2056, 2056, 2047, 2048, 2057, 2048, 2048, 2057, 2057, 2048, 2054, 2056, 2057, 2048, 2056, 2057, 2055, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2053, 2048, 2045, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2048, 2057, 2048, 2057, 2048, 2048, 2049, 2055, 2056, 2048, 2048, 2048, 2048, 2048, 2051, 2055, 2048, 2046, 2057, 2048, 2048, 2057, 2052, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2052, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2053, 2048, 2057, 2048, 2048, 2057, 2051, 2056, 2048, 2057, 2048, 2048, 2048, 2055, 2056, 2052, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2046, 2049, 2048, 2048, 2048, 2057, 2048, 2048, 2046, 2057, 2057, 2048, 2057, 2048, 2048, 2049, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2057, 2048, 2048, 2057, 2048, 2048, 2045, 2056, 2056, 2056, 2048, 2057, 2048, 2048, 2044, 2057, 2056, 2048, 2050, 2044, 2048, 2055, 2057, 2048, 2057, 2048, 2051, 2057, 2055, 2048, 2057, 2048, 2054, 2044, 2048, 2055, 2048, 2057, 2048, 2048, 2048, 2044, 2052, 2048, 2056, 2048, 2048, 2056, 2057, 2053, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2051, 2048, 2057, 2048, 2048, 2057, 2048, 2049, 2052, 2057, 2048, 2048, 2048, 2057, 2048, 2056, 2046, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2056, 2048, 2048, 2052, 2048, 2049, 2045, 2057, 2048, 2040, 2057, 2048, 2048, 2030, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2055, 2057, 2048, 2056, 2046, 2056, 2048, 2048, 2051, 2057, 2048, 2056, 2055, 2051, 2048, 2048, 2057, 2048, 2057, 2048, 2057, 2056, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2051, 2048, 2057, 2048, 2056, 2048, 2057, 2048, 2048, 2056, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2057, 2044, 2057, 2051, 2047, 2050, 2053, 2048, 2048, 2048, 2050, 2048, 2048, 2057, 2048, 2048, 2048, 2042, 2048, 2051, 2055, 2049, 2046, 2054, 2048, 2055, 2055, 2048, 2056, 2057, 2048, 2048, 2057, 2042, 2009, 2044, 2051, 2051, 2051, 2041, 2056, 2048, 2048, 2057, 2048, 2052, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2033, 2048, 2048, 2057, 2048, 2048, 2048, 2046, 2048, 2047, 2057, 2057, 2048, 2056, 2048, 2051, 2057, 2047, 2038, 2050, 2050, 2048, 2037, 2055, 2052, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 628, 367, 1770, 2048, 2054, 2048, 2039, 2048, 2036, 2048, 2048, 2048, 2048, 2056, 2011, 2041, 2045, 2048, 2048, 1998, 2048, 2048, 2048, 2040, 2048, 2048, 2048, 2020, 2048, 2048, 2057, 2051, 2048, 2048, 2048, 2036, 2048, 2048, 2048, 2033, 2057, 2048, 2012, 2021, 2054, 2037, 2048, 2048, 2048, 2048, 2048, 2048, 2013, 2048, 2048, 2056, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2045, 2043, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2045, 2048, 2048, 2048, 2046, 2048, 2048, 2048, 2056, 2057, 2048, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2043, 2055, 2049, 2048, 2045, 2057, 2048, 2048, 2054, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2045, 2057, 2056, 2057, 2048, 2048, 2048, 2048, 2037, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2046, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2052, 2048, 2048, 2048, 2057, 2038, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2057, 2048, 2057, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2056, 2048, 2018, 2054, 2048, 2048, 2044, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2052, 2057, 2057, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2052, 2048, 2048, 2056, 2048, 2042, 2048, 2057, 2048, 2050, 2048, 2048, 2057, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2050, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2057, 2048, 2057, 2048, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2037, 2048, 2048, 2048, 2048, 2056, 2043, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2042, 2048, 2048, 2048, 2057, 2056, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2038, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2056, 2048, 2057, 2048, 2048, 2048, 2029, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2056, 2055, 2048, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 1951, 2048, 2048, 2050, 2047, 2056, 2057, 2036, 2048, 2052, 2037, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2049, 2048, 2048, 2057, 2050, 2054, 2048, 2048, 2055, 2048, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2052, 2057, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2046, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2048, 2048, 2057, 2048, 2048, 2053, 2048, 2048, 2044, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2046, 2057, 2048, 2048, 2040, 2048, 2048, 2048, 2035, 2048, 2048, 2048, 2041, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2026, 2048, 2048, 2056, 2048, 2048, 2057, 2048, 2043, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2035, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2049, 2034, 2048, 2048, 2048, 2057, 2048, 2055, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2038, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2035, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2040, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2042, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2057, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2021, 2048, 2048, 2048, 2030, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2053, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 1991, 2048, 2055, 2048, 2054, 2049, 2048, 2057, 2048, 2037, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2052, 2048, 2048, 2048, 2048, 2040, 2048, 2044, 2048, 2029, 2048, 2048, 2057, 2048, 2048, 2042, 2048, 2020, 2056, 2054, 2048, 2046, 2048, 2048, 2048, 2024, 2048, 2044, 2052, 2024, 2048, 2048, 2057, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2035, 2048, 2048, 2048, 2040, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2026, 2048, 2055, 2057, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2041, 2037, 2048, 2048, 2048, 2046, 2048, 2048, 2048, 2034, 2048, 2048, 2048, 2037, 2048, 2048, 2048, 2032, 2056, 2048, 2048, 2057, 2048, 2056, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2039, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2057, 2054, 2048, 2048, 2048, 2054, 2048, 2057, 2050, 2048, 2048, 2048, 2047, 2048, 2048, 2057, 2046, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2032, 2046, 2048, 2048, 2054, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2057, 2050, 2054, 2048, 2048, 2057, 2048, 2048, 2048, 2050, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2055, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2055, 2057, 2043, 2048, 2048, 2048, 2048, 2048, 2052, 436, 92, 91, 90, 89, 105, 89, 90, 89, 87, 1144, 2048, 2048, 2057, 2056, 2048, 2048, 2048, 2057, 2045, 2057, 2048, 2057, 2048, 2048, 2048, 2057, 2047, 2038, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2053, 2048, 2048, 2056, 2048, 2048, 2048, 2030, 2048, 2044, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2052, 2048, 2052, 2048, 2057, 2057, 2048, 2048, 2048, 2055, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2025, 2048, 2025, 2057, 2048, 2051, 2056, 2037, 2048, 2032, 2048, 2048, 2048, 2048, 2057, 2042, 2048, 2048, 2045, 2048, 2043, 2056, 2049, 2048, 2026, 2048, 2034, 2048, 2048, 2053, 2048, 2048, 2048, 2039, 2048, 2048, 2048, 2054, 2048, 2048, 2055, 2048, 2047, 2048, 2051, 2048, 2035, 2048, 2051, 2048, 2048, 2056, 2048, 2041, 2048, 2049, 2048, 2046, 2048, 2024, 2048, 2048, 2021, 2057, 2022, 2048, 2053, 2048, 2047, 2048, 2042, 2048, 2048, 2048, 2057, 2046, 2048, 2047, 2057, 2048, 2054, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2056, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2052, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2029, 2049, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2037, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2055, 2048, 2048, 2057, 2039, 2057, 2044, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2035, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2036, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2023, 2048, 2030, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2023, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2035, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2037, 2055, 2048, 2057, 2048, 2057, 2048, 2048, 2057, 2057, 2048, 2032, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2056, 2057, 2048, 2048, 2048, 2057, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2031, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2049, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2057, 2048, 2048, 2043, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2052, 2048, 2048, 2056, 2048, 2048, 2056, 2046, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2046, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2053, 2048, 2042, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2039, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2044, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2043, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2050, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2019, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2024, 2050, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2036, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2052, 2048, 2057, 2048, 2048, 2056, 2048, 2038, 2048, 2043, 2048, 2048, 2048, 2048, 2057, 2052, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2023, 2057, 2042, 2048, 2057, 2048, 2051, 2048, 2057, 2048, 2048, 2048, 2057, 2047, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2054, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2055, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2045, 2048, 2044, 2048, 2042, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2042, 2037, 2052, 2048, 2048, 2056, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2049, 2048, 2057, 2048, 2048, 2048, 2057, 2031, 2054, 2044, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2040, 2055, 2050, 2048, 2048, 2048, 2057, 2055, 2048, 2036, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2029, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2039, 2048, 2043, 2048, 2055, 2050, 2048, 2034, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2055, 2048, 2057, 2048, 2048, 2048, 2043, 2048, 2024, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2056, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2056, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2055, 2048, 2056, 2048, 2048, 2048, 2057, 2053, 2048, 2036, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2048, 2048, 2057, 2048, 2048, 2048, 2027, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2057, 2044, 2048, 2055, 2048, 2048, 2048, 2043, 2040, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2050, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2048, 2048, 2056, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2057, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2051, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2020, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2052, 2056, 2048, 2048, 2057, 2056, 2048, 2055, 2048, 2048, 2048, 2057, 2055, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2056, 2048, 2048, 2048, 2031, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2057, 2056, 2048, 2048, 2048, 2039, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2054, 2044, 2048, 2048, 2048, 2057, 2048, 2048, 2032, 2057, 2051, 2057, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2049, 2048, 2048, 2057, 2048, 2048, 2056, 2045, 2047, 2048, 2040, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2035, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2051, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2046, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2057, 2049, 2038, 2056, 2048, 2048, 2033, 2056, 2048, 2048, 2048, 2057, 2050, 2045, 2048, 2037, 2048, 2036, 2056, 2048, 2048, 2056, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 1375, 376, 94, 89, 90, 89, 1394, 1948, 2048, 2037, 1792, 1801, 1941, 2048, 2048, 2057, 2048, 2051, 2048, 2054, 1980, 1982, 2048, 1902, 2038, 2048, 2048, 2048, 2048, 2039, 2049, 2054, 2042, 2055, 2057, 1963, 2039, 2048, 2048, 2048, 2048, 2048, 2056, 1946, 1751, 2046, 2048, 2014, 2038, 2057, 2048, 2048, 2048, 2048, 2053, 2041, 2056, 2048, 2048, 1973, 2057, 2048, 2048, 2048, 2057, 2049, 2048, 1878, 2039, 2043, 1962, 2023, 2048, 2048, 2048, 2046, 2048, 2048, 2039, 2057, 2057, 2038, 2022, 2026, 2048, 2048, 2048, 2044, 2048, 2048, 1865, 1831, 2030, 2048, 1957, 2048, 2048, 2048, 2048, 2052, 2048, 1999, 1886, 1825, 2048, 2044, 2041, 2048, 2048, 2054, 2048, 2048, 2054, 2048, 2048, 2040, 1783, 1746, 2047, 2048, 2057, 2048, 2048, 2048, 2040, 2048, 2016, 2048, 1872, 1947, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2021, 1877, 1983, 2055, 2044, 2048, 2057, 2048, 2048, 2057, 2048, 2054, 2048, 2056, 2054, 2052, 2048, 2051, 2048, 2048, 2048, 2041, 2048, 2056, 1827, 1904, 2033, 2048, 2055, 2048, 2048, 2048, 2057, 2048, 2040, 2048, 1958, 1808, 1933, 2056, 2055, 2052, 2013, 1929, 1742, 1849, 2034, 2056, 2048, 2047, 2048, 2057, 2034, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2030, 2057, 2057, 2041, 2048, 2023, 2051, 2048, 2044, 2048, 2048, 2054, 2056, 2054, 2041, 2048, 2055, 2055, 2048, 2048, 2039, 2048, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2049, 2050, 2057, 2046, 2048, 2048, 2042, 2056, 2048, 2048, 2048, 2048, 2049, 2043, 2048, 2048, 2057, 2041, 2024, 2048, 2046, 2057, 2048, 2048, 2048, 2032, 2048, 2048, 2048, 2048, 2057, 2046, 2057, 2048, 2048, 2048, 2057, 2046, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2047, 2057, 2048, 2042, 2048, 2048, 2046, 2048, 2048, 2048, 2044, 2048, 2056, 2048, 2048, 2048, 2057, 2056, 2048, 2048, 2048, 2048, 2026, 2048, 2048, 2048, 2039, 2046, 2056, 2054, 2048, 2057, 2048, 2048, 2057, 2047, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2055, 2048, 2048, 2048, 2048, 2048, 2042, 2048, 2052, 2048, 2045, 2048, 2048, 2048, 2037, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2048, 2057, 2055, 2054, 2056, 2056, 2048, 2048, 2056, 2045, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2030, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2049, 2056, 2048, 2052, 2048, 2048, 2045, 2043, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2027, 2048, 2048, 2048, 2048, 2048, 2052, 2048, 2048, 2026, 2057, 2055, 2034, 2048, 2056, 2048, 2048, 2048, 2055, 2048, 2054, 2053, 2048, 2048, 2048, 2057, 2048, 2050, 2048, 2055, 2033, 2048, 2056, 2040, 2048, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2052, 2048, 2048, 2048, 2056, 2047, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2056, 2042, 2048, 2056, 2055, 2048, 2048, 2048, 2048, 2048, 2056, 2057, 2048, 2048, 2055, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2053, 2054, 2054, 2057, 2048, 2057, 2048, 2051, 2055, 2047, 2048, 2053, 2048, 2048, 2034, 2048, 2057, 2048, 2057, 2055, 2057, 2048, 2056, 2045, 2049, 2048, 2048, 2042, 2047, 2048, 2048, 2055, 2052, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2051, 2055, 2048, 2057, 2048, 2048, 2034, 2048, 2056, 2048, 2056, 2048, 2048, 2048, 2055, 2057, 2048, 2048, 2048, 2039, 2048, 2057, 2043, 2048, 2048, 2057, 2048, 2048, 2057, 2043, 2046, 2048, 2045, 2048, 2048, 2048, 2057, 2048, 2056, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2025, 2048, 2054, 2055, 2030, 2048, 2048, 2048, 2048, 2048, 2040, 2056, 2048, 2049, 2050, 2048, 2048, 2048, 2057, 2046, 2048, 2052, 2048, 2048, 2055, 2048, 2052, 2048, 2048, 2053, 2053, 2048, 2048, 2052, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2053, 2055, 2048, 2041, 2048, 2052, 2048, 2048, 2055, 2048, 2050, 2057, 2054, 2048, 2057, 2048, 2055, 2048, 2057, 2048, 2048, 2049, 2051, 2048, 2037, 2048, 2048, 2048, 2048, 2042, 2048, 2048, 2050, 2057, 2057, 2055, 2048, 2048, 2053, 2048, 2048, 2048, 2053, 2054, 2057, 2053, 2048, 2056, 2054, 2049, 2057, 2049, 2056, 2020, 2048, 2056, 2054, 2057, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2054, 2048, 2048, 2046, 2052, 2040, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2048, 2046, 2048, 2048, 2042, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2057, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2051, 2057, 2056, 2054, 2048, 2048, 2056, 2048, 2057, 2056, 2055, 2048, 2048, 2048, 2057, 2043, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2057, 2048, 2048, 2057, 2054, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2048, 2049, 2048, 2057, 2057, 2056, 2048, 2057, 2048, 2040, 2048, 2048, 2051, 2048, 2048, 2057, 2048, 2053, 2055, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2024, 2054, 2048, 2039, 2048, 2046, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2039, 2048, 2048, 2052, 2055, 2048, 2048, 2057, 2056, 2048, 2057, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2054, 2054, 2052, 2056, 2048, 2048, 2053, 2048, 2046, 2056, 2057, 2057, 2020, 2048, 2048, 2040, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2054, 2048, 2044, 2056, 2056, 2048, 2048, 2048, 2048, 2057, 2055, 2057, 2048, 2042, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2045, 2057, 2047, 2052, 2048, 2050, 2056, 2048, 2054, 2048, 2034, 2048, 2048, 2056, 2055, 2048, 2048, 2048, 2055, 2048, 2057, 2049, 2048, 2056, 2056, 2046, 2048, 2054, 2057, 2049, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2051, 2041, 2048, 2048, 2049, 2053, 2047, 2048, 2056, 2055, 2043, 2048, 2048, 2054, 2048, 2040, 2050, 2048, 2048, 2028, 2057, 2048, 2038, 2048, 2057, 2048, 2048, 2048, 2057, 2056, 2056, 2048, 2053, 2048, 2037, 2057, 2041, 2043, 2048, 2057, 2048, 2048, 2041, 2048, 2048, 2039, 2048, 2048, 2048, 2048, 2057, 2050, 2054, 2052, 2022, 2041, 2048, 2046, 2048, 2048, 2048, 2048, 2046, 2041, 2052, 2057, 2045, 2056, 2048, 2045, 2048, 2048, 2048, 2043, 2048, 2048, 2049, 2054, 2048, 2057, 2041, 2055, 2048, 2048, 2057, 2042, 2056, 2057, 2048, 2048, 2048, 2057, 2049, 2048, 2048, 2057, 2056, 2048, 2048, 2057, 2048, 2050, 2048, 2048, 2048, 2045, 2050, 2057, 2049, 2057, 2057, 2048, 2048, 2016, 2057, 2054, 2044, 2048, 2048, 2050, 2049, 2044, 2048, 2048, 2048, 2046, 2048, 2057, 2048, 2056, 2048, 2048, 2048, 2045, 2048, 2048, 2048, 2048, 2048, 2029, 2057, 2048, 2048, 2048, 2047, 2055, 2048, 2048, 2037, 2048, 2048, 2046, 2048, 2048, 2014, 2057, 2048, 2048, 2048, 2047, 2049, 2048, 2048, 2056, 2048, 2048, 2048, 2041, 2048, 2048, 2057, 2048, 2048, 2038, 2046, 2048, 2048, 2048, 2045, 2042, 2048, 2048, 2048, 2048, 2056, 2057, 2046, 2057, 2056, 2057, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2051, 2057, 2048, 2048, 2047, 2057, 2054, 2048, 2048, 2054, 2052, 2048, 2048, 2051, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2055, 2045, 2048, 2048, 2043, 2056, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2051, 2048, 2046, 2042, 2048, 2048, 2057, 2037, 2048, 2048, 2057, 2050, 2054, 2056, 2047, 2048, 2048, 2056, 2053, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2049, 2048, 2057, 2054, 2048, 2048, 2046, 2048, 2057, 2048, 2057, 2050, 2048, 2057, 2052, 2048, 2051, 2039, 2049, 2048, 2048, 2048, 2048, 2047, 2048, 2057, 2048, 2050, 2037, 2057, 2048, 2048, 2042, 2048, 2048, 2048, 2048, 2055, 2038, 2048, 2057, 2048, 2048, 2057, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2046, 2048, 2053, 2033, 2054, 2048, 2056, 2048, 2053, 2048, 2048, 2048, 2057, 2048, 2048, 2054, 2048, 2042, 2048, 2048, 2027, 2056, 2057, 2049, 2053, 2048, 2055, 2055, 2056, 2048, 2048, 2048, 2050, 2052, 2052, 2048, 2056, 2048, 2056, 2055, 2048, 2048, 2048, 2048, 2051, 2048, 2056, 2057, 2048, 2048, 2056, 2056, 2053, 2057, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2057, 2048, 2048, 2031, 2048, 2057, 2048, 2048, 2053, 2056, 2048, 2048, 2033, 2048, 2048, 2020, 2057, 2048, 2048, 2048, 2057, 2054, 2057, 2057, 2057, 2048, 2048, 2048, 2048, 2053, 2048, 2057, 2043, 2046, 2057, 2035, 2026, 2053, 2044, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2057, 2055, 2048, 2048, 2039, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2042, 2057, 2053, 2056, 2057, 2048, 2057, 2019, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2047, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2048, 2048, 2056, 2057, 2048, 2048, 2048, 2048, 2049, 2057, 2048, 2040, 2048, 2056, 2051, 2048, 2048, 2048, 2057, 2035, 2057, 2048, 2048, 2046, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2051, 2048, 2048, 2056, 2055, 2045, 2047, 2048, 2048, 2056, 2057, 2048, 2056, 2048, 2057, 2048, 2048, 2048, 2045, 2048, 2048, 2048, 2052, 2048, 2048, 2056, 2048, 2041, 2048, 2051, 2048, 2048, 2048, 2057, 2048, 2048, 2056, 2044, 2048, 2048, 2057, 2048, 2048, 2049, 2057, 2048, 2048, 2048, 2053, 2057, 2044, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2054, 2057, 2056, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2050, 2042, 2054, 2057, 2048, 2052, 2046, 2047, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2055, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2052, 2048, 2047, 2048, 2048, 2044, 2048, 2049, 2057, 2048, 2048, 2048, 2053, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2057, 2045, 2048, 2056, 2052, 2053, 2048, 2043, 2047, 2048, 2048, 2048, 2048, 2051, 2055, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2052, 2055, 2048, 2051, 2056, 2048, 2048, 2048, 2057, 2056, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2023, 2048, 2050, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2053, 2055, 2048, 2048, 2054, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2055, 2048, 2030, 2039, 2057, 2048, 2051, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2054, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2049, 2043, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2055, 2047, 2057, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2055, 2056, 2033, 2044, 2048, 2052, 2055, 2056, 2048, 2048, 2048, 2048, 2056, 2048, 2049, 2053, 2057, 2054, 2044, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2057, 2055, 2056, 2051, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2056, 2056, 2055, 2040, 2056, 2048, 2048, 2048, 2052, 2048, 2048, 2048, 2054, 2057, 2036, 2048, 2048, 2057, 2048, 2048, 2053, 2048, 2048, 2056, 2048, 2057, 2050, 2048, 2057, 2049, 2056, 2048, 2055, 2044, 2049, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2052, 2056, 2053, 2057, 2053, 2025, 2055, 2051, 2053, 2048, 2022, 2055, 2052, 2048, 2038, 2051, 2048, 2045, 2048, 2048, 2048, 2048, 2048, 2057, 2054, 2048, 2056, 2051, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2053, 2043, 2055, 2048, 2057, 2057, 2048, 2048, 2048, 2049, 2048, 2050, 2054, 2055, 2038, 2055, 2048, 2052, 2048, 2048, 2057, 2048, 2056, 2053, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2055, 2048, 2048, 2048, 2057, 2048, 2041, 2048, 2049, 2048, 2048, 2048, 2054, 2043, 2040, 2057, 2055, 2048, 2057, 2041, 2049, 2048, 2054, 2056, 2048, 2048, 2048, 2051, 2052, 2054, 2048, 2057, 2035, 2048, 2055, 2053, 2052, 2020, 2056, 2048, 2048, 2043, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2057, 2048, 2048, 2048, 2049, 2056, 2048, 2046, 2048, 2052, 2048, 2048, 2048, 2052, 2048, 2057, 2048, 2048, 2051, 2057, 2048, 2048, 2048, 2057, 2057, 2053, 2036, 2052, 2053, 2048, 2057, 2048, 2048, 2051, 2052, 2043, 2051, 2048, 2048, 2048, 2048, 2048, 2045, 2048, 2048, 2057, 2022, 2048, 2048, 2043, 2053, 2051, 2055, 2051, 2048, 2048, 2048, 2056, 2040, 2053, 2057, 2048, 2048, 2052, 2052, 2054, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2042, 2057, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2052, 2056, 2048, 2051, 2057, 2048, 2047, 2048, 2057, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2057, 2031, 2045, 2057, 2052, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2051, 2048, 2057, 2019, 2048, 2048, 2040, 2048, 2048, 2048, 2047, 2057, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2051, 2057, 2050, 2048, 2048, 2048, 2048, 2048, 2047, 2048, 2056, 2048, 2050, 2039, 2043, 2048, 2057, 2048, 2048, 2048, 2048, 2045, 2048, 2048, 2048, 2048, 2054, 2057, 2048, 2048, 2044, 2057, 2048, 2048, 2048, 2056, 2048, 2043, 2048, 2048, 2048, 2042, 2057, 2048, 2050, 2048, 2057, 2047, 2053, 2048, 2048, 2048, 2048, 2039, 2048, 2048, 2051, 2057, 2056, 2055, 2048, 2057, 2043, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2057, 2050, 2048, 2045, 2056, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2045, 2048, 2052, 2048, 2048, 2049, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2057, 2046, 2048, 2048, 2054, 2041, 2046, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2056, 2046, 2048, 2048, 2048, 2055, 2048, 2057, 2055, 2048, 2051, 2041, 2048, 2052, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2045, 2048, 2048, 2025, 2048, 2052, 2048, 2048, 2048, 2020, 2048, 2048, 2049, 2057, 2048, 2048, 2048, 2048, 2052, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2041, 2045, 2053, 2052, 2050, 2039, 2048, 2048, 2047, 2057, 2048, 2048, 2054, 2057, 2057, 2056, 2048, 2046, 2048, 2048, 2048, 2053, 2054, 2048, 2057, 2048, 2048, 2045, 2057, 2048, 2048, 2048, 2036, 2048, 2048, 2054, 2048, 2048, 2048, 2056, 2048, 2048, 2056, 2057, 2056, 2048, 2053, 2048, 2048, 2047, 2048, 2048, 2037, 2048, 2049, 2048, 2048, 2055, 2056, 2048, 2048, 2049, 2048, 2048, 2043, 2048, 2048, 2048, 2054, 2057, 2048, 2048, 2048, 2044, 2048, 2057, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2049, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2053, 2048, 2044, 2051, 2044, 2048, 2048, 2048, 2057, 2056, 2055, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2054, 2048, 2057, 2048, 2048, 2048, 2048, 2056, 2048, 2044, 2048, 2054, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 1770, 1743, 1626, 2038, 2055, 2039, 2057, 2046, 2050, 2045, 2056, 2045, 2036, 2048, 2057, 2040, 2048, 1805, 1749, 1815, 2036, 2055, 2043, 1177, 190, 89, 90, 89, 373, 1949, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2048, 2048, 2056, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2032, 2048, 2048, 2048, 2051, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2052, 2048, 2048, 2057, 2047, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2042, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2056, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2040, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2031, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2052, 2048, 2048, 2051, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2054, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2046, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2050, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2053, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2052, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2049, 2048, 2048, 2048, 2048, 2057, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2023, 2048, 2048, 2047, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2040, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2047, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2053, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2041, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2044, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2055, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2046, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2025, 2048, 2048, 2048, 2048, 2048, 2040, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2057, 2048, 2048, 2041, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2051, 2048, 2048, 2048, 2056, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 1154, 1239, 2057, 2048, 1957, 1910, 1895, 1771, 1895, 1873, 1840, 1750, 1878, 1845, 1846, 1845, 1871, 1870, 1753, 1888, 1894, 1896, 1777, 1848, 1853, 1975, 1781, 1877, 1873, 1825, 1869, 1895, 1864, 1825, 1856, 1910, 1870, 1823, 1834, 1914, 1864, 1803, 1889, 1874, 1915, 1805, 1885, 1896, 1806, 1883, 1859, 1891, 1838, 1878, 1833, 1860, 1798, 1863, 1879, 1845, 1849, 1923, 1905, 1934, 1870, 1933, 1913, 1780, 1940, 1856, 1850, 1859, 1864, 1856, 1864, 1872, 1857, 1885, 1792, 1880, 1884, 1881, 1799, 1927, 1864, 1871, 1844, 1870, 1889, 1834, 1863, 1865, 1859, 1812, 1872, 1827, 1890, 1804, 1923, 1856, 1842, 1770, 1855, 1876, 1834, 1888, 1868, 1915, 1832, 1878, 1903, 1856, 1827, 1910, 1887, 1927, 1787, 1882, 1860, 1862, 1844, 1856, 1848, 1812, 1930, 1880, 1863, 1820, 1871, 1947, 1865, 1818, 1865, 1847, 1836, 1859, 1872, 1892, 1801, 1814, 1902, 1932, 1805, 1886, 1855, 1894, 1793, 1837, 1870, 1881, 1805, 1892, 1915, 1812, 1911, 1847, 1876, 1839, 1847, 1894, 1892, 1765, 1868, 1895, 1847, 1810, 1898, 1860, 1788, 1881, 1866, 1877, 1766, 1859, 1851, 1818, 1867, 1866, 1833, 1846, 1819, 1887, 1883, 1823, 1892, 1898, 1889, 1798, 1855, 1848, 1866, 1823, 1853, 1901, 1829, 1818, 1887, 1846, 1840, 1887, 1872, 1872, 1753, 1869, 1895, 1864, 1763, 1889, 1859, 1858, 1863, 1837, 1872, 1824, 1877, 1925, 1840, 1748, 1921, 1831, 1864, 1852, 1848, 1901, 1851, 1882, 1901, 1911, 1800, 1875, 1848, 1879, 1850, 1836, 1863, 1891, 1762, 1892, 1885, 1850, 1852, 1860, 1868, 1851, 1843, 1848, 1891, 1784, 1891, 1899, 1854, 1775, 1838, 1832, 1902, 1872, 1882, 1912, 1778, 1902, 1867, 1847, 1866, 1891, 1897, 1869, 1821, 1921, 1872, 1813, 1883, 1889, 1863, 1838, 1861, 1884, 1845, 1789, 1869, 1905, 1844, 1787, 1906, 1878, 1868, 1814, 1849, 1851, 1803, 1872, 1855, 1880, 1799, 1914, 1854, 1851, 1802, 1866, 1908, 1827, 1841, 1899, 1831, 1828, 1922, 1887, 1878, 1784, 1847, 1896, 1880, 1799, 1890, 1849, 1827, 1855, 1930, 1868, 1860, 1896, 1897, 1909, 1778, 1874, 1866, 1883, 1827, 1867, 1856, 1844, 1831, 1824, 1890, 1804, 1873, 1839, 1855, 1829, 1957, 1861, 1905, 1764, 1865, 1892, 1828, 1852, 1870, 1862, 1858, 1842, 1713, 1595, 2048, 935, 89, 92, 100, 90, 89, 92, 89, 99, 89, 87, 89, 89, 98, 93, 89, 1441, 1980, 1466, 613, 1430, 1403, 1698, 1394, 984, 1211, 840, 1021, 1061, 1287, 1147, 1249, 1165, 1104, 1127, 1106, 1094, 1082, 1077, 925, 1040, 1236, 1169, 1120, 728, 1047, 1061, 952, 1042, 1176, 1275, 1299, 1143, 1200, 1135, 1200, 1129, 1050, 1097, 944, 994, 1227, 1197, 896, 1098, 1107, 812, 1009, 1141, 1293, 1296, 1225, 1086, 1339, 1193, 1210, 1097, 1286, 1169, 1241, 1321, 1222, 1113, 1129, 1262, 1054, 1183, 1299, 1187, 304 ],
          "successes": [ 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
        };
        compressedData["data"] = byteArray;
        assert(typeof Module["LZ4"] === "object", "LZ4 not present - was your app build with -sLZ4?");
        Module["LZ4"].loadPackage({
          "metadata": metadata,
          "compressedData": compressedData
        }, true);
        Module["removeRunDependency"]("datafile_f22_raptor.data");
      }
      Module["addRunDependency"]("datafile_f22_raptor.data");
      Module["preloadResults"] ??= {};
      Module["preloadResults"][PACKAGE_NAME] = {
        fromCache: false
      };
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    }
    if (Module["calledRun"]) {
      runWithFS(Module);
    } else {
      (Module["preRun"] ??= []).push(runWithFS);
    }
  }
  loadPackage({
    "files": [ {
      "filename": "/assets/sounds/collision.mp3",
      "start": 0,
      "end": 29257,
      "audio": 1
    }, {
      "filename": "/assets/sounds/engine.mp3",
      "start": 29257,
      "end": 350293,
      "audio": 1
    }, {
      "filename": "/assets/sounds/game-over.mp3",
      "start": 350293,
      "end": 410197,
      "audio": 1
    }, {
      "filename": "/assets/sounds/music/0.mp3",
      "start": 410197,
      "end": 4826490,
      "audio": 1
    }, {
      "filename": "/assets/sounds/music/1.mp3",
      "start": 4826490,
      "end": 8929941,
      "audio": 1
    }, {
      "filename": "/assets/sounds/music/2.mp3",
      "start": 8929941,
      "end": 11894244,
      "audio": 1
    }, {
      "filename": "/assets/sounds/music/3.mp3",
      "start": 11894244,
      "end": 14956977,
      "audio": 1
    }, {
      "filename": "/assets/sounds/music/4.mp3",
      "start": 14956977,
      "end": 17666116,
      "audio": 1
    }, {
      "filename": "/assets/sounds/music/5.mp3",
      "start": 17666116,
      "end": 22538821,
      "audio": 1
    }, {
      "filename": "/assets/sounds/music/6.mp3",
      "start": 22538821,
      "end": 25686190,
      "audio": 1
    }, {
      "filename": "/assets/sounds/soundtrack.mp3",
      "start": 25686190,
      "end": 26439907,
      "audio": 1
    }, {
      "filename": "/assets/vt323.ttf",
      "start": 26439907,
      "end": 26589595
    } ],
    "remote_package_size": 26205028
  });
})();

// end include: /tmp/tmp8il73z81.js
// include: /tmp/tmp1v6a9c0q.js
// All the pre-js content up to here must remain later on, we need to run
// it.
if (Module["$ww"] || (typeof ENVIRONMENT_IS_PTHREAD != "undefined" && ENVIRONMENT_IS_PTHREAD)) Module["preRun"] = [];

var necessaryPreJSTasks = Module["preRun"].slice();

// end include: /tmp/tmp1v6a9c0q.js
// include: /tmp/tmpdlp1rwwq.js
if (!Module["preRun"]) throw "Module.preRun should exist because file support used it; did a pre-js delete it?";

necessaryPreJSTasks.forEach(task => {
  if (Module["preRun"].indexOf(task) < 0) throw "All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?";
});

// end include: /tmp/tmpdlp1rwwq.js
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {
  ...Module
};

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = (status, toThrow) => {
  throw toThrow;
};

// In MODULARIZE mode _scriptName needs to be captured already at the very top of the page immediately when the page is parsed, so it is generated there
// before the page load. In non-MODULARIZE modes generate it here.
var _scriptName = (typeof document != "undefined") ? document.currentScript?.src : undefined;

if (ENVIRONMENT_IS_NODE) {
  _scriptName = __filename;
} else if (ENVIRONMENT_IS_WORKER) {
  _scriptName = self.location.href;
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = "";

function locateFile(path) {
  if (Module["locateFile"]) {
    return Module["locateFile"](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == "undefined" || !process.release || process.release.name !== "node") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split(".").slice(0, 3);
  numericVersion = (numericVersion[0] * 1e4) + (numericVersion[1] * 100) + (numericVersion[2].split("-")[0] * 1);
  var minVersion = 160400;
  if (numericVersion < 160400) {
    throw new Error("This emscripten-generated code requires node v16.04.4.0 (detected v" + nodeVersion + ")");
  }
  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require("fs");
  var nodePath = require("path");
  scriptDirectory = __dirname + "/";
  // include: node_shell_read.js
  readBinary = filename => {
    // We need to re-wrap `file://` strings to URLs.
    filename = isFileURI(filename) ? new URL(filename) : filename;
    var ret = fs.readFileSync(filename);
    assert(Buffer.isBuffer(ret));
    return ret;
  };
  readAsync = async (filename, binary = true) => {
    // See the comment in the `readBinary` function.
    filename = isFileURI(filename) ? new URL(filename) : filename;
    var ret = fs.readFileSync(filename, binary ? undefined : "utf8");
    assert(binary ? Buffer.isBuffer(ret) : typeof ret == "string");
    return ret;
  };
  // end include: node_shell_read.js
  if (!Module["thisProgram"] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, "/");
  }
  arguments_ = process.argv.slice(2);
  if (typeof module != "undefined") {
    module["exports"] = Module;
  }
  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };
} else if (ENVIRONMENT_IS_SHELL) {
  if ((typeof process == "object" && typeof require === "function") || typeof window == "object" || typeof WorkerGlobalScope != "undefined") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
} else // Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) {
    // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != "undefined" && document.currentScript) {
    // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith("blob:")) {
    scriptDirectory = "";
  } else {
    scriptDirectory = scriptDirectory.slice(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
  }
  if (!(typeof window == "object" || typeof WorkerGlobalScope != "undefined")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  if (!ENVIRONMENT_IS_NODE) {
    // include: web_or_worker_shell_read.js
    if (ENVIRONMENT_IS_WORKER) {
      readBinary = url => {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", url, false);
        xhr.responseType = "arraybuffer";
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */ (xhr.response));
      };
    }
    readAsync = async url => {
      // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
      // See https://github.com/github/fetch/pull/92#issuecomment-140665932
      // Cordova or Electron apps are typically loaded from a file:// url.
      // So use XHR on webview if URL is a file URL.
      if (isFileURI(url)) {
        return new Promise((resolve, reject) => {
          var xhr = new XMLHttpRequest;
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = () => {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
              // file URLs can return 0
              resolve(xhr.response);
              return;
            }
            reject(xhr.status);
          };
          xhr.onerror = reject;
          xhr.send(null);
        });
      }
      var response = await fetch(url, {
        credentials: "same-origin"
      });
      if (response.ok) {
        return response.arrayBuffer();
      }
      throw new Error(response.status + " : " + response.url);
    };
  }
} else if (!ENVIRONMENT_IS_AUDIO_WORKLET) {
  throw new Error("environment detection error");
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// Normally just binding console.log/console.error here works fine, but
// under node (with workers) we see missing/out-of-order messages so route
// directly to stdout and stderr.
// See https://github.com/emscripten-core/emscripten/issues/14804
var defaultPrint = console.log.bind(console);

var defaultPrintErr = console.error.bind(console);

if (ENVIRONMENT_IS_NODE) {
  defaultPrint = (...args) => fs.writeSync(1, args.join(" ") + "\n");
  defaultPrintErr = (...args) => fs.writeSync(2, args.join(" ") + "\n");
}

var out = Module["print"] || defaultPrint;

var err = Module["printErr"] || defaultPrintErr;

// Merge back in the overrides
Object.assign(Module, moduleOverrides);

// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;

checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module["arguments"]) arguments_ = Module["arguments"];

legacyModuleProp("arguments", "arguments_");

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

legacyModuleProp("thisProgram", "thisProgram");

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module["memoryInitializerPrefixURL"] == "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["pthreadMainPrefixURL"] == "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["cdInitializerPrefixURL"] == "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["filePackagePrefixURL"] == "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["read"] == "undefined", "Module.read option was removed");

assert(typeof Module["readAsync"] == "undefined", "Module.readAsync option was removed (modify readAsync in JS)");

assert(typeof Module["readBinary"] == "undefined", "Module.readBinary option was removed (modify readBinary in JS)");

assert(typeof Module["setWindowTitle"] == "undefined", "Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)");

assert(typeof Module["TOTAL_MEMORY"] == "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");

legacyModuleProp("asm", "wasmExports");

legacyModuleProp("readAsync", "readAsync");

legacyModuleProp("readBinary", "readBinary");

legacyModuleProp("setWindowTitle", "setWindowTitle");

var IDBFS = "IDBFS is no longer included by default; build with -lidbfs.js";

var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";

var WORKERFS = "WORKERFS is no longer included by default; build with -lworkerfs.js";

var FETCHFS = "FETCHFS is no longer included by default; build with -lfetchfs.js";

var ICASEFS = "ICASEFS is no longer included by default; build with -licasefs.js";

var JSFILEFS = "JSFILEFS is no longer included by default; build with -ljsfilefs.js";

var OPFS = "OPFS is no longer included by default; build with -lopfs.js";

var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";

assert(ENVIRONMENT_IS_AUDIO_WORKLET || ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER || ENVIRONMENT_IS_NODE, "Pthreads do not work in this environment yet (need Web Workers, or an alternative to them)");

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.");

// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===
// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
var wasmBinary = Module["wasmBinary"];

legacyModuleProp("wasmBinary", "wasmBinary");

if (typeof WebAssembly != "object") {
  err("no native wasm support detected");
}

// Wasm globals
var wasmMemory;

// For sending to workers.
var wasmModule;

//========================================
// Runtime essentials
//========================================
// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */ function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed" + (text ? ": " + text : ""));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
// Memory management
var HEAP, /** @type {!Int8Array} */ HEAP8, /** @type {!Uint8Array} */ HEAPU8, /** @type {!Int16Array} */ HEAP16, /** @type {!Uint16Array} */ HEAPU16, /** @type {!Int32Array} */ HEAP32, /** @type {!Uint32Array} */ HEAPU32, /** @type {!Float32Array} */ HEAPF32, /* BigInt64Array type is not correctly defined in closure
/** not-@type {!BigInt64Array} */ HEAP64, /* BigUint64Array type is not correctly defined in closure
/** not-t@type {!BigUint64Array} */ HEAPU64, /** @type {!Float64Array} */ HEAPF64;

var runtimeInitialized = false;

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */ var isFileURI = filename => filename.startsWith("file://");

// include: runtime_shared.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  GROWABLE_HEAP_U32()[((max) >> 2)] = 34821223;
  GROWABLE_HEAP_U32()[(((max) + (4)) >> 2)] = 2310721022;
  // Also test the global address 0 for integrity.
  GROWABLE_HEAP_U32()[((0) >> 2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = GROWABLE_HEAP_U32()[((max) >> 2)];
  var cookie2 = GROWABLE_HEAP_U32()[(((max) + (4)) >> 2)];
  if (cookie1 != 34821223 || cookie2 != 2310721022) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (GROWABLE_HEAP_U32()[((0) >> 2)] != 1668509029) {
    abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
  }
}

// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 25459;
  if (h8[0] !== 115 || h8[1] !== 99) throw "Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)";
})();

if (Module["ENVIRONMENT"]) {
  throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");
}

function legacyModuleProp(prop, newName, incoming = true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? " (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)" : "";
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);
      }
    });
  }
}

function consumedModuleProp(prop) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      set() {
        abort(`Attempt to set \`Module.${prop}\` after it has already been processed.  This can happen, for example, when code is injected via '--post-js' rather than '--pre-js'`);
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === "FS_createPath" || name === "FS_createDataFile" || name === "FS_createPreloadedFile" || name === "FS_unlink" || name === "addRunDependency" || // The old FS has some functionality that WasmFS lacks.
  name === "FS_createLazyFile" || name === "FS_createDevice" || name === "removeRunDependency";
}

/**
 * Intercept access to a global symbol.  This enables us to give informative
 * warnings/errors when folks attempt to use symbols they did not include in
 * their build, or no symbols that no longer exist.
 */ function hookGlobalSymbolAccess(sym, func) {
  if (typeof globalThis != "undefined" && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        func();
        return undefined;
      }
    });
  }
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
  });
}

missingGlobal("buffer", "Please use HEAP8.buffer or wasmMemory.buffer");

missingGlobal("asm", "Please use wasmExports instead");

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith("_")) {
      librarySymbol = "$" + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
    }
    warnOnce(msg);
  });
  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (ENVIRONMENT_IS_PTHREAD) {
    return;
  }
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
        }
        abort(msg);
      }
    });
  }
}

var runtimeDebug = true;

// Switch to false at runtime to disable logging at the right times
// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  if (!runtimeDebug && typeof runtimeDebug != "undefined") return;
  // Avoid using the console for debugging in multi-threaded node applications
  // See https://github.com/emscripten-core/emscripten/issues/14804
  if (ENVIRONMENT_IS_NODE && fs) {
    fs.writeSync(2, args.join(" ") + "\n");
  } else // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}

// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: growableHeap.js
// Support for growable heap + pthreads, where the buffer may change, so JS views
// must be updated.
function GROWABLE_HEAP_I8() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAP8;
}

function GROWABLE_HEAP_U8() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPU8;
}

function GROWABLE_HEAP_I16() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAP16;
}

function GROWABLE_HEAP_U16() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPU16;
}

function GROWABLE_HEAP_I32() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAP32;
}

function GROWABLE_HEAP_U32() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPU32;
}

function GROWABLE_HEAP_F32() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPF32;
}

function GROWABLE_HEAP_F64() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPF64;
}

// end include: growableHeap.js
// include: runtime_pthread.js
// Pthread Web Worker handling code.
// This code runs only on pthread web workers and handles pthread setup
// and communication with the main thread via postMessage.
// Unique ID of the current pthread worker (zero on non-pthread-workers
// including the main thread).
var workerID = 0;

if (ENVIRONMENT_IS_PTHREAD) {
  var wasmModuleReceived;
  // Node.js support
  if (ENVIRONMENT_IS_NODE) {
    // Create as web-worker-like an environment as we can.
    var parentPort = worker_threads["parentPort"];
    parentPort.on("message", msg => onmessage({
      data: msg
    }));
    Object.assign(globalThis, {
      self: global,
      postMessage: msg => parentPort.postMessage(msg)
    });
  }
  // Thread-local guard variable for one-time init of the JS state
  var initializedJS = false;
  function threadPrintErr(...args) {
    // See https://github.com/emscripten-core/emscripten/issues/14804
    if (ENVIRONMENT_IS_NODE) {
      fs.writeSync(2, args.join(" ") + "\n");
      return;
    }
    console.error(...args);
  }
  if (!Module["printErr"]) err = threadPrintErr;
  // Turn unhandled rejected promises into errors so that the main thread will be
  // notified about them.
  self.onunhandledrejection = e => {
    throw e.reason || e;
  };
  function handleMessage(e) {
    try {
      var msgData = e["data"];
      //dbg('msgData: ' + Object.keys(msgData));
      var cmd = msgData.cmd;
      if (cmd === "load") {
        // Preload command that is called once per worker to parse and load the Emscripten code.
        workerID = msgData.workerID;
        // Until we initialize the runtime, queue up any further incoming messages.
        let messageQueue = [];
        self.onmessage = e => messageQueue.push(e);
        // And add a callback for when the runtime is initialized.
        self.startWorker = instance => {
          // Notify the main thread that this thread has loaded.
          postMessage({
            cmd: "loaded"
          });
          // Process any messages that were queued before the thread was ready.
          for (let msg of messageQueue) {
            handleMessage(msg);
          }
          // Restore the real message handler.
          self.onmessage = handleMessage;
        };
        // Use `const` here to ensure that the variable is scoped only to
        // that iteration, allowing safe reference from a closure.
        for (const handler of msgData.handlers) {
          // The the main module has a handler for a certain even, but no
          // handler exists on the pthread worker, then proxy that handler
          // back to the main thread.
          if (!Module[handler] || Module[handler].proxy) {
            Module[handler] = (...args) => {
              postMessage({
                cmd: "callHandler",
                handler,
                args
              });
            };
            // Rebind the out / err handlers if needed
            if (handler == "print") out = Module[handler];
            if (handler == "printErr") err = Module[handler];
          }
        }
        wasmMemory = msgData.wasmMemory;
        updateMemoryViews();
        wasmModuleReceived(msgData.wasmModule);
      } else if (cmd === "run") {
        assert(msgData.pthread_ptr);
        // Call inside JS module to set up the stack frame for this pthread in JS module scope.
        // This needs to be the first thing that we do, as we cannot call to any C/C++ functions
        // until the thread stack is initialized.
        establishStackSpace(msgData.pthread_ptr);
        // Pass the thread address to wasm to store it for fast access.
        __emscripten_thread_init(msgData.pthread_ptr, /*is_main=*/ 0, /*is_runtime=*/ 0, /*can_block=*/ 1, 0, 0);
        PThread.threadInitTLS();
        // Await mailbox notifications with `Atomics.waitAsync` so we can start
        // using the fast `Atomics.notify` notification path.
        __emscripten_thread_mailbox_await(msgData.pthread_ptr);
        if (!initializedJS) {
          initializedJS = true;
        }
        try {
          invokeEntryPoint(msgData.start_routine, msgData.arg);
        } catch (ex) {
          if (ex != "unwind") {
            // The pthread "crashed".  Do not call `_emscripten_thread_exit` (which
            // would make this thread joinable).  Instead, re-throw the exception
            // and let the top level handler propagate it back to the main thread.
            throw ex;
          }
        }
      } else if (msgData.target === "setimmediate") {} else if (cmd === "checkMailbox") {
        if (initializedJS) {
          checkMailbox();
        }
      } else if (cmd) {
        // The received message looks like something that should be handled by this message
        // handler, (since there is a cmd field present), but is not one of the
        // recognized commands:
        err(`worker: received unknown command ${cmd}`);
        err(msgData);
      }
    } catch (ex) {
      err(`worker: onmessage() captured an uncaught exception: ${ex}`);
      if (ex?.stack) err(ex.stack);
      __emscripten_thread_crashed();
      throw ex;
    }
  }
  self.onmessage = handleMessage;
}

// ENVIRONMENT_IS_PTHREAD
// end include: runtime_pthread.js
function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module["HEAP8"] = HEAP8 = new Int8Array(b);
  Module["HEAP16"] = HEAP16 = new Int16Array(b);
  Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
  Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);
  Module["HEAP32"] = HEAP32 = new Int32Array(b);
  Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);
  Module["HEAPF32"] = HEAPF32 = new Float32Array(b);
  Module["HEAPF64"] = HEAPF64 = new Float64Array(b);
  Module["HEAP64"] = HEAP64 = new BigInt64Array(b);
  Module["HEAPU64"] = HEAPU64 = new BigUint64Array(b);
}

// end include: runtime_shared.js
assert(!Module["STACK_SIZE"], "STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time");

assert(typeof Int32Array != "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined, "JS engine does not provide full typed array support");

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js
// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
if (!ENVIRONMENT_IS_PTHREAD) {
  if (Module["wasmMemory"]) {
    wasmMemory = Module["wasmMemory"];
  } else {
    var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
    legacyModuleProp("INITIAL_MEMORY", "INITIAL_MEMORY");
    assert(INITIAL_MEMORY >= 131072, "INITIAL_MEMORY should be larger than STACK_SIZE, was " + INITIAL_MEMORY + "! (STACK_SIZE=" + 131072 + ")");
    /** @suppress {checkTypes} */ wasmMemory = new WebAssembly.Memory({
      "initial": INITIAL_MEMORY / 65536,
      // In theory we should not need to emit the maximum if we want "unlimited"
      // or 4GB of memory, but VMs error on that atm, see
      // https://github.com/emscripten-core/emscripten/issues/14130
      // And in the pthreads case we definitely need to emit a maximum. So
      // always emit one.
      "maximum": 32768,
      "shared": true
    });
  }
  updateMemoryViews();
}

// end include: runtime_init_memory.js
function preRun() {
  assert(!ENVIRONMENT_IS_PTHREAD);
  // PThreads reuse the runtime from the main thread.
  if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
    while (Module["preRun"].length) {
      addOnPreRun(Module["preRun"].shift());
    }
  }
  consumedModuleProp("preRun");
  callRuntimeCallbacks(onPreRuns);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (ENVIRONMENT_IS_WASM_WORKER) return _wasmWorkerInitializeRuntime();
  if (ENVIRONMENT_IS_PTHREAD) return startWorker(Module);
  checkStackCookie();
  if (!Module["noFSInit"] && !FS.initialized) FS.init();
  TTY.init();
  wasmExports["__wasm_call_ctors"]();
  FS.ignorePermissions = false;
}

function preMain() {
  checkStackCookie();
}

function postRun() {
  checkStackCookie();
  if (ENVIRONMENT_IS_PTHREAD) return;
  // PThreads reuse the runtime from the main thread.
  if (Module["postRun"]) {
    if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
    while (Module["postRun"].length) {
      addOnPostRun(Module["postRun"].shift());
    }
  }
  consumedModuleProp("postRun");
  callRuntimeCallbacks(onPostRuns);
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;

var dependenciesFulfilled = null;

// overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

var runDependencyWatcher = null;

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;
  Module["monitorRunDependencies"]?.(runDependencies);
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != "undefined") {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err("still waiting on run dependencies:");
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err("(end of list)");
        }
      }, 1e4);
    }
  } else {
    err("warning: run dependency added without ID");
  }
}

function removeRunDependency(id) {
  runDependencies--;
  Module["monitorRunDependencies"]?.(runDependencies);
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err("warning: run dependency removed without ID");
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback();
    }
  }
}

/** @param {string|number=} what */ function abort(what) {
  Module["onAbort"]?.(what);
  what = "Aborted(" + what + ")";
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);
  ABORT = true;
  if (what.indexOf("RuntimeError: unreachable") >= 0) {
    what += '. "unreachable" may be due to ASYNCIFY_STACK_SIZE not being large enough (try increasing it)';
  }
  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.
  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */ var e = new WebAssembly.RuntimeError(what);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

var wasmBinaryFile;

function findWasmBinary() {
  return locateFile("f22_raptor.wasm");
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw "both async and sync fetching of the wasm failed";
}

async function getWasmBinary(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary) {
    // Fetch the binary using readAsync
    try {
      var response = await readAsync(binaryFile);
      return new Uint8Array(response);
    } catch {}
  }
  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);
    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary && typeof WebAssembly.instantiateStreaming == "function" && !isFileURI(binaryFile) && !ENVIRONMENT_IS_NODE) {
    try {
      var response = fetch(binaryFile, {
        credentials: "same-origin"
      });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err("falling back to ArrayBuffer instantiation");
    }
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  assignWasmImports();
  // instrumenting imports is used in asyncify in two ways: to add assertions
  // that check for proper import use, and for ASYNCIFY=2 we use them to set up
  // the Promise API on the import side.
  // In pthreads builds getWasmImports is called more than once but we only
  // and the instrument the imports once.
  if (!wasmImports.__instrumented) {
    wasmImports.__instrumented = true;
    Asyncify.instrumentWasmImports(wasmImports);
  }
  // prepare imports
  return {
    "env": wasmImports,
    "wasi_snapshot_preview1": wasmImports
  };
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/ function receiveInstance(instance, module) {
    wasmExports = instance.exports;
    wasmExports = Asyncify.instrumentWasmExports(wasmExports);
    registerTLSInit(wasmExports["_emscripten_tls_init"]);
    wasmTable = wasmExports["__indirect_function_table"];
    Module["wasmTable"] = wasmTable;
    assert(wasmTable, "table not found in wasm exports");
    // We now have the Wasm module loaded up, keep a reference to the compiled module so we can post it to the workers.
    wasmModule = module;
    removeRunDependency("wasm-instantiate");
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency("wasm-instantiate");
  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
    trueModule = null;
    return receiveInstance(result["instance"], result["module"]);
  }
  var info = getWasmImports();
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module["instantiateWasm"]) {
    return new Promise((resolve, reject) => {
      try {
        Module["instantiateWasm"](info, (mod, inst) => {
          receiveInstance(mod, inst);
          resolve(mod.exports);
        });
      } catch (e) {
        err(`Module.instantiateWasm callback failed with error: ${e}`);
        reject(e);
      }
    });
  }
  if (ENVIRONMENT_IS_PTHREAD) {
    return new Promise(resolve => {
      wasmModuleReceived = module => {
        // Instantiate from the module posted from the main thread.
        // We can just use sync instantiation in the worker.
        var instance = new WebAssembly.Instance(module, getWasmImports());
        resolve(receiveInstance(instance, module));
      };
    });
  }
  wasmBinaryFile ??= findWasmBinary();
  var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
  var exports = receiveInstantiationResult(result);
  return exports;
}

// end include: preamble.js
// Begin JS library code
var handleException = e => {
  // Certain exception types we do not treat as errors since they are used for
  // internal control flow.
  // 1. ExitStatus, which is thrown by exit()
  // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
  //    that wish to return to JS event loop.
  if (e instanceof ExitStatus || e == "unwind") {
    return EXITSTATUS;
  }
  checkStackCookie();
  if (e instanceof WebAssembly.RuntimeError) {
    if (_emscripten_stack_get_current() <= 0) {
      err("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 131072)");
    }
  }
  quit_(1, e);
};

class ExitStatus {
  name="ExitStatus";
  constructor(status) {
    this.message = `Program terminated with exit(${status})`;
    this.status = status;
  }
}

var runtimeKeepaliveCounter = 0;

var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;

var stackSave = () => _emscripten_stack_get_current();

var stackRestore = val => __emscripten_stack_restore(val);

var stackAlloc = sz => __emscripten_stack_alloc(sz);

var terminateWorker = worker => {
  worker.terminate();
  // terminate() can be asynchronous, so in theory the worker can continue
  // to run for some amount of time after termination.  However from our POV
  // the worker now dead and we don't want to hear from it again, so we stub
  // out its message handler here.  This avoids having to check in each of
  // the onmessage handlers if the message was coming from valid worker.
  worker.onmessage = e => {
    var cmd = e["data"].cmd;
    err(`received "${cmd}" command from terminated worker: ${worker.workerID}`);
  };
};

var cleanupThread = pthread_ptr => {
  assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! cleanupThread() can only ever be called from main application thread!");
  assert(pthread_ptr, "Internal Error! Null pthread_ptr in cleanupThread!");
  var worker = PThread.pthreads[pthread_ptr];
  assert(worker);
  PThread.returnWorkerToPool(worker);
};

var callRuntimeCallbacks = callbacks => {
  while (callbacks.length > 0) {
    // Pass the module as the first argument.
    callbacks.shift()(Module);
  }
};

var onPreRuns = [];

var addOnPreRun = cb => onPreRuns.unshift(cb);

var spawnThread = threadParams => {
  assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! spawnThread() can only ever be called from main application thread!");
  assert(threadParams.pthread_ptr, "Internal error, no pthread ptr!");
  var worker = PThread.getNewWorker();
  if (!worker) {
    // No available workers in the PThread pool.
    return 6;
  }
  assert(!worker.pthread_ptr, "Internal error!");
  PThread.runningWorkers.push(worker);
  // Add to pthreads map
  PThread.pthreads[threadParams.pthread_ptr] = worker;
  worker.pthread_ptr = threadParams.pthread_ptr;
  var msg = {
    cmd: "run",
    start_routine: threadParams.startRoutine,
    arg: threadParams.arg,
    pthread_ptr: threadParams.pthread_ptr
  };
  if (ENVIRONMENT_IS_NODE) {
    // Mark worker as weakly referenced once we start executing a pthread,
    // so that its existence does not prevent Node.js from exiting.  This
    // has no effect if the worker is already weakly referenced (e.g. if
    // this worker was previously idle/unused).
    worker.unref();
  }
  // Ask the worker to start executing its pthread entry point function.
  worker.postMessage(msg, threadParams.transferList);
  return 0;
};

var ptrToString = ptr => {
  assert(typeof ptr === "number");
  // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
  ptr >>>= 0;
  return "0x" + ptr.toString(16).padStart(8, "0");
};

var PThread = {
  unusedWorkers: [],
  runningWorkers: [],
  tlsInitFunctions: [],
  pthreads: {},
  nextWorkerID: 1,
  debugInit() {
    function pthreadLogPrefix() {
      var t = 0;
      if (runtimeInitialized && typeof _pthread_self != "undefined") {
        t = _pthread_self();
      }
      return `w:${workerID},t:${ptrToString(t)}: `;
    }
    // Prefix all err()/dbg() messages with the calling thread ID.
    var origDbg = dbg;
    dbg = (...args) => origDbg(pthreadLogPrefix() + args.join(" "));
  },
  init() {
    PThread.debugInit();
    if ((!(ENVIRONMENT_IS_PTHREAD || ENVIRONMENT_IS_WASM_WORKER))) {
      PThread.initMainThread();
    }
  },
  initMainThread() {
    // MINIMAL_RUNTIME takes care of calling loadWasmModuleToAllWorkers
    // in postamble_minimal.js
    addOnPreRun(() => {
      addRunDependency("loading-workers");
      PThread.loadWasmModuleToAllWorkers(() => removeRunDependency("loading-workers"));
    });
  },
  terminateAllThreads: () => {
    assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! terminateAllThreads() can only ever be called from main application thread!");
    // Attempt to kill all workers.  Sadly (at least on the web) there is no
    // way to terminate a worker synchronously, or to be notified when a
    // worker in actually terminated.  This means there is some risk that
    // pthreads will continue to be executing after `worker.terminate` has
    // returned.  For this reason, we don't call `returnWorkerToPool` here or
    // free the underlying pthread data structures.
    for (var worker of PThread.runningWorkers) {
      terminateWorker(worker);
    }
    for (var worker of PThread.unusedWorkers) {
      terminateWorker(worker);
    }
    PThread.unusedWorkers = [];
    PThread.runningWorkers = [];
    PThread.pthreads = {};
  },
  returnWorkerToPool: worker => {
    // We don't want to run main thread queued calls here, since we are doing
    // some operations that leave the worker queue in an invalid state until
    // we are completely done (it would be bad if free() ends up calling a
    // queued pthread_create which looks at the global data structures we are
    // modifying). To achieve that, defer the free() til the very end, when
    // we are all done.
    var pthread_ptr = worker.pthread_ptr;
    delete PThread.pthreads[pthread_ptr];
    // Note: worker is intentionally not terminated so the pool can
    // dynamically grow.
    PThread.unusedWorkers.push(worker);
    PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);
    // Not a running Worker anymore
    // Detach the worker from the pthread object, and return it to the
    // worker pool as an unused worker.
    worker.pthread_ptr = 0;
    // Finally, free the underlying (and now-unused) pthread structure in
    // linear memory.
    __emscripten_thread_free_data(pthread_ptr);
  },
  threadInitTLS() {
    // Call thread init functions (these are the _emscripten_tls_init for each
    // module loaded.
    PThread.tlsInitFunctions.forEach(f => f());
  },
  loadWasmModuleToWorker: worker => new Promise(onFinishedLoading => {
    worker.onmessage = e => {
      var d = e["data"];
      var cmd = d.cmd;
      // If this message is intended to a recipient that is not the main
      // thread, forward it to the target thread.
      if (d.targetThread && d.targetThread != _pthread_self()) {
        var targetWorker = PThread.pthreads[d.targetThread];
        if (targetWorker) {
          targetWorker.postMessage(d, d.transferList);
        } else {
          err(`Internal error! Worker sent a message "${cmd}" to target pthread ${d.targetThread}, but that thread no longer exists!`);
        }
        return;
      }
      if (cmd === "checkMailbox") {
        checkMailbox();
      } else if (cmd === "spawnThread") {
        spawnThread(d);
      } else if (cmd === "cleanupThread") {
        cleanupThread(d.thread);
      } else if (cmd === "loaded") {
        worker.loaded = true;
        onFinishedLoading(worker);
      } else if (d.target === "setimmediate") {
        // Worker wants to postMessage() to itself to implement setImmediate()
        // emulation.
        worker.postMessage(d);
      } else if (cmd === "callHandler") {
        Module[d.handler](...d.args);
      } else if (cmd) {
        // The received message looks like something that should be handled by this message
        // handler, (since there is a e.data.cmd field present), but is not one of the
        // recognized commands:
        err(`worker sent an unknown command ${cmd}`);
      }
    };
    worker.onerror = e => {
      var message = "worker sent an error!";
      if (worker.pthread_ptr) {
        message = `Pthread ${ptrToString(worker.pthread_ptr)} sent an error!`;
      }
      err(`${message} ${e.filename}:${e.lineno}: ${e.message}`);
      throw e;
    };
    if (ENVIRONMENT_IS_NODE) {
      worker.on("message", data => worker.onmessage({
        data
      }));
      worker.on("error", e => worker.onerror(e));
    }
    assert(wasmMemory instanceof WebAssembly.Memory, "WebAssembly memory should have been loaded by now!");
    assert(wasmModule instanceof WebAssembly.Module, "WebAssembly Module should have been loaded by now!");
    // When running on a pthread, none of the incoming parameters on the module
    // object are present. Proxy known handlers back to the main thread if specified.
    var handlers = [];
    var knownHandlers = [ "onExit", "onAbort", "print", "printErr" ];
    for (var handler of knownHandlers) {
      if (Module.propertyIsEnumerable(handler)) {
        handlers.push(handler);
      }
    }
    // Ask the new worker to load up the Emscripten-compiled page. This is a heavy operation.
    worker.postMessage({
      cmd: "load",
      handlers,
      wasmMemory,
      wasmModule,
      "workerID": worker.workerID
    });
  }),
  loadWasmModuleToAllWorkers(onMaybeReady) {
    onMaybeReady();
  },
  allocateUnusedWorker() {
    var worker;
    var pthreadMainJs = _scriptName;
    // We can't use makeModuleReceiveWithVar here since we want to also
    // call URL.createObjectURL on the mainScriptUrlOrBlob.
    if (Module["mainScriptUrlOrBlob"]) {
      pthreadMainJs = Module["mainScriptUrlOrBlob"];
      if (typeof pthreadMainJs != "string") {
        pthreadMainJs = URL.createObjectURL(pthreadMainJs);
      }
    }
    worker = new Worker(pthreadMainJs, {
      // This is the way that we signal to the node worker that it is hosting
      // a pthread.
      "workerData": "em-pthread",
      // This is the way that we signal to the Web Worker that it is hosting
      // a pthread.
      "name": "em-pthread-" + PThread.nextWorkerID
    });
    worker.workerID = PThread.nextWorkerID++;
    PThread.unusedWorkers.push(worker);
  },
  getNewWorker() {
    if (PThread.unusedWorkers.length == 0) {
      // PTHREAD_POOL_SIZE_STRICT should show a warning and, if set to level `2`, return from the function.
      // However, if we're in Node.js, then we can create new workers on the fly and PTHREAD_POOL_SIZE_STRICT
      // should be ignored altogether.
      if (!ENVIRONMENT_IS_NODE) {
        err("Tried to spawn a new thread, but the thread pool is exhausted.\n" + "This might result in a deadlock unless some threads eventually exit or the code explicitly breaks out to the event loop.\n" + "If you want to increase the pool size, use setting `-sPTHREAD_POOL_SIZE=...`." + "\nIf you want to throw an explicit error instead of the risk of deadlocking in those cases, use setting `-sPTHREAD_POOL_SIZE_STRICT=2`.");
      }
      PThread.allocateUnusedWorker();
      PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0]);
    }
    return PThread.unusedWorkers.pop();
  }
};

/** @type{function(number, (number|boolean), ...number)} */ var proxyToMainThread = (funcIndex, emAsmAddr, sync, ...callArgs) => {
  // EM_ASM proxying is done by passing a pointer to the address of the EM_ASM
  // content as `emAsmAddr`.  JS library proxying is done by passing an index
  // into `proxiedJSCallArgs` as `funcIndex`. If `emAsmAddr` is non-zero then
  // `funcIndex` will be ignored.
  // Additional arguments are passed after the first three are the actual
  // function arguments.
  // The serialization buffer contains the number of call params, and then
  // all the args here.
  // We also pass 'sync' to C separately, since C needs to look at it.
  // Allocate a buffer, which will be copied by the C code.
  // First passed parameter specifies the number of arguments to the function.
  // When BigInt support is enabled, we must handle types in a more complex
  // way, detecting at runtime if a value is a BigInt or not (as we have no
  // type info here). To do that, add a "prefix" before each value that
  // indicates if it is a BigInt, which effectively doubles the number of
  // values we serialize for proxying. TODO: pack this?
  var serializedNumCallArgs = callArgs.length * 2;
  var sp = stackSave();
  var args = stackAlloc(serializedNumCallArgs * 8);
  var b = ((args) >> 3);
  for (var i = 0; i < callArgs.length; i++) {
    var arg = callArgs[i];
    if (typeof arg == "bigint") {
      // The prefix is non-zero to indicate a bigint.
      HEAP64[b + 2 * i] = 1n;
      HEAP64[b + 2 * i + 1] = arg;
    } else {
      // The prefix is zero to indicate a JS Number.
      HEAP64[b + 2 * i] = 0n;
      GROWABLE_HEAP_F64()[b + 2 * i + 1] = arg;
    }
  }
  var rtn = __emscripten_run_on_main_thread_js(funcIndex, emAsmAddr, serializedNumCallArgs, args, sync);
  stackRestore(sp);
  return rtn;
};

function _proc_exit(code) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(0, 0, 1, code);
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    PThread.terminateAllThreads();
    Module["onExit"]?.(code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

function exitOnMainThread(returnCode) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(1, 0, 0, returnCode);
  _exit(returnCode);
}

/** @suppress {duplicate } */ /** @param {boolean|number=} implicit */ var exitJS = (status, implicit) => {
  EXITSTATUS = status;
  checkUnflushedContent();
  if (ENVIRONMENT_IS_PTHREAD) {
    // implicit exit can never happen on a pthread
    assert(!implicit);
    // When running in a pthread we propagate the exit back to the main thread
    // where it can decide if the whole process should be shut down or not.
    // The pthread may have decided not to exit its own runtime, for example
    // because it runs a main loop, but that doesn't affect the main thread.
    exitOnMainThread(status);
    throw "unwind";
  }
  // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
  if (keepRuntimeAlive() && !implicit) {
    var msg = `program exited (with status: ${status}), but keepRuntimeAlive() is set (counter=${runtimeKeepaliveCounter}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;
    err(msg);
  }
  _proc_exit(status);
};

var _exit = exitJS;

var maybeExit = () => {
  if (!keepRuntimeAlive()) {
    try {
      if (ENVIRONMENT_IS_PTHREAD) __emscripten_thread_exit(EXITSTATUS); else _exit(EXITSTATUS);
    } catch (e) {
      handleException(e);
    }
  }
};

var callUserCallback = func => {
  if (ABORT) {
    err("user callback triggered after runtime exited or application aborted.  Ignoring.");
    return;
  }
  try {
    func();
    maybeExit();
  } catch (e) {
    handleException(e);
  }
};

var runtimeKeepalivePush = () => {
  runtimeKeepaliveCounter += 1;
};

var runtimeKeepalivePop = () => {
  assert(runtimeKeepaliveCounter > 0);
  runtimeKeepaliveCounter -= 1;
};

/** @param {number=} timeout */ var safeSetTimeout = (func, timeout) => {
  runtimeKeepalivePush();
  return setTimeout(() => {
    runtimeKeepalivePop();
    callUserCallback(func);
  }, timeout);
};

var warnOnce = text => {
  warnOnce.shown ||= {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    if (ENVIRONMENT_IS_NODE) text = "warning: " + text;
    err(text);
  }
};

var preloadPlugins = Module["preloadPlugins"] || [];

var Browser = {
  useWebGL: false,
  isFullscreen: false,
  pointerLock: false,
  moduleContextCreatedCallbacks: [],
  workers: [],
  preloadedImages: {},
  preloadedAudios: {},
  getCanvas: () => Module["canvas"],
  init() {
    if (Browser.initted) return;
    Browser.initted = true;
    // Support for plugins that can process preloaded files. You can add more of these to
    // your app by creating and appending to preloadPlugins.
    // Each plugin is asked if it can handle a file based on the file's name. If it can,
    // it is given the file's raw data. When it is done, it calls a callback with the file's
    // (possibly modified) data. For example, a plugin might decompress a file, or it
    // might create some side data structure for use later (like an Image element, etc.).
    var imagePlugin = {};
    imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
      return !Module["noImageDecoding"] && /\.(jpg|jpeg|png|bmp|webp)$/i.test(name);
    };
    imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
      var b = new Blob([ byteArray ], {
        type: Browser.getMimetype(name)
      });
      if (b.size !== byteArray.length) {
        // Safari bug #118630
        // Safari's Blob can only take an ArrayBuffer
        b = new Blob([ (new Uint8Array(byteArray)).buffer ], {
          type: Browser.getMimetype(name)
        });
      }
      var url = URL.createObjectURL(b);
      assert(typeof url == "string", "createObjectURL must return a url as a string");
      var img = new Image;
      img.onload = () => {
        assert(img.complete, `Image ${name} could not be decoded`);
        var canvas = /** @type {!HTMLCanvasElement} */ (document.createElement("canvas"));
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        Browser.preloadedImages[name] = canvas;
        URL.revokeObjectURL(url);
        onload?.(byteArray);
      };
      img.onerror = event => {
        err(`Image ${url} could not be decoded`);
        onerror?.();
      };
      img.src = url;
    };
    preloadPlugins.push(imagePlugin);
    var audioPlugin = {};
    audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
      return !Module["noAudioDecoding"] && name.slice(-4) in {
        ".ogg": 1,
        ".wav": 1,
        ".mp3": 1
      };
    };
    audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
      var done = false;
      function finish(audio) {
        if (done) return;
        done = true;
        Browser.preloadedAudios[name] = audio;
        onload?.(byteArray);
      }
      function fail() {
        if (done) return;
        done = true;
        Browser.preloadedAudios[name] = new Audio;
        // empty shim
        onerror?.();
      }
      var b = new Blob([ byteArray ], {
        type: Browser.getMimetype(name)
      });
      var url = URL.createObjectURL(b);
      // XXX we never revoke this!
      assert(typeof url == "string", "createObjectURL must return a url as a string");
      var audio = new Audio;
      audio.addEventListener("canplaythrough", () => finish(audio), false);
      // use addEventListener due to chromium bug 124926
      audio.onerror = function audio_onerror(event) {
        if (done) return;
        err(`warning: browser could not fully decode audio ${name}, trying slower base64 approach`);
        function encode64(data) {
          var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          var PAD = "=";
          var ret = "";
          var leftchar = 0;
          var leftbits = 0;
          for (var i = 0; i < data.length; i++) {
            leftchar = (leftchar << 8) | data[i];
            leftbits += 8;
            while (leftbits >= 6) {
              var curr = (leftchar >> (leftbits - 6)) & 63;
              leftbits -= 6;
              ret += BASE[curr];
            }
          }
          if (leftbits == 2) {
            ret += BASE[(leftchar & 3) << 4];
            ret += PAD + PAD;
          } else if (leftbits == 4) {
            ret += BASE[(leftchar & 15) << 2];
            ret += PAD;
          }
          return ret;
        }
        audio.src = "data:audio/x-" + name.slice(-3) + ";base64," + encode64(byteArray);
        finish(audio);
      };
      audio.src = url;
      // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
      safeSetTimeout(() => {
        finish(audio);
      }, 1e4);
    };
    preloadPlugins.push(audioPlugin);
    // Canvas event setup
    function pointerLockChange() {
      var canvas = Browser.getCanvas();
      Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas;
    }
    var canvas = Browser.getCanvas();
    if (canvas) {
      // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
      // Module['forcedAspectRatio'] = 4 / 3;
      canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (() => {});
      canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (() => {});
      // no-op if function does not exist
      canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
      document.addEventListener("pointerlockchange", pointerLockChange, false);
      document.addEventListener("mozpointerlockchange", pointerLockChange, false);
      document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
      document.addEventListener("mspointerlockchange", pointerLockChange, false);
      if (Module["elementPointerLock"]) {
        canvas.addEventListener("click", ev => {
          if (!Browser.pointerLock && Browser.getCanvas().requestPointerLock) {
            Browser.getCanvas().requestPointerLock();
            ev.preventDefault();
          }
        }, false);
      }
    }
  },
  createContext(/** @type {HTMLCanvasElement} */ canvas, useWebGL, setInModule, webGLContextAttributes) {
    if (useWebGL && Module["ctx"] && canvas == Browser.getCanvas()) return Module["ctx"];
    // no need to recreate GL context if it's already been created for this canvas.
    var ctx;
    var contextHandle;
    if (useWebGL) {
      // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
      var contextAttributes = {
        antialias: false,
        alpha: false,
        majorVersion: 1
      };
      if (webGLContextAttributes) {
        for (var attribute in webGLContextAttributes) {
          contextAttributes[attribute] = webGLContextAttributes[attribute];
        }
      }
      // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
      // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
      // Browser.createContext() should not even be emitted.
      if (typeof GL != "undefined") {
        contextHandle = GL.createContext(canvas, contextAttributes);
        if (contextHandle) {
          ctx = GL.getContext(contextHandle).GLctx;
        }
      }
    } else {
      ctx = canvas.getContext("2d");
    }
    if (!ctx) return null;
    if (setInModule) {
      if (!useWebGL) assert(typeof GLctx == "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
      Module["ctx"] = ctx;
      if (useWebGL) GL.makeContextCurrent(contextHandle);
      Browser.useWebGL = useWebGL;
      Browser.moduleContextCreatedCallbacks.forEach(callback => callback());
      Browser.init();
    }
    return ctx;
  },
  fullscreenHandlersInstalled: false,
  lockPointer: undefined,
  resizeCanvas: undefined,
  requestFullscreen(lockPointer, resizeCanvas) {
    Browser.lockPointer = lockPointer;
    Browser.resizeCanvas = resizeCanvas;
    if (typeof Browser.lockPointer == "undefined") Browser.lockPointer = true;
    if (typeof Browser.resizeCanvas == "undefined") Browser.resizeCanvas = false;
    var canvas = Browser.getCanvas();
    function fullscreenChange() {
      Browser.isFullscreen = false;
      var canvasContainer = canvas.parentNode;
      if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
        canvas.exitFullscreen = Browser.exitFullscreen;
        if (Browser.lockPointer) canvas.requestPointerLock();
        Browser.isFullscreen = true;
        if (Browser.resizeCanvas) {
          Browser.setFullscreenCanvasSize();
        } else {
          Browser.updateCanvasDimensions(canvas);
        }
      } else {
        // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
        canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
        canvasContainer.parentNode.removeChild(canvasContainer);
        if (Browser.resizeCanvas) {
          Browser.setWindowedCanvasSize();
        } else {
          Browser.updateCanvasDimensions(canvas);
        }
      }
      Module["onFullScreen"]?.(Browser.isFullscreen);
      Module["onFullscreen"]?.(Browser.isFullscreen);
    }
    if (!Browser.fullscreenHandlersInstalled) {
      Browser.fullscreenHandlersInstalled = true;
      document.addEventListener("fullscreenchange", fullscreenChange, false);
      document.addEventListener("mozfullscreenchange", fullscreenChange, false);
      document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
      document.addEventListener("MSFullscreenChange", fullscreenChange, false);
    }
    // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
    var canvasContainer = document.createElement("div");
    canvas.parentNode.insertBefore(canvasContainer, canvas);
    canvasContainer.appendChild(canvas);
    // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
    canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? () => canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null) || (canvasContainer["webkitRequestFullScreen"] ? () => canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null);
    canvasContainer.requestFullscreen();
  },
  requestFullScreen() {
    abort("Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)");
  },
  exitFullscreen() {
    // This is workaround for chrome. Trying to exit from fullscreen
    // not in fullscreen state will cause "TypeError: Document not active"
    // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
    if (!Browser.isFullscreen) {
      return false;
    }
    var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || (() => {});
    CFS.apply(document, []);
    return true;
  },
  safeSetTimeout(func, timeout) {
    // Legacy function, this is used by the SDL2 port so we need to keep it
    // around at least until that is updated.
    // See https://github.com/libsdl-org/SDL/pull/6304
    return safeSetTimeout(func, timeout);
  },
  getMimetype(name) {
    return {
      "jpg": "image/jpeg",
      "jpeg": "image/jpeg",
      "png": "image/png",
      "bmp": "image/bmp",
      "ogg": "audio/ogg",
      "wav": "audio/wav",
      "mp3": "audio/mpeg"
    }[name.slice(name.lastIndexOf(".") + 1)];
  },
  getUserMedia(func) {
    window.getUserMedia ||= navigator["getUserMedia"] || navigator["mozGetUserMedia"];
    window.getUserMedia(func);
  },
  getMovementX(event) {
    return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
  },
  getMovementY(event) {
    return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
  },
  getMouseWheelDelta(event) {
    var delta = 0;
    switch (event.type) {
     case "DOMMouseScroll":
      // 3 lines make up a step
      delta = event.detail / 3;
      break;

     case "mousewheel":
      // 120 units make up a step
      delta = event.wheelDelta / 120;
      break;

     case "wheel":
      delta = event.deltaY;
      switch (event.deltaMode) {
       case 0:
        // DOM_DELTA_PIXEL: 100 pixels make up a step
        delta /= 100;
        break;

       case 1:
        // DOM_DELTA_LINE: 3 lines make up a step
        delta /= 3;
        break;

       case 2:
        // DOM_DELTA_PAGE: A page makes up 80 steps
        delta *= 80;
        break;

       default:
        throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
      }
      break;

     default:
      throw "unrecognized mouse wheel event: " + event.type;
    }
    return delta;
  },
  mouseX: 0,
  mouseY: 0,
  mouseMovementX: 0,
  mouseMovementY: 0,
  touches: {},
  lastTouches: {},
  calculateMouseCoords(pageX, pageY) {
    // Calculate the movement based on the changes
    // in the coordinates.
    var canvas = Browser.getCanvas();
    var rect = canvas.getBoundingClientRect();
    // Neither .scrollX or .pageXOffset are defined in a spec, but
    // we prefer .scrollX because it is currently in a spec draft.
    // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
    var scrollX = ((typeof window.scrollX != "undefined") ? window.scrollX : window.pageXOffset);
    var scrollY = ((typeof window.scrollY != "undefined") ? window.scrollY : window.pageYOffset);
    // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
    // and we have no viable fallback.
    assert((typeof scrollX != "undefined") && (typeof scrollY != "undefined"), "Unable to retrieve scroll position, mouse positions likely broken.");
    var adjustedX = pageX - (scrollX + rect.left);
    var adjustedY = pageY - (scrollY + rect.top);
    // the canvas might be CSS-scaled compared to its backbuffer;
    // SDL-using content will want mouse coordinates in terms
    // of backbuffer units.
    adjustedX = adjustedX * (canvas.width / rect.width);
    adjustedY = adjustedY * (canvas.height / rect.height);
    return {
      x: adjustedX,
      y: adjustedY
    };
  },
  setMouseCoords(pageX, pageY) {
    const {x, y} = Browser.calculateMouseCoords(pageX, pageY);
    Browser.mouseMovementX = x - Browser.mouseX;
    Browser.mouseMovementY = y - Browser.mouseY;
    Browser.mouseX = x;
    Browser.mouseY = y;
  },
  calculateMouseEvent(event) {
    // event should be mousemove, mousedown or mouseup
    if (Browser.pointerLock) {
      // When the pointer is locked, calculate the coordinates
      // based on the movement of the mouse.
      // Workaround for Firefox bug 764498
      if (event.type != "mousemove" && ("mozMovementX" in event)) {
        Browser.mouseMovementX = Browser.mouseMovementY = 0;
      } else {
        Browser.mouseMovementX = Browser.getMovementX(event);
        Browser.mouseMovementY = Browser.getMovementY(event);
      }
      // add the mouse delta to the current absolute mouse position
      Browser.mouseX += Browser.mouseMovementX;
      Browser.mouseY += Browser.mouseMovementY;
    } else {
      if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
        var touch = event.touch;
        if (touch === undefined) {
          return;
        }
        var coords = Browser.calculateMouseCoords(touch.pageX, touch.pageY);
        if (event.type === "touchstart") {
          Browser.lastTouches[touch.identifier] = coords;
          Browser.touches[touch.identifier] = coords;
        } else if (event.type === "touchend" || event.type === "touchmove") {
          var last = Browser.touches[touch.identifier];
          last ||= coords;
          Browser.lastTouches[touch.identifier] = last;
          Browser.touches[touch.identifier] = coords;
        }
        return;
      }
      Browser.setMouseCoords(event.pageX, event.pageY);
    }
  },
  resizeListeners: [],
  updateResizeListeners() {
    var canvas = Browser.getCanvas();
    Browser.resizeListeners.forEach(listener => listener(canvas.width, canvas.height));
  },
  setCanvasSize(width, height, noUpdates) {
    var canvas = Browser.getCanvas();
    Browser.updateCanvasDimensions(canvas, width, height);
    if (!noUpdates) Browser.updateResizeListeners();
  },
  windowedWidth: 0,
  windowedHeight: 0,
  setFullscreenCanvasSize() {
    // check if SDL is available
    if (typeof SDL != "undefined") {
      var flags = GROWABLE_HEAP_U32()[((SDL.screen) >> 2)];
      flags = flags | 8388608;
      // set SDL_FULLSCREEN flag
      GROWABLE_HEAP_I32()[((SDL.screen) >> 2)] = flags;
    }
    Browser.updateCanvasDimensions(Browser.getCanvas());
    Browser.updateResizeListeners();
  },
  setWindowedCanvasSize() {
    // check if SDL is available
    if (typeof SDL != "undefined") {
      var flags = GROWABLE_HEAP_U32()[((SDL.screen) >> 2)];
      flags = flags & ~8388608;
      // clear SDL_FULLSCREEN flag
      GROWABLE_HEAP_I32()[((SDL.screen) >> 2)] = flags;
    }
    Browser.updateCanvasDimensions(Browser.getCanvas());
    Browser.updateResizeListeners();
  },
  updateCanvasDimensions(canvas, wNative, hNative) {
    if (wNative && hNative) {
      canvas.widthNative = wNative;
      canvas.heightNative = hNative;
    } else {
      wNative = canvas.widthNative;
      hNative = canvas.heightNative;
    }
    var w = wNative;
    var h = hNative;
    if (Module["forcedAspectRatio"] > 0) {
      if (w / h < Module["forcedAspectRatio"]) {
        w = Math.round(h * Module["forcedAspectRatio"]);
      } else {
        h = Math.round(w / Module["forcedAspectRatio"]);
      }
    }
    if (((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode) && (typeof screen != "undefined")) {
      var factor = Math.min(screen.width / w, screen.height / h);
      w = Math.round(w * factor);
      h = Math.round(h * factor);
    }
    if (Browser.resizeCanvas) {
      if (canvas.width != w) canvas.width = w;
      if (canvas.height != h) canvas.height = h;
      if (typeof canvas.style != "undefined") {
        canvas.style.removeProperty("width");
        canvas.style.removeProperty("height");
      }
    } else {
      if (canvas.width != wNative) canvas.width = wNative;
      if (canvas.height != hNative) canvas.height = hNative;
      if (typeof canvas.style != "undefined") {
        if (w != wNative || h != hNative) {
          canvas.style.setProperty("width", w + "px", "important");
          canvas.style.setProperty("height", h + "px", "important");
        } else {
          canvas.style.removeProperty("width");
          canvas.style.removeProperty("height");
        }
      }
    }
  }
};

var _wasmWorkerDelayedMessageQueue = [];

var wasmTableMirror = [];

/** @type {WebAssembly.Table} */ var wasmTable;

var getWasmTableEntry = funcPtr => {
  var func = wasmTableMirror[funcPtr];
  if (!func) {
    /** @suppress {checkTypes} */ wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
  }
  /** @suppress {checkTypes} */ assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
  return func;
};

var _wasmWorkerRunPostMessage = e => {
  // '_wsc' is short for 'wasm call', trying to use an identifier name that
  // will never conflict with user code
  let data = e.data;
  let wasmCall = data["_wsc"];
  wasmCall && callUserCallback(() => getWasmTableEntry(wasmCall)(...data["x"]));
};

var _wasmWorkerAppendToQueue = e => {
  _wasmWorkerDelayedMessageQueue.push(e);
};

var _wasmWorkerInitializeRuntime = () => {
  let m = Module;
  assert(m["sb"] % 16 == 0);
  assert(m["sz"] % 16 == 0);
  // Wasm workers basically never exit their runtime
  noExitRuntime = 1;
  // Run the C side Worker initialization for stack and TLS.
  __emscripten_wasm_worker_initialize(m["sb"], m["sz"]);
  // Record the pthread configuration, and whether this Wasm Worker supports synchronous blocking in emscripten_futex_wait().
  // (regular Wasm Workers do, AudioWorklets don't)
  ___set_thread_state(/*thread_ptr=*/ 0, /*is_main_thread=*/ 0, /*is_runtime_thread=*/ 0, /*supports_wait=*/ typeof AudioWorkletGlobalScope === "undefined");
  // Write the stack cookie last, after we have set up the proper bounds and
  // current position of the stack.
  writeStackCookie();
  // Audio Worklets do not have postMessage()ing capabilities.
  if (typeof AudioWorkletGlobalScope === "undefined") {
    // The Wasm Worker runtime is now up, so we can start processing
    // any postMessage function calls that have been received. Drop the temp
    // message handler that queued any pending incoming postMessage function calls ...
    removeEventListener("message", _wasmWorkerAppendToQueue);
    // ... then flush whatever messages we may have already gotten in the queue,
    //     and clear _wasmWorkerDelayedMessageQueue to undefined ...
    _wasmWorkerDelayedMessageQueue = _wasmWorkerDelayedMessageQueue.forEach(_wasmWorkerRunPostMessage);
    // ... and finally register the proper postMessage handler that immediately
    // dispatches incoming function calls without queueing them.
    addEventListener("message", _wasmWorkerRunPostMessage);
  }
};

var onPostRuns = [];

var addOnPostRun = cb => onPostRuns.unshift(cb);

var establishStackSpace = pthread_ptr => {
  // If memory growth is enabled, the memory views may have gotten out of date,
  // so resync them before accessing the pthread ptr below.
  updateMemoryViews();
  var stackHigh = GROWABLE_HEAP_U32()[(((pthread_ptr) + (52)) >> 2)];
  var stackSize = GROWABLE_HEAP_U32()[(((pthread_ptr) + (56)) >> 2)];
  var stackLow = stackHigh - stackSize;
  assert(stackHigh != 0);
  assert(stackLow != 0);
  assert(stackHigh > stackLow, "stackHigh must be higher then stackLow");
  // Set stack limits used by `emscripten/stack.h` function.  These limits are
  // cached in wasm-side globals to make checks as fast as possible.
  _emscripten_stack_set_limits(stackHigh, stackLow);
  // Call inside wasm module to set up the stack frame for this pthread in wasm module scope
  stackRestore(stackHigh);
  // Write the stack cookie last, after we have set up the proper bounds and
  // current position of the stack.
  writeStackCookie();
};

/**
     * @param {number} ptr
     * @param {string} type
     */ function getValue(ptr, type = "i8") {
  if (type.endsWith("*")) type = "*";
  switch (type) {
   case "i1":
    return GROWABLE_HEAP_I8()[ptr];

   case "i8":
    return GROWABLE_HEAP_I8()[ptr];

   case "i16":
    return GROWABLE_HEAP_I16()[((ptr) >> 1)];

   case "i32":
    return GROWABLE_HEAP_I32()[((ptr) >> 2)];

   case "i64":
    return HEAP64[((ptr) >> 3)];

   case "float":
    return GROWABLE_HEAP_F32()[((ptr) >> 2)];

   case "double":
    return GROWABLE_HEAP_F64()[((ptr) >> 3)];

   case "*":
    return GROWABLE_HEAP_U32()[((ptr) >> 2)];

   default:
    abort(`invalid type for getValue: ${type}`);
  }
}

var invokeEntryPoint = (ptr, arg) => {
  // An old thread on this worker may have been canceled without returning the
  // `runtimeKeepaliveCounter` to zero. Reset it now so the new thread won't
  // be affected.
  runtimeKeepaliveCounter = 0;
  // Same for noExitRuntime.  The default for pthreads should always be false
  // otherwise pthreads would never complete and attempts to pthread_join to
  // them would block forever.
  // pthreads can still choose to set `noExitRuntime` explicitly, or
  // call emscripten_unwind_to_js_event_loop to extend their lifetime beyond
  // their main function.  See comment in src/runtime_pthread.js for more.
  noExitRuntime = 0;
  // pthread entry points are always of signature 'void *ThreadMain(void *arg)'
  // Native codebases sometimes spawn threads with other thread entry point
  // signatures, such as void ThreadMain(void *arg), void *ThreadMain(), or
  // void ThreadMain().  That is not acceptable per C/C++ specification, but
  // x86 compiler ABI extensions enable that to work. If you find the
  // following line to crash, either change the signature to "proper" void
  // *ThreadMain(void *arg) form, or try linking with the Emscripten linker
  // flag -sEMULATE_FUNCTION_POINTER_CASTS to add in emulation for this x86
  // ABI extension.
  var result = (a1 => dynCall_ii(ptr, a1))(arg);
  checkStackCookie();
  function finish(result) {
    if (keepRuntimeAlive()) {
      EXITSTATUS = result;
    } else {
      __emscripten_thread_exit(result);
    }
  }
  finish(result);
};

var noExitRuntime = Module["noExitRuntime"] || true;

var registerTLSInit = tlsInitFunc => PThread.tlsInitFunctions.push(tlsInitFunc);

/**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */ function setValue(ptr, value, type = "i8") {
  if (type.endsWith("*")) type = "*";
  switch (type) {
   case "i1":
    GROWABLE_HEAP_I8()[ptr] = value;
    break;

   case "i8":
    GROWABLE_HEAP_I8()[ptr] = value;
    break;

   case "i16":
    GROWABLE_HEAP_I16()[((ptr) >> 1)] = value;
    break;

   case "i32":
    GROWABLE_HEAP_I32()[((ptr) >> 2)] = value;
    break;

   case "i64":
    HEAP64[((ptr) >> 3)] = BigInt(value);
    break;

   case "float":
    GROWABLE_HEAP_F32()[((ptr) >> 2)] = value;
    break;

   case "double":
    GROWABLE_HEAP_F64()[((ptr) >> 3)] = value;
    break;

   case "*":
    GROWABLE_HEAP_U32()[((ptr) >> 2)] = value;
    break;

   default:
    abort(`invalid type for setValue: ${type}`);
  }
}

var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder : undefined;

/**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */ var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on
  // null terminator by itself.  Also, use the length info to avoid running tiny
  // strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation,
  // so that undefined/NaN means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.buffer instanceof ArrayBuffer ? heapOrArray.subarray(idx, endPtr) : heapOrArray.slice(idx, endPtr));
  }
  var str = "";
  // If building with TextDecoder, we have already computed the string length
  // above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 128)) {
      str += String.fromCharCode(u0);
      continue;
    }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 224) == 192) {
      str += String.fromCharCode(((u0 & 31) << 6) | u1);
      continue;
    }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 240) == 224) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      if ((u0 & 248) != 240) warnOnce("Invalid UTF-8 leading byte " + ptrToString(u0) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }
    if (u0 < 65536) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 65536;
      str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
    }
  }
  return str;
};

/**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */ var UTF8ToString = (ptr, maxBytesToRead) => {
  assert(typeof ptr == "number", `UTF8ToString expects a number (got ${typeof ptr})`);
  return ptr ? UTF8ArrayToString(GROWABLE_HEAP_U8(), ptr, maxBytesToRead) : "";
};

var ___assert_fail = (condition, filename, line, func) => abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [ filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function" ]);

var ___call_sighandler = (fp, sig) => (a1 => dynCall_vi(fp, a1))(sig);

function pthreadCreateProxied(pthread_ptr, attr, startRoutine, arg) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(2, 0, 1, pthread_ptr, attr, startRoutine, arg);
  return ___pthread_create_js(pthread_ptr, attr, startRoutine, arg);
}

var _emscripten_has_threading_support = () => typeof SharedArrayBuffer != "undefined";

var ___pthread_create_js = (pthread_ptr, attr, startRoutine, arg) => {
  if (!_emscripten_has_threading_support()) {
    dbg("pthread_create: environment does not support SharedArrayBuffer, pthreads are not available");
    return 6;
  }
  // List of JS objects that will transfer ownership to the Worker hosting the thread
  var transferList = [];
  var error = 0;
  // Synchronously proxy the thread creation to main thread if possible. If we
  // need to transfer ownership of objects, then proxy asynchronously via
  // postMessage.
  if (ENVIRONMENT_IS_PTHREAD && (transferList.length === 0 || error)) {
    return pthreadCreateProxied(pthread_ptr, attr, startRoutine, arg);
  }
  // If on the main thread, and accessing Canvas/OffscreenCanvas failed, abort
  // with the detected error.
  if (error) return error;
  var threadParams = {
    startRoutine,
    pthread_ptr,
    arg,
    transferList
  };
  if (ENVIRONMENT_IS_PTHREAD) {
    // The prepopulated pool of web workers that can host pthreads is stored
    // in the main JS thread. Therefore if a pthread is attempting to spawn a
    // new thread, the thread creation must be deferred to the main JS thread.
    threadParams.cmd = "spawnThread";
    postMessage(threadParams, transferList);
    // When we defer thread creation this way, we have no way to detect thread
    // creation synchronously today, so we have to assume success and return 0.
    return 0;
  }
  // We are the main thread, so we have the pthread warmup pool in this
  // thread and can fire off JS thread creation directly ourselves.
  return spawnThread(threadParams);
};

var PATH = {
  isAbs: path => path.charAt(0) === "/",
  splitPath: filename => {
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    return splitPathRe.exec(filename).slice(1);
  },
  normalizeArray: (parts, allowAboveRoot) => {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (;up; up--) {
        parts.unshift("..");
      }
    }
    return parts;
  },
  normalize: path => {
    var isAbsolute = PATH.isAbs(path), trailingSlash = path.slice(-1) === "/";
    // Normalize the path
    path = PATH.normalizeArray(path.split("/").filter(p => !!p), !isAbsolute).join("/");
    if (!path && !isAbsolute) {
      path = ".";
    }
    if (path && trailingSlash) {
      path += "/";
    }
    return (isAbsolute ? "/" : "") + path;
  },
  dirname: path => {
    var result = PATH.splitPath(path), root = result[0], dir = result[1];
    if (!root && !dir) {
      // No dirname whatsoever
      return ".";
    }
    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.slice(0, -1);
    }
    return root + dir;
  },
  basename: path => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join: (...paths) => PATH.normalize(paths.join("/")),
  join2: (l, r) => PATH.normalize(l + "/" + r)
};

var initRandomFill = () => {
  // This block is not needed on v19+ since crypto.getRandomValues is builtin
  if (ENVIRONMENT_IS_NODE) {
    var nodeCrypto = require("crypto");
    return view => nodeCrypto.randomFillSync(view);
  }
  // like with most Web APIs, we can't use Web Crypto API directly on shared memory,
  // so we need to create an intermediate buffer and copy it to the destination
  return view => view.set(crypto.getRandomValues(new Uint8Array(view.byteLength)));
};

var randomFill = view => {
  // Lazily init on the first invocation.
  (randomFill = initRandomFill())(view);
};

var PATH_FS = {
  resolve: (...args) => {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? args[i] : FS.cwd();
      // Skip empty and invalid entries
      if (typeof path != "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        return "";
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = PATH.isAbs(path);
    }
    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)
    resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(p => !!p), !resolvedAbsolute).join("/");
    return ((resolvedAbsolute ? "/" : "") + resolvedPath) || ".";
  },
  relative: (from, to) => {
    from = PATH_FS.resolve(from).slice(1);
    to = PATH_FS.resolve(to).slice(1);
    function trim(arr) {
      var start = 0;
      for (;start < arr.length; start++) {
        if (arr[start] !== "") break;
      }
      var end = arr.length - 1;
      for (;end >= 0; end--) {
        if (arr[end] !== "") break;
      }
      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
};

var FS_stdin_getChar_buffer = [];

var lengthBytesUTF8 = str => {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i);
    // possibly a lead surrogate
    if (c <= 127) {
      len++;
    } else if (c <= 2047) {
      len += 2;
    } else if (c >= 55296 && c <= 57343) {
      len += 4;
      ++i;
    } else {
      len += 3;
    }
  }
  return len;
};

var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
  assert(typeof str === "string", `stringToUTF8Array expects a string (got ${typeof str})`);
  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
  // undefined and false each don't write out any bytes.
  if (!(maxBytesToWrite > 0)) return 0;
  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1;
  // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
    // and https://www.ietf.org/rfc/rfc2279.txt
    // and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i);
    // possibly a lead surrogate
    if (u >= 55296 && u <= 57343) {
      var u1 = str.charCodeAt(++i);
      u = 65536 + ((u & 1023) << 10) | (u1 & 1023);
    }
    if (u <= 127) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 2047) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 192 | (u >> 6);
      heap[outIdx++] = 128 | (u & 63);
    } else if (u <= 65535) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 224 | (u >> 12);
      heap[outIdx++] = 128 | ((u >> 6) & 63);
      heap[outIdx++] = 128 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 1114111) warnOnce("Invalid Unicode code point " + ptrToString(u) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
      heap[outIdx++] = 240 | (u >> 18);
      heap[outIdx++] = 128 | ((u >> 12) & 63);
      heap[outIdx++] = 128 | ((u >> 6) & 63);
      heap[outIdx++] = 128 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
};

/** @type {function(string, boolean=, number=)} */ var intArrayFromString = (stringy, dontAddNull, length) => {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
};

var FS_stdin_getChar = () => {
  if (!FS_stdin_getChar_buffer.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
      // we will read data by chunks of BUFSIZE
      var BUFSIZE = 256;
      var buf = Buffer.alloc(BUFSIZE);
      var bytesRead = 0;
      // For some reason we must suppress a closure warning here, even though
      // fd definitely exists on process.stdin, and is even the proper way to
      // get the fd of stdin,
      // https://github.com/nodejs/help/issues/2136#issuecomment-523649904
      // This started to happen after moving this logic out of library_tty.js,
      // so it is related to the surrounding code in some unclear manner.
      /** @suppress {missingProperties} */ var fd = process.stdin.fd;
      try {
        bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);
      } catch (e) {
        // Cross-platform differences: on Windows, reading EOF throws an
        // exception, but on other OSes, reading EOF returns 0. Uniformize
        // behavior by treating the EOF exception to return 0.
        if (e.toString().includes("EOF")) bytesRead = 0; else throw e;
      }
      if (bytesRead > 0) {
        result = buf.slice(0, bytesRead).toString("utf-8");
      }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
      // Browser.
      result = window.prompt("Input: ");
      // returns null on cancel
      if (result !== null) {
        result += "\n";
      }
    } else {}
    if (!result) {
      return null;
    }
    FS_stdin_getChar_buffer = intArrayFromString(result, true);
  }
  return FS_stdin_getChar_buffer.shift();
};

var TTY = {
  ttys: [],
  init() {},
  shutdown() {},
  register(dev, ops) {
    TTY.ttys[dev] = {
      input: [],
      output: [],
      ops
    };
    FS.registerDevice(dev, TTY.stream_ops);
  },
  stream_ops: {
    open(stream) {
      var tty = TTY.ttys[stream.node.rdev];
      if (!tty) {
        throw new FS.ErrnoError(43);
      }
      stream.tty = tty;
      stream.seekable = false;
    },
    close(stream) {
      // flush any pending line data
      stream.tty.ops.fsync(stream.tty);
    },
    fsync(stream) {
      stream.tty.ops.fsync(stream.tty);
    },
    read(stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.get_char) {
        throw new FS.ErrnoError(60);
      }
      var bytesRead = 0;
      for (var i = 0; i < length; i++) {
        var result;
        try {
          result = stream.tty.ops.get_char(stream.tty);
        } catch (e) {
          throw new FS.ErrnoError(29);
        }
        if (result === undefined && bytesRead === 0) {
          throw new FS.ErrnoError(6);
        }
        if (result === null || result === undefined) break;
        bytesRead++;
        buffer[offset + i] = result;
      }
      if (bytesRead) {
        stream.node.atime = Date.now();
      }
      return bytesRead;
    },
    write(stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.put_char) {
        throw new FS.ErrnoError(60);
      }
      try {
        for (var i = 0; i < length; i++) {
          stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
        }
      } catch (e) {
        throw new FS.ErrnoError(29);
      }
      if (length) {
        stream.node.mtime = stream.node.ctime = Date.now();
      }
      return i;
    }
  },
  default_tty_ops: {
    get_char(tty) {
      return FS_stdin_getChar();
    },
    put_char(tty, val) {
      if (val === null || val === 10) {
        out(UTF8ArrayToString(tty.output));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    fsync(tty) {
      if (tty.output?.length > 0) {
        out(UTF8ArrayToString(tty.output));
        tty.output = [];
      }
    },
    ioctl_tcgets(tty) {
      // typical setting
      return {
        c_iflag: 25856,
        c_oflag: 5,
        c_cflag: 191,
        c_lflag: 35387,
        c_cc: [ 3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      };
    },
    ioctl_tcsets(tty, optional_actions, data) {
      // currently just ignore
      return 0;
    },
    ioctl_tiocgwinsz(tty) {
      return [ 24, 80 ];
    }
  },
  default_tty1_ops: {
    put_char(tty, val) {
      if (val === null || val === 10) {
        err(UTF8ArrayToString(tty.output));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    fsync(tty) {
      if (tty.output?.length > 0) {
        err(UTF8ArrayToString(tty.output));
        tty.output = [];
      }
    }
  }
};

var mmapAlloc = size => {
  abort("internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported");
};

var MEMFS = {
  ops_table: null,
  mount(mount) {
    return MEMFS.createNode(null, "/", 16895, 0);
  },
  createNode(parent, name, mode, dev) {
    if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
      // no supported
      throw new FS.ErrnoError(63);
    }
    MEMFS.ops_table ||= {
      dir: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr,
          lookup: MEMFS.node_ops.lookup,
          mknod: MEMFS.node_ops.mknod,
          rename: MEMFS.node_ops.rename,
          unlink: MEMFS.node_ops.unlink,
          rmdir: MEMFS.node_ops.rmdir,
          readdir: MEMFS.node_ops.readdir,
          symlink: MEMFS.node_ops.symlink
        },
        stream: {
          llseek: MEMFS.stream_ops.llseek
        }
      },
      file: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr
        },
        stream: {
          llseek: MEMFS.stream_ops.llseek,
          read: MEMFS.stream_ops.read,
          write: MEMFS.stream_ops.write,
          mmap: MEMFS.stream_ops.mmap,
          msync: MEMFS.stream_ops.msync
        }
      },
      link: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr,
          readlink: MEMFS.node_ops.readlink
        },
        stream: {}
      },
      chrdev: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr
        },
        stream: FS.chrdev_stream_ops
      }
    };
    var node = FS.createNode(parent, name, mode, dev);
    if (FS.isDir(node.mode)) {
      node.node_ops = MEMFS.ops_table.dir.node;
      node.stream_ops = MEMFS.ops_table.dir.stream;
      node.contents = {};
    } else if (FS.isFile(node.mode)) {
      node.node_ops = MEMFS.ops_table.file.node;
      node.stream_ops = MEMFS.ops_table.file.stream;
      node.usedBytes = 0;
      // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
      // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
      // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
      // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
      node.contents = null;
    } else if (FS.isLink(node.mode)) {
      node.node_ops = MEMFS.ops_table.link.node;
      node.stream_ops = MEMFS.ops_table.link.stream;
    } else if (FS.isChrdev(node.mode)) {
      node.node_ops = MEMFS.ops_table.chrdev.node;
      node.stream_ops = MEMFS.ops_table.chrdev.stream;
    }
    node.atime = node.mtime = node.ctime = Date.now();
    // add the new node to the parent
    if (parent) {
      parent.contents[name] = node;
      parent.atime = parent.mtime = parent.ctime = node.atime;
    }
    return node;
  },
  getFileDataAsTypedArray(node) {
    if (!node.contents) return new Uint8Array(0);
    if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
    // Make sure to not return excess unused bytes.
    return new Uint8Array(node.contents);
  },
  expandFileStorage(node, newCapacity) {
    var prevCapacity = node.contents ? node.contents.length : 0;
    if (prevCapacity >= newCapacity) return;
    // No need to expand, the storage was already large enough.
    // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
    // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
    // avoid overshooting the allocation cap by a very large margin.
    var CAPACITY_DOUBLING_MAX = 1024 * 1024;
    newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125)) >>> 0);
    if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
    // At minimum allocate 256b for each file when expanding.
    var oldContents = node.contents;
    node.contents = new Uint8Array(newCapacity);
    // Allocate new storage.
    if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
  },
  resizeFileStorage(node, newSize) {
    if (node.usedBytes == newSize) return;
    if (newSize == 0) {
      node.contents = null;
      // Fully decommit when requesting a resize to zero.
      node.usedBytes = 0;
    } else {
      var oldContents = node.contents;
      node.contents = new Uint8Array(newSize);
      // Allocate new storage.
      if (oldContents) {
        node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
      }
      node.usedBytes = newSize;
    }
  },
  node_ops: {
    getattr(node) {
      var attr = {};
      // device numbers reuse inode numbers.
      attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
      attr.ino = node.id;
      attr.mode = node.mode;
      attr.nlink = 1;
      attr.uid = 0;
      attr.gid = 0;
      attr.rdev = node.rdev;
      if (FS.isDir(node.mode)) {
        attr.size = 4096;
      } else if (FS.isFile(node.mode)) {
        attr.size = node.usedBytes;
      } else if (FS.isLink(node.mode)) {
        attr.size = node.link.length;
      } else {
        attr.size = 0;
      }
      attr.atime = new Date(node.atime);
      attr.mtime = new Date(node.mtime);
      attr.ctime = new Date(node.ctime);
      // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
      //       but this is not required by the standard.
      attr.blksize = 4096;
      attr.blocks = Math.ceil(attr.size / attr.blksize);
      return attr;
    },
    setattr(node, attr) {
      for (const key of [ "mode", "atime", "mtime", "ctime" ]) {
        if (attr[key] != null) {
          node[key] = attr[key];
        }
      }
      if (attr.size !== undefined) {
        MEMFS.resizeFileStorage(node, attr.size);
      }
    },
    lookup(parent, name) {
      throw new FS.ErrnoError(44);
    },
    mknod(parent, name, mode, dev) {
      return MEMFS.createNode(parent, name, mode, dev);
    },
    rename(old_node, new_dir, new_name) {
      var new_node;
      try {
        new_node = FS.lookupNode(new_dir, new_name);
      } catch (e) {}
      if (new_node) {
        if (FS.isDir(old_node.mode)) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          for (var i in new_node.contents) {
            throw new FS.ErrnoError(55);
          }
        }
        FS.hashRemoveNode(new_node);
      }
      // do the internal rewiring
      delete old_node.parent.contents[old_node.name];
      new_dir.contents[new_name] = old_node;
      old_node.name = new_name;
      new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
    },
    unlink(parent, name) {
      delete parent.contents[name];
      parent.ctime = parent.mtime = Date.now();
    },
    rmdir(parent, name) {
      var node = FS.lookupNode(parent, name);
      for (var i in node.contents) {
        throw new FS.ErrnoError(55);
      }
      delete parent.contents[name];
      parent.ctime = parent.mtime = Date.now();
    },
    readdir(node) {
      return [ ".", "..", ...Object.keys(node.contents) ];
    },
    symlink(parent, newname, oldpath) {
      var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
      node.link = oldpath;
      return node;
    },
    readlink(node) {
      if (!FS.isLink(node.mode)) {
        throw new FS.ErrnoError(28);
      }
      return node.link;
    }
  },
  stream_ops: {
    read(stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= stream.node.usedBytes) return 0;
      var size = Math.min(stream.node.usedBytes - position, length);
      assert(size >= 0);
      if (size > 8 && contents.subarray) {
        // non-trivial, and typed array
        buffer.set(contents.subarray(position, position + size), offset);
      } else {
        for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
      }
      return size;
    },
    write(stream, buffer, offset, length, position, canOwn) {
      // The data buffer should be a typed array view
      assert(!(buffer instanceof ArrayBuffer));
      // If the buffer is located in main memory (HEAP), and if
      // memory can grow, we can't hold on to references of the
      // memory buffer, as they may get invalidated. That means we
      // need to do copy its contents.
      if (buffer.buffer === GROWABLE_HEAP_I8().buffer) {
        canOwn = false;
      }
      if (!length) return 0;
      var node = stream.node;
      node.mtime = node.ctime = Date.now();
      if (buffer.subarray && (!node.contents || node.contents.subarray)) {
        // This write is from a typed array to a typed array?
        if (canOwn) {
          assert(position === 0, "canOwn must imply no weird position inside the file");
          node.contents = buffer.subarray(offset, offset + length);
          node.usedBytes = length;
          return length;
        } else if (node.usedBytes === 0 && position === 0) {
          // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
          node.contents = buffer.slice(offset, offset + length);
          node.usedBytes = length;
          return length;
        } else if (position + length <= node.usedBytes) {
          // Writing to an already allocated and used subrange of the file?
          node.contents.set(buffer.subarray(offset, offset + length), position);
          return length;
        }
      }
      // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
      MEMFS.expandFileStorage(node, position + length);
      if (node.contents.subarray && buffer.subarray) {
        // Use typed array write which is available.
        node.contents.set(buffer.subarray(offset, offset + length), position);
      } else {
        for (var i = 0; i < length; i++) {
          node.contents[position + i] = buffer[offset + i];
        }
      }
      node.usedBytes = Math.max(node.usedBytes, position + length);
      return length;
    },
    llseek(stream, offset, whence) {
      var position = offset;
      if (whence === 1) {
        position += stream.position;
      } else if (whence === 2) {
        if (FS.isFile(stream.node.mode)) {
          position += stream.node.usedBytes;
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(28);
      }
      return position;
    },
    mmap(stream, length, position, prot, flags) {
      if (!FS.isFile(stream.node.mode)) {
        throw new FS.ErrnoError(43);
      }
      var ptr;
      var allocated;
      var contents = stream.node.contents;
      // Only make a new copy when MAP_PRIVATE is specified.
      if (!(flags & 2) && contents && contents.buffer === GROWABLE_HEAP_I8().buffer) {
        // We can't emulate MAP_SHARED when the file is not backed by the
        // buffer we're mapping to (e.g. the HEAP buffer).
        allocated = false;
        ptr = contents.byteOffset;
      } else {
        allocated = true;
        ptr = mmapAlloc(length);
        if (!ptr) {
          throw new FS.ErrnoError(48);
        }
        if (contents) {
          // Try to avoid unnecessary slices.
          if (position > 0 || position + length < contents.length) {
            if (contents.subarray) {
              contents = contents.subarray(position, position + length);
            } else {
              contents = Array.prototype.slice.call(contents, position, position + length);
            }
          }
          GROWABLE_HEAP_I8().set(contents, ptr);
        }
      }
      return {
        ptr,
        allocated
      };
    },
    msync(stream, buffer, offset, length, mmapFlags) {
      MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
      // should we check if bytesWritten and length are the same?
      return 0;
    }
  }
};

var asyncLoad = async url => {
  var arrayBuffer = await readAsync(url);
  assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
  return new Uint8Array(arrayBuffer);
};

asyncLoad.isAsync = true;

var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
  FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
};

var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
  // Ensure plugins are ready.
  if (typeof Browser != "undefined") Browser.init();
  var handled = false;
  preloadPlugins.forEach(plugin => {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
      plugin["handle"](byteArray, fullname, finish, onerror);
      handled = true;
    }
  });
  return handled;
};

var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
  // TODO we should allow people to just pass in a complete filename instead
  // of parent and name being that we just join them anyways
  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency(`cp ${fullname}`);
  // might have several active requests for the same fullname
  function processData(byteArray) {
    function finish(byteArray) {
      preFinish?.();
      if (!dontCreateFile) {
        FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
      }
      onload?.();
      removeRunDependency(dep);
    }
    if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
      onerror?.();
      removeRunDependency(dep);
    })) {
      return;
    }
    finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
    asyncLoad(url).then(processData, onerror);
  } else {
    processData(url);
  }
};

var FS_modeStringToFlags = str => {
  var flagModes = {
    "r": 0,
    "r+": 2,
    "w": 512 | 64 | 1,
    "w+": 512 | 64 | 2,
    "a": 1024 | 64 | 1,
    "a+": 1024 | 64 | 2
  };
  var flags = flagModes[str];
  if (typeof flags == "undefined") {
    throw new Error(`Unknown file open mode: ${str}`);
  }
  return flags;
};

var FS_getMode = (canRead, canWrite) => {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
};

var strError = errno => UTF8ToString(_strerror(errno));

var ERRNO_CODES = {
  "EPERM": 63,
  "ENOENT": 44,
  "ESRCH": 71,
  "EINTR": 27,
  "EIO": 29,
  "ENXIO": 60,
  "E2BIG": 1,
  "ENOEXEC": 45,
  "EBADF": 8,
  "ECHILD": 12,
  "EAGAIN": 6,
  "EWOULDBLOCK": 6,
  "ENOMEM": 48,
  "EACCES": 2,
  "EFAULT": 21,
  "ENOTBLK": 105,
  "EBUSY": 10,
  "EEXIST": 20,
  "EXDEV": 75,
  "ENODEV": 43,
  "ENOTDIR": 54,
  "EISDIR": 31,
  "EINVAL": 28,
  "ENFILE": 41,
  "EMFILE": 33,
  "ENOTTY": 59,
  "ETXTBSY": 74,
  "EFBIG": 22,
  "ENOSPC": 51,
  "ESPIPE": 70,
  "EROFS": 69,
  "EMLINK": 34,
  "EPIPE": 64,
  "EDOM": 18,
  "ERANGE": 68,
  "ENOMSG": 49,
  "EIDRM": 24,
  "ECHRNG": 106,
  "EL2NSYNC": 156,
  "EL3HLT": 107,
  "EL3RST": 108,
  "ELNRNG": 109,
  "EUNATCH": 110,
  "ENOCSI": 111,
  "EL2HLT": 112,
  "EDEADLK": 16,
  "ENOLCK": 46,
  "EBADE": 113,
  "EBADR": 114,
  "EXFULL": 115,
  "ENOANO": 104,
  "EBADRQC": 103,
  "EBADSLT": 102,
  "EDEADLOCK": 16,
  "EBFONT": 101,
  "ENOSTR": 100,
  "ENODATA": 116,
  "ETIME": 117,
  "ENOSR": 118,
  "ENONET": 119,
  "ENOPKG": 120,
  "EREMOTE": 121,
  "ENOLINK": 47,
  "EADV": 122,
  "ESRMNT": 123,
  "ECOMM": 124,
  "EPROTO": 65,
  "EMULTIHOP": 36,
  "EDOTDOT": 125,
  "EBADMSG": 9,
  "ENOTUNIQ": 126,
  "EBADFD": 127,
  "EREMCHG": 128,
  "ELIBACC": 129,
  "ELIBBAD": 130,
  "ELIBSCN": 131,
  "ELIBMAX": 132,
  "ELIBEXEC": 133,
  "ENOSYS": 52,
  "ENOTEMPTY": 55,
  "ENAMETOOLONG": 37,
  "ELOOP": 32,
  "EOPNOTSUPP": 138,
  "EPFNOSUPPORT": 139,
  "ECONNRESET": 15,
  "ENOBUFS": 42,
  "EAFNOSUPPORT": 5,
  "EPROTOTYPE": 67,
  "ENOTSOCK": 57,
  "ENOPROTOOPT": 50,
  "ESHUTDOWN": 140,
  "ECONNREFUSED": 14,
  "EADDRINUSE": 3,
  "ECONNABORTED": 13,
  "ENETUNREACH": 40,
  "ENETDOWN": 38,
  "ETIMEDOUT": 73,
  "EHOSTDOWN": 142,
  "EHOSTUNREACH": 23,
  "EINPROGRESS": 26,
  "EALREADY": 7,
  "EDESTADDRREQ": 17,
  "EMSGSIZE": 35,
  "EPROTONOSUPPORT": 66,
  "ESOCKTNOSUPPORT": 137,
  "EADDRNOTAVAIL": 4,
  "ENETRESET": 39,
  "EISCONN": 30,
  "ENOTCONN": 53,
  "ETOOMANYREFS": 141,
  "EUSERS": 136,
  "EDQUOT": 19,
  "ESTALE": 72,
  "ENOTSUP": 138,
  "ENOMEDIUM": 148,
  "EILSEQ": 25,
  "EOVERFLOW": 61,
  "ECANCELED": 11,
  "ENOTRECOVERABLE": 56,
  "EOWNERDEAD": 62,
  "ESTRPIPE": 135
};

var LZ4 = {
  DIR_MODE: 16895,
  FILE_MODE: 33279,
  CHUNK_SIZE: -1,
  codec: null,
  init() {
    if (LZ4.codec) return;
    LZ4.codec = (() => {
      /*
  MiniLZ4: Minimal LZ4 block decoding and encoding.
  
  based off of node-lz4, https://github.com/pierrec/node-lz4
  
  ====
  Copyright (c) 2012 Pierre Curto
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  ====
  
  changes have the same license
  */ var MiniLZ4 = (function() {
        var exports = {};
        /**
   * Decode a block. Assumptions: input contains all sequences of a 
   * chunk, output is large enough to receive the decoded data.
   * If the output buffer is too small, an error will be thrown.
   * If the returned value is negative, an error occured at the returned offset.
   *
   * @param {ArrayBufferView} input input data
   * @param {ArrayBufferView} output output data
   * @param {number=} sIdx
   * @param {number=} eIdx
   * @return {number} number of decoded bytes
   * @private
   */ exports.uncompress = function(input, output, sIdx, eIdx) {
          sIdx = sIdx || 0;
          eIdx = eIdx || (input.length - sIdx);
          // Process each sequence in the incoming data
          for (var i = sIdx, n = eIdx, j = 0; i < n; ) {
            var token = input[i++];
            // Literals
            var literals_length = (token >> 4);
            if (literals_length > 0) {
              // length of literals
              var l = literals_length + 240;
              while (l === 255) {
                l = input[i++];
                literals_length += l;
              }
              // Copy the literals
              var end = i + literals_length;
              while (i < end) output[j++] = input[i++];
              // End of buffer?
              if (i === n) return j;
            }
            // Match copy
            // 2 bytes offset (little endian)
            var offset = input[i++] | (input[i++] << 8);
            // XXX 0 is an invalid offset value
            if (offset === 0) return j;
            if (offset > j) return -(i - 2);
            // length of match copy
            var match_length = (token & 15);
            var l = match_length + 240;
            while (l === 255) {
              l = input[i++];
              match_length += l;
            }
            // Copy the match
            var pos = j - offset;
            // position of the match copy in the current output
            var end = j + match_length + 4;
            // minmatch = 4
            while (j < end) output[j++] = output[pos++];
          }
          return j;
        };
        var maxInputSize = 2113929216, minMatch = 4, hashLog = 16, hashShift = (minMatch * 8) - hashLog, hashSize = 1 << hashLog, copyLength = 8, lastLiterals = 5, mfLimit = copyLength + minMatch, skipStrength = 6, mlBits = 4, mlMask = (1 << mlBits) - 1, runBits = 8 - mlBits, runMask = (1 << runBits) - 1, hasher = /* XXX uint32( */ 2654435761;
        /* ) */ assert(hashShift === 16);
        var hashTable = new Int16Array(1 << 16);
        var empty = new Int16Array(hashTable.length);
        // CompressBound returns the maximum length of a lz4 block, given it's uncompressed length
        exports.compressBound = function(isize) {
          return isize > maxInputSize ? 0 : (isize + (isize / 255) + 16) | 0;
        };
        /** @param {number=} sIdx
  	@param {number=} eIdx */ exports.compress = function(src, dst, sIdx, eIdx) {
          hashTable.set(empty);
          return compressBlock(src, dst, 0, sIdx || 0, eIdx || dst.length);
        };
        function compressBlock(src, dst, pos, sIdx, eIdx) {
          // XXX var Hash = uint32() // Reusable unsigned 32 bits integer
          var dpos = sIdx;
          var dlen = eIdx - sIdx;
          var anchor = 0;
          if (src.length >= maxInputSize) throw new Error("input too large");
          // Minimum of input bytes for compression (LZ4 specs)
          if (src.length > mfLimit) {
            var n = exports.compressBound(src.length);
            if (dlen < n) throw Error("output too small: " + dlen + " < " + n);
            var step = 1, findMatchAttempts = (1 << skipStrength) + 3, srcLength = src.length - mfLimit;
            while (pos + minMatch < srcLength) {
              // Find a match
              // min match of 4 bytes aka sequence
              var sequenceLowBits = src[pos + 1] << 8 | src[pos];
              var sequenceHighBits = src[pos + 3] << 8 | src[pos + 2];
              // compute hash for the current sequence
              var hash = Math.imul(sequenceLowBits | (sequenceHighBits << 16), hasher) >>> hashShift;
              /* XXX Hash.fromBits(sequenceLowBits, sequenceHighBits)
  							.multiply(hasher)
  							.shiftr(hashShift)
  							.toNumber() */ // get the position of the sequence matching the hash
              // NB. since 2 different sequences may have the same hash
              // it is double-checked below
              // do -1 to distinguish between initialized and uninitialized values
              var ref = hashTable[hash] - 1;
              // save position of current sequence in hash table
              hashTable[hash] = pos + 1;
              // first reference or within 64k limit or current sequence !== hashed one: no match
              if (ref < 0 || ((pos - ref) >>> 16) > 0 || (((src[ref + 3] << 8 | src[ref + 2]) != sequenceHighBits) || ((src[ref + 1] << 8 | src[ref]) != sequenceLowBits))) {
                // increase step if nothing found within limit
                step = findMatchAttempts++ >> skipStrength;
                pos += step;
                continue;
              }
              findMatchAttempts = (1 << skipStrength) + 3;
              // got a match
              var literals_length = pos - anchor;
              var offset = pos - ref;
              // minMatch already verified
              pos += minMatch;
              ref += minMatch;
              // move to the end of the match (>=minMatch)
              var match_length = pos;
              while (pos < srcLength && src[pos] == src[ref]) {
                pos++;
                ref++;
              }
              // match length
              match_length = pos - match_length;
              // token
              var token = match_length < mlMask ? match_length : mlMask;
              // encode literals length
              if (literals_length >= runMask) {
                // add match length to the token
                dst[dpos++] = (runMask << mlBits) + token;
                for (var len = literals_length - runMask; len > 254; len -= 255) {
                  dst[dpos++] = 255;
                }
                dst[dpos++] = len;
              } else {
                // add match length to the token
                dst[dpos++] = (literals_length << mlBits) + token;
              }
              // write literals
              for (var i = 0; i < literals_length; i++) {
                dst[dpos++] = src[anchor + i];
              }
              // encode offset
              dst[dpos++] = offset;
              dst[dpos++] = (offset >> 8);
              // encode match length
              if (match_length >= mlMask) {
                match_length -= mlMask;
                while (match_length >= 255) {
                  match_length -= 255;
                  dst[dpos++] = 255;
                }
                dst[dpos++] = match_length;
              }
              anchor = pos;
            }
          }
          // cannot compress input
          if (anchor == 0) return 0;
          // Write last literals
          // encode literals length
          literals_length = src.length - anchor;
          if (literals_length >= runMask) {
            // add match length to the token
            dst[dpos++] = (runMask << mlBits);
            for (var ln = literals_length - runMask; ln > 254; ln -= 255) {
              dst[dpos++] = 255;
            }
            dst[dpos++] = ln;
          } else {
            // add match length to the token
            dst[dpos++] = (literals_length << mlBits);
          }
          // write literals
          pos = anchor;
          while (pos < src.length) {
            dst[dpos++] = src[pos++];
          }
          return dpos;
        }
        exports.CHUNK_SIZE = 2048;
        // musl libc does readaheads of 1024 bytes, so a multiple of that is a good idea
        exports.compressPackage = function(data, verify) {
          if (verify) {
            var temp = new Uint8Array(exports.CHUNK_SIZE);
          }
          // compress the data in chunks
          assert(data instanceof ArrayBuffer);
          data = new Uint8Array(data);
          console.log("compressing package of size " + data.length);
          var compressedChunks = [];
          var successes = [];
          var offset = 0;
          var total = 0;
          while (offset < data.length) {
            var chunk = data.subarray(offset, offset + exports.CHUNK_SIZE);
            //console.log('compress a chunk ' + [offset, total, data.length]);
            offset += exports.CHUNK_SIZE;
            var bound = exports.compressBound(chunk.length);
            var compressed = new Uint8Array(bound);
            var compressedSize = exports.compress(chunk, compressed);
            if (compressedSize > 0) {
              assert(compressedSize <= bound);
              compressed = compressed.subarray(0, compressedSize);
              compressedChunks.push(compressed);
              total += compressedSize;
              successes.push(1);
              if (verify) {
                var back = exports.uncompress(compressed, temp);
                assert(back === chunk.length, [ back, chunk.length ]);
                for (var i = 0; i < chunk.length; i++) {
                  assert(chunk[i] === temp[i]);
                }
              }
            } else {
              assert(compressedSize === 0);
              // failure to compress :(
              compressedChunks.push(chunk);
              total += chunk.length;
              // last chunk may not be the full exports.CHUNK_SIZE size
              successes.push(0);
            }
          }
          data = null;
          // XXX null out pack['data'] too?
          var compressedData = {
            "data": new Uint8Array(total + exports.CHUNK_SIZE * 2),
            // store all the compressed data, plus room for two cached decompressed chunk, in one fast array
            "cachedOffset": total,
            "cachedIndexes": [ -1, -1 ],
            // cache last two blocks, so that reading 1,2,3 + preloading another block won't trigger decompress thrashing
            "cachedChunks": [ null, null ],
            "offsets": [],
            // chunk# => start in compressed data
            "sizes": [],
            "successes": successes
          };
          offset = 0;
          for (var i = 0; i < compressedChunks.length; i++) {
            compressedData["data"].set(compressedChunks[i], offset);
            compressedData["offsets"][i] = offset;
            compressedData["sizes"][i] = compressedChunks[i].length;
            offset += compressedChunks[i].length;
          }
          console.log("compressed package into " + [ compressedData["data"].length ]);
          assert(offset === total);
          return compressedData;
        };
        assert(exports.CHUNK_SIZE < (1 << 15));
        // we use 16-bit ints as the type of the hash table, chunk size must be smaller
        return exports;
      })();
      if (typeof module != "undefined") {
        module.exports = MiniLZ4;
      }
      return MiniLZ4;
    })();
    LZ4.CHUNK_SIZE = LZ4.codec.CHUNK_SIZE;
  },
  loadPackage(pack, preloadPlugin) {
    LZ4.init();
    var compressedData = pack["compressedData"] || LZ4.codec.compressPackage(pack["data"]);
    assert(compressedData["cachedIndexes"].length === compressedData["cachedChunks"].length);
    for (var i = 0; i < compressedData["cachedIndexes"].length; i++) {
      compressedData["cachedIndexes"][i] = -1;
      compressedData["cachedChunks"][i] = compressedData["data"].subarray(compressedData["cachedOffset"] + i * LZ4.CHUNK_SIZE, compressedData["cachedOffset"] + (i + 1) * LZ4.CHUNK_SIZE);
      assert(compressedData["cachedChunks"][i].length === LZ4.CHUNK_SIZE);
    }
    pack["metadata"].files.forEach(file => {
      var dir = PATH.dirname(file.filename);
      var name = PATH.basename(file.filename);
      FS.createPath("", dir, true, true);
      var parent = FS.analyzePath(dir).object;
      LZ4.createNode(parent, name, LZ4.FILE_MODE, 0, {
        compressedData,
        start: file.start,
        end: file.end
      });
    });
    // Preload files if necessary. This code is largely similar to
    // createPreloadedFile in library_fs.js. However, a main difference here
    // is that we only decompress the file if it can be preloaded.
    // Abstracting out the common parts seems to be more effort than it is
    // worth.
    if (preloadPlugin) {
      Browser.init();
      pack["metadata"].files.forEach(file => {
        var handled = false;
        var fullname = file.filename;
        preloadPlugins.forEach(plugin => {
          if (handled) return;
          if (plugin["canHandle"](fullname)) {
            var dep = getUniqueRunDependency("fp " + fullname);
            addRunDependency(dep);
            var finish = () => removeRunDependency(dep);
            var byteArray = FS.readFile(fullname);
            plugin["handle"](byteArray, fullname, finish, finish);
            handled = true;
          }
        });
      });
    }
  },
  createNode(parent, name, mode, dev, contents, mtime) {
    var node = FS.createNode(parent, name, mode);
    node.mode = mode;
    node.node_ops = LZ4.node_ops;
    node.stream_ops = LZ4.stream_ops;
    this.atime = this.mtime = this.ctime = (mtime || new Date).getTime();
    assert(LZ4.FILE_MODE !== LZ4.DIR_MODE);
    if (mode === LZ4.FILE_MODE) {
      node.size = contents.end - contents.start;
      node.contents = contents;
    } else {
      node.size = 4096;
      node.contents = {};
    }
    if (parent) {
      parent.contents[name] = node;
    }
    return node;
  },
  node_ops: {
    getattr(node) {
      return {
        dev: 1,
        ino: node.id,
        mode: node.mode,
        nlink: 1,
        uid: 0,
        gid: 0,
        rdev: 0,
        size: node.size,
        atime: new Date(node.atime),
        mtime: new Date(node.mtime),
        ctime: new Date(node.ctime),
        blksize: 4096,
        blocks: Math.ceil(node.size / 4096)
      };
    },
    setattr(node, attr) {
      for (const key of [ "mode", "atime", "mtime", "ctime" ]) {
        if (attr[key]) {
          node[key] = attr[key];
        }
      }
    },
    lookup(parent, name) {
      throw new FS.ErrnoError(44);
    },
    mknod(parent, name, mode, dev) {
      throw new FS.ErrnoError(63);
    },
    rename(oldNode, newDir, newName) {
      throw new FS.ErrnoError(63);
    },
    unlink(parent, name) {
      throw new FS.ErrnoError(63);
    },
    rmdir(parent, name) {
      throw new FS.ErrnoError(63);
    },
    readdir(node) {
      throw new FS.ErrnoError(63);
    },
    symlink(parent, newName, oldPath) {
      throw new FS.ErrnoError(63);
    }
  },
  stream_ops: {
    read(stream, buffer, offset, length, position) {
      //out('LZ4 read ' + [offset, length, position]);
      length = Math.min(length, stream.node.size - position);
      if (length <= 0) return 0;
      var contents = stream.node.contents;
      var compressedData = contents.compressedData;
      var written = 0;
      while (written < length) {
        var start = contents.start + position + written;
        // start index in uncompressed data
        var desired = length - written;
        //out('current read: ' + ['start', start, 'desired', desired]);
        var chunkIndex = Math.floor(start / LZ4.CHUNK_SIZE);
        var compressedStart = compressedData["offsets"][chunkIndex];
        var compressedSize = compressedData["sizes"][chunkIndex];
        var currChunk;
        if (compressedData["successes"][chunkIndex]) {
          var found = compressedData["cachedIndexes"].indexOf(chunkIndex);
          if (found >= 0) {
            currChunk = compressedData["cachedChunks"][found];
          } else {
            // decompress the chunk
            compressedData["cachedIndexes"].pop();
            compressedData["cachedIndexes"].unshift(chunkIndex);
            currChunk = compressedData["cachedChunks"].pop();
            compressedData["cachedChunks"].unshift(currChunk);
            if (compressedData["debug"]) {
              out("decompressing chunk " + chunkIndex);
              Module["decompressedChunks"] = (Module["decompressedChunks"] || 0) + 1;
            }
            var compressed = compressedData["data"].subarray(compressedStart, compressedStart + compressedSize);
            //var t = Date.now();
            var originalSize = LZ4.codec.uncompress(compressed, currChunk);
            //out('decompress time: ' + (Date.now() - t));
            if (chunkIndex < compressedData["successes"].length - 1) assert(originalSize === LZ4.CHUNK_SIZE);
          }
        } else {
          // uncompressed
          currChunk = compressedData["data"].subarray(compressedStart, compressedStart + LZ4.CHUNK_SIZE);
        }
        var startInChunk = start % LZ4.CHUNK_SIZE;
        var endInChunk = Math.min(startInChunk + desired, LZ4.CHUNK_SIZE);
        buffer.set(currChunk.subarray(startInChunk, endInChunk), offset + written);
        var currWritten = endInChunk - startInChunk;
        written += currWritten;
      }
      return written;
    },
    write(stream, buffer, offset, length, position) {
      throw new FS.ErrnoError(29);
    },
    llseek(stream, offset, whence) {
      var position = offset;
      if (whence === 1) {
        position += stream.position;
      } else if (whence === 2) {
        if (FS.isFile(stream.node.mode)) {
          position += stream.node.size;
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(28);
      }
      return position;
    }
  }
};

var FS = {
  root: null,
  mounts: [],
  devices: {},
  streams: [],
  nextInode: 1,
  nameTable: null,
  currentPath: "/",
  initialized: false,
  ignorePermissions: true,
  filesystems: null,
  syncFSRequests: 0,
  readFiles: {},
  ErrnoError: class extends Error {
    name="ErrnoError";
    // We set the `name` property to be able to identify `FS.ErrnoError`
    // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
    // - when using PROXYFS, an error can come from an underlying FS
    // as different FS objects have their own FS.ErrnoError each,
    // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
    // we'll use the reliable test `err.name == "ErrnoError"` instead
    constructor(errno) {
      super(runtimeInitialized ? strError(errno) : "");
      this.errno = errno;
      for (var key in ERRNO_CODES) {
        if (ERRNO_CODES[key] === errno) {
          this.code = key;
          break;
        }
      }
    }
  },
  FSStream: class {
    shared={};
    get object() {
      return this.node;
    }
    set object(val) {
      this.node = val;
    }
    get isRead() {
      return (this.flags & 2097155) !== 1;
    }
    get isWrite() {
      return (this.flags & 2097155) !== 0;
    }
    get isAppend() {
      return (this.flags & 1024);
    }
    get flags() {
      return this.shared.flags;
    }
    set flags(val) {
      this.shared.flags = val;
    }
    get position() {
      return this.shared.position;
    }
    set position(val) {
      this.shared.position = val;
    }
  },
  FSNode: class {
    node_ops={};
    stream_ops={};
    readMode=292 | 73;
    writeMode=146;
    mounted=null;
    constructor(parent, name, mode, rdev) {
      if (!parent) {
        parent = this;
      }
      this.parent = parent;
      this.mount = parent.mount;
      this.id = FS.nextInode++;
      this.name = name;
      this.mode = mode;
      this.rdev = rdev;
      this.atime = this.mtime = this.ctime = Date.now();
    }
    get read() {
      return (this.mode & this.readMode) === this.readMode;
    }
    set read(val) {
      val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
    }
    get write() {
      return (this.mode & this.writeMode) === this.writeMode;
    }
    set write(val) {
      val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
    }
    get isFolder() {
      return FS.isDir(this.mode);
    }
    get isDevice() {
      return FS.isChrdev(this.mode);
    }
  },
  lookupPath(path, opts = {}) {
    if (!path) {
      throw new FS.ErrnoError(44);
    }
    opts.follow_mount ??= true;
    if (!PATH.isAbs(path)) {
      path = FS.cwd() + "/" + path;
    }
    // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
    linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
      // split the absolute path
      var parts = path.split("/").filter(p => !!p);
      // start at the root
      var current = FS.root;
      var current_path = "/";
      for (var i = 0; i < parts.length; i++) {
        var islast = (i === parts.length - 1);
        if (islast && opts.parent) {
          // stop resolving
          break;
        }
        if (parts[i] === ".") {
          continue;
        }
        if (parts[i] === "..") {
          current_path = PATH.dirname(current_path);
          current = current.parent;
          continue;
        }
        current_path = PATH.join2(current_path, parts[i]);
        try {
          current = FS.lookupNode(current, parts[i]);
        } catch (e) {
          // if noent_okay is true, suppress a ENOENT in the last component
          // and return an object with an undefined node. This is needed for
          // resolving symlinks in the path when creating a file.
          if ((e?.errno === 44) && islast && opts.noent_okay) {
            return {
              path: current_path
            };
          }
          throw e;
        }
        // jump to the mount's root node if this is a mountpoint
        if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
          current = current.mounted.root;
        }
        // by default, lookupPath will not follow a symlink if it is the final path component.
        // setting opts.follow = true will override this behavior.
        if (FS.isLink(current.mode) && (!islast || opts.follow)) {
          if (!current.node_ops.readlink) {
            throw new FS.ErrnoError(52);
          }
          var link = current.node_ops.readlink(current);
          if (!PATH.isAbs(link)) {
            link = PATH.dirname(current_path) + "/" + link;
          }
          path = link + "/" + parts.slice(i + 1).join("/");
          continue linkloop;
        }
      }
      return {
        path: current_path,
        node: current
      };
    }
    throw new FS.ErrnoError(32);
  },
  getPath(node) {
    var path;
    while (true) {
      if (FS.isRoot(node)) {
        var mount = node.mount.mountpoint;
        if (!path) return mount;
        return mount[mount.length - 1] !== "/" ? `${mount}/${path}` : mount + path;
      }
      path = path ? `${node.name}/${path}` : node.name;
      node = node.parent;
    }
  },
  hashName(parentid, name) {
    var hash = 0;
    for (var i = 0; i < name.length; i++) {
      hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
    }
    return ((parentid + hash) >>> 0) % FS.nameTable.length;
  },
  hashAddNode(node) {
    var hash = FS.hashName(node.parent.id, node.name);
    node.name_next = FS.nameTable[hash];
    FS.nameTable[hash] = node;
  },
  hashRemoveNode(node) {
    var hash = FS.hashName(node.parent.id, node.name);
    if (FS.nameTable[hash] === node) {
      FS.nameTable[hash] = node.name_next;
    } else {
      var current = FS.nameTable[hash];
      while (current) {
        if (current.name_next === node) {
          current.name_next = node.name_next;
          break;
        }
        current = current.name_next;
      }
    }
  },
  lookupNode(parent, name) {
    var errCode = FS.mayLookup(parent);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    var hash = FS.hashName(parent.id, name);
    for (var node = FS.nameTable[hash]; node; node = node.name_next) {
      var nodeName = node.name;
      if (node.parent.id === parent.id && nodeName === name) {
        return node;
      }
    }
    // if we failed to find it in the cache, call into the VFS
    return FS.lookup(parent, name);
  },
  createNode(parent, name, mode, rdev) {
    assert(typeof parent == "object");
    var node = new FS.FSNode(parent, name, mode, rdev);
    FS.hashAddNode(node);
    return node;
  },
  destroyNode(node) {
    FS.hashRemoveNode(node);
  },
  isRoot(node) {
    return node === node.parent;
  },
  isMountpoint(node) {
    return !!node.mounted;
  },
  isFile(mode) {
    return (mode & 61440) === 32768;
  },
  isDir(mode) {
    return (mode & 61440) === 16384;
  },
  isLink(mode) {
    return (mode & 61440) === 40960;
  },
  isChrdev(mode) {
    return (mode & 61440) === 8192;
  },
  isBlkdev(mode) {
    return (mode & 61440) === 24576;
  },
  isFIFO(mode) {
    return (mode & 61440) === 4096;
  },
  isSocket(mode) {
    return (mode & 49152) === 49152;
  },
  flagsToPermissionString(flag) {
    var perms = [ "r", "w", "rw" ][flag & 3];
    if ((flag & 512)) {
      perms += "w";
    }
    return perms;
  },
  nodePermissions(node, perms) {
    if (FS.ignorePermissions) {
      return 0;
    }
    // return 0 if any user, group or owner bits are set.
    if (perms.includes("r") && !(node.mode & 292)) {
      return 2;
    } else if (perms.includes("w") && !(node.mode & 146)) {
      return 2;
    } else if (perms.includes("x") && !(node.mode & 73)) {
      return 2;
    }
    return 0;
  },
  mayLookup(dir) {
    if (!FS.isDir(dir.mode)) return 54;
    var errCode = FS.nodePermissions(dir, "x");
    if (errCode) return errCode;
    if (!dir.node_ops.lookup) return 2;
    return 0;
  },
  mayCreate(dir, name) {
    if (!FS.isDir(dir.mode)) {
      return 54;
    }
    try {
      var node = FS.lookupNode(dir, name);
      return 20;
    } catch (e) {}
    return FS.nodePermissions(dir, "wx");
  },
  mayDelete(dir, name, isdir) {
    var node;
    try {
      node = FS.lookupNode(dir, name);
    } catch (e) {
      return e.errno;
    }
    var errCode = FS.nodePermissions(dir, "wx");
    if (errCode) {
      return errCode;
    }
    if (isdir) {
      if (!FS.isDir(node.mode)) {
        return 54;
      }
      if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
        return 10;
      }
    } else {
      if (FS.isDir(node.mode)) {
        return 31;
      }
    }
    return 0;
  },
  mayOpen(node, flags) {
    if (!node) {
      return 44;
    }
    if (FS.isLink(node.mode)) {
      return 32;
    } else if (FS.isDir(node.mode)) {
      if (FS.flagsToPermissionString(flags) !== "r" || (flags & (512 | 64))) {
        // TODO: check for O_SEARCH? (== search for dir only)
        return 31;
      }
    }
    return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
  },
  checkOpExists(op, err) {
    if (!op) {
      throw new FS.ErrnoError(err);
    }
    return op;
  },
  MAX_OPEN_FDS: 4096,
  nextfd() {
    for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
      if (!FS.streams[fd]) {
        return fd;
      }
    }
    throw new FS.ErrnoError(33);
  },
  getStreamChecked(fd) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(8);
    }
    return stream;
  },
  getStream: fd => FS.streams[fd],
  createStream(stream, fd = -1) {
    assert(fd >= -1);
    // clone it, so we can return an instance of FSStream
    stream = Object.assign(new FS.FSStream, stream);
    if (fd == -1) {
      fd = FS.nextfd();
    }
    stream.fd = fd;
    FS.streams[fd] = stream;
    return stream;
  },
  closeStream(fd) {
    FS.streams[fd] = null;
  },
  dupStream(origStream, fd = -1) {
    var stream = FS.createStream(origStream, fd);
    stream.stream_ops?.dup?.(stream);
    return stream;
  },
  doSetAttr(stream, node, attr) {
    var setattr = stream?.stream_ops.setattr;
    var arg = setattr ? stream : node;
    setattr ??= node.node_ops.setattr;
    FS.checkOpExists(setattr, 63);
    setattr(arg, attr);
  },
  chrdev_stream_ops: {
    open(stream) {
      var device = FS.getDevice(stream.node.rdev);
      // override node's stream ops with the device's
      stream.stream_ops = device.stream_ops;
      // forward the open call
      stream.stream_ops.open?.(stream);
    },
    llseek() {
      throw new FS.ErrnoError(70);
    }
  },
  major: dev => ((dev) >> 8),
  minor: dev => ((dev) & 255),
  makedev: (ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
    FS.devices[dev] = {
      stream_ops: ops
    };
  },
  getDevice: dev => FS.devices[dev],
  getMounts(mount) {
    var mounts = [];
    var check = [ mount ];
    while (check.length) {
      var m = check.pop();
      mounts.push(m);
      check.push(...m.mounts);
    }
    return mounts;
  },
  syncfs(populate, callback) {
    if (typeof populate == "function") {
      callback = populate;
      populate = false;
    }
    FS.syncFSRequests++;
    if (FS.syncFSRequests > 1) {
      err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
    }
    var mounts = FS.getMounts(FS.root.mount);
    var completed = 0;
    function doCallback(errCode) {
      assert(FS.syncFSRequests > 0);
      FS.syncFSRequests--;
      return callback(errCode);
    }
    function done(errCode) {
      if (errCode) {
        if (!done.errored) {
          done.errored = true;
          return doCallback(errCode);
        }
        return;
      }
      if (++completed >= mounts.length) {
        doCallback(null);
      }
    }
    // sync all mounts
    mounts.forEach(mount => {
      if (!mount.type.syncfs) {
        return done(null);
      }
      mount.type.syncfs(mount, populate, done);
    });
  },
  mount(type, opts, mountpoint) {
    if (typeof type == "string") {
      // The filesystem was not included, and instead we have an error
      // message stored in the variable.
      throw type;
    }
    var root = mountpoint === "/";
    var pseudo = !mountpoint;
    var node;
    if (root && FS.root) {
      throw new FS.ErrnoError(10);
    } else if (!root && !pseudo) {
      var lookup = FS.lookupPath(mountpoint, {
        follow_mount: false
      });
      mountpoint = lookup.path;
      // use the absolute path
      node = lookup.node;
      if (FS.isMountpoint(node)) {
        throw new FS.ErrnoError(10);
      }
      if (!FS.isDir(node.mode)) {
        throw new FS.ErrnoError(54);
      }
    }
    var mount = {
      type,
      opts,
      mountpoint,
      mounts: []
    };
    // create a root node for the fs
    var mountRoot = type.mount(mount);
    mountRoot.mount = mount;
    mount.root = mountRoot;
    if (root) {
      FS.root = mountRoot;
    } else if (node) {
      // set as a mountpoint
      node.mounted = mount;
      // add the new mount to the current mount's children
      if (node.mount) {
        node.mount.mounts.push(mount);
      }
    }
    return mountRoot;
  },
  unmount(mountpoint) {
    var lookup = FS.lookupPath(mountpoint, {
      follow_mount: false
    });
    if (!FS.isMountpoint(lookup.node)) {
      throw new FS.ErrnoError(28);
    }
    // destroy the nodes for this mount, and all its child mounts
    var node = lookup.node;
    var mount = node.mounted;
    var mounts = FS.getMounts(mount);
    Object.keys(FS.nameTable).forEach(hash => {
      var current = FS.nameTable[hash];
      while (current) {
        var next = current.name_next;
        if (mounts.includes(current.mount)) {
          FS.destroyNode(current);
        }
        current = next;
      }
    });
    // no longer a mountpoint
    node.mounted = null;
    // remove this mount from the child mounts
    var idx = node.mount.mounts.indexOf(mount);
    assert(idx !== -1);
    node.mount.mounts.splice(idx, 1);
  },
  lookup(parent, name) {
    return parent.node_ops.lookup(parent, name);
  },
  mknod(path, mode, dev) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    if (!name) {
      throw new FS.ErrnoError(28);
    }
    if (name === "." || name === "..") {
      throw new FS.ErrnoError(20);
    }
    var errCode = FS.mayCreate(parent, name);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.mknod) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.mknod(parent, name, mode, dev);
  },
  statfs(path) {
    return FS.statfsNode(FS.lookupPath(path, {
      follow: true
    }).node);
  },
  statfsStream(stream) {
    // We keep a separate statfsStream function because noderawfs overrides
    // it. In noderawfs, stream.node is sometimes null. Instead, we need to
    // look at stream.path.
    return FS.statfsNode(stream.node);
  },
  statfsNode(node) {
    // NOTE: None of the defaults here are true. We're just returning safe and
    //       sane values. Currently nodefs and rawfs replace these defaults,
    //       other file systems leave them alone.
    var rtn = {
      bsize: 4096,
      frsize: 4096,
      blocks: 1e6,
      bfree: 5e5,
      bavail: 5e5,
      files: FS.nextInode,
      ffree: FS.nextInode - 1,
      fsid: 42,
      flags: 2,
      namelen: 255
    };
    if (node.node_ops.statfs) {
      Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
    }
    return rtn;
  },
  create(path, mode = 438) {
    mode &= 4095;
    mode |= 32768;
    return FS.mknod(path, mode, 0);
  },
  mkdir(path, mode = 511) {
    mode &= 511 | 512;
    mode |= 16384;
    return FS.mknod(path, mode, 0);
  },
  mkdirTree(path, mode) {
    var dirs = path.split("/");
    var d = "";
    for (var dir of dirs) {
      if (!dir) continue;
      if (d || PATH.isAbs(path)) d += "/";
      d += dir;
      try {
        FS.mkdir(d, mode);
      } catch (e) {
        if (e.errno != 20) throw e;
      }
    }
  },
  mkdev(path, mode, dev) {
    if (typeof dev == "undefined") {
      dev = mode;
      mode = 438;
    }
    mode |= 8192;
    return FS.mknod(path, mode, dev);
  },
  symlink(oldpath, newpath) {
    if (!PATH_FS.resolve(oldpath)) {
      throw new FS.ErrnoError(44);
    }
    var lookup = FS.lookupPath(newpath, {
      parent: true
    });
    var parent = lookup.node;
    if (!parent) {
      throw new FS.ErrnoError(44);
    }
    var newname = PATH.basename(newpath);
    var errCode = FS.mayCreate(parent, newname);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.symlink) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.symlink(parent, newname, oldpath);
  },
  rename(old_path, new_path) {
    var old_dirname = PATH.dirname(old_path);
    var new_dirname = PATH.dirname(new_path);
    var old_name = PATH.basename(old_path);
    var new_name = PATH.basename(new_path);
    // parents must exist
    var lookup, old_dir, new_dir;
    // let the errors from non existent directories percolate up
    lookup = FS.lookupPath(old_path, {
      parent: true
    });
    old_dir = lookup.node;
    lookup = FS.lookupPath(new_path, {
      parent: true
    });
    new_dir = lookup.node;
    if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
    // need to be part of the same mount
    if (old_dir.mount !== new_dir.mount) {
      throw new FS.ErrnoError(75);
    }
    // source must exist
    var old_node = FS.lookupNode(old_dir, old_name);
    // old path should not be an ancestor of the new path
    var relative = PATH_FS.relative(old_path, new_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(28);
    }
    // new path should not be an ancestor of the old path
    relative = PATH_FS.relative(new_path, old_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(55);
    }
    // see if the new path already exists
    var new_node;
    try {
      new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    // early out if nothing needs to change
    if (old_node === new_node) {
      return;
    }
    // we'll need to delete the old entry
    var isdir = FS.isDir(old_node.mode);
    var errCode = FS.mayDelete(old_dir, old_name, isdir);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    // need delete permissions if we'll be overwriting.
    // need create permissions if new doesn't already exist.
    errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!old_dir.node_ops.rename) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
      throw new FS.ErrnoError(10);
    }
    // if we are going to change the parent, check write permissions
    if (new_dir !== old_dir) {
      errCode = FS.nodePermissions(old_dir, "w");
      if (errCode) {
        throw new FS.ErrnoError(errCode);
      }
    }
    // remove the node from the lookup hash
    FS.hashRemoveNode(old_node);
    // do the underlying fs rename
    try {
      old_dir.node_ops.rename(old_node, new_dir, new_name);
      // update old node (we do this here to avoid each backend
      // needing to)
      old_node.parent = new_dir;
    } catch (e) {
      throw e;
    } finally {
      // add the node back to the hash (in case node_ops.rename
      // changed its name)
      FS.hashAddNode(old_node);
    }
  },
  rmdir(path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var errCode = FS.mayDelete(parent, name, true);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.rmdir) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    parent.node_ops.rmdir(parent, name);
    FS.destroyNode(node);
  },
  readdir(path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
    return readdir(node);
  },
  unlink(path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    if (!parent) {
      throw new FS.ErrnoError(44);
    }
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var errCode = FS.mayDelete(parent, name, false);
    if (errCode) {
      // According to POSIX, we should map EISDIR to EPERM, but
      // we instead do what Linux does (and we must, as we use
      // the musl linux libc).
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.unlink) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    parent.node_ops.unlink(parent, name);
    FS.destroyNode(node);
  },
  readlink(path) {
    var lookup = FS.lookupPath(path);
    var link = lookup.node;
    if (!link) {
      throw new FS.ErrnoError(44);
    }
    if (!link.node_ops.readlink) {
      throw new FS.ErrnoError(28);
    }
    return link.node_ops.readlink(link);
  },
  stat(path, dontFollow) {
    var lookup = FS.lookupPath(path, {
      follow: !dontFollow
    });
    var node = lookup.node;
    var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
    return getattr(node);
  },
  fstat(fd) {
    var stream = FS.getStreamChecked(fd);
    var node = stream.node;
    var getattr = stream.stream_ops.getattr;
    var arg = getattr ? stream : node;
    getattr ??= node.node_ops.getattr;
    FS.checkOpExists(getattr, 63);
    return getattr(arg);
  },
  lstat(path) {
    return FS.stat(path, true);
  },
  doChmod(stream, node, mode, dontFollow) {
    FS.doSetAttr(stream, node, {
      mode: (mode & 4095) | (node.mode & ~4095),
      ctime: Date.now(),
      dontFollow
    });
  },
  chmod(path, mode, dontFollow) {
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    FS.doChmod(null, node, mode, dontFollow);
  },
  lchmod(path, mode) {
    FS.chmod(path, mode, true);
  },
  fchmod(fd, mode) {
    var stream = FS.getStreamChecked(fd);
    FS.doChmod(stream, stream.node, mode, false);
  },
  doChown(stream, node, dontFollow) {
    FS.doSetAttr(stream, node, {
      timestamp: Date.now(),
      dontFollow
    });
  },
  chown(path, uid, gid, dontFollow) {
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    FS.doChown(null, node, dontFollow);
  },
  lchown(path, uid, gid) {
    FS.chown(path, uid, gid, true);
  },
  fchown(fd, uid, gid) {
    var stream = FS.getStreamChecked(fd);
    FS.doChown(stream, stream.node, false);
  },
  doTruncate(stream, node, len) {
    if (FS.isDir(node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!FS.isFile(node.mode)) {
      throw new FS.ErrnoError(28);
    }
    var errCode = FS.nodePermissions(node, "w");
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    FS.doSetAttr(stream, node, {
      size: len,
      timestamp: Date.now()
    });
  },
  truncate(path, len) {
    if (len < 0) {
      throw new FS.ErrnoError(28);
    }
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: true
      });
      node = lookup.node;
    } else {
      node = path;
    }
    FS.doTruncate(null, node, len);
  },
  ftruncate(fd, len) {
    var stream = FS.getStreamChecked(fd);
    if (len < 0 || (stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(28);
    }
    FS.doTruncate(stream, stream.node, len);
  },
  utime(path, atime, mtime) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
    setattr(node, {
      atime,
      mtime
    });
  },
  open(path, flags, mode = 438) {
    if (path === "") {
      throw new FS.ErrnoError(44);
    }
    flags = typeof flags == "string" ? FS_modeStringToFlags(flags) : flags;
    if ((flags & 64)) {
      mode = (mode & 4095) | 32768;
    } else {
      mode = 0;
    }
    var node;
    var isDirPath;
    if (typeof path == "object") {
      node = path;
    } else {
      isDirPath = path.endsWith("/");
      // noent_okay makes it so that if the final component of the path
      // doesn't exist, lookupPath returns `node: undefined`. `path` will be
      // updated to point to the target of all symlinks.
      var lookup = FS.lookupPath(path, {
        follow: !(flags & 131072),
        noent_okay: true
      });
      node = lookup.node;
      path = lookup.path;
    }
    // perhaps we need to create the node
    var created = false;
    if ((flags & 64)) {
      if (node) {
        // if O_CREAT and O_EXCL are set, error out if the node already exists
        if ((flags & 128)) {
          throw new FS.ErrnoError(20);
        }
      } else if (isDirPath) {
        throw new FS.ErrnoError(31);
      } else {
        // node doesn't exist, try to create it
        // Ignore the permission bits here to ensure we can `open` this new
        // file below. We use chmod below the apply the permissions once the
        // file is open.
        node = FS.mknod(path, mode | 511, 0);
        created = true;
      }
    }
    if (!node) {
      throw new FS.ErrnoError(44);
    }
    // can't truncate a device
    if (FS.isChrdev(node.mode)) {
      flags &= ~512;
    }
    // if asked only for a directory, then this must be one
    if ((flags & 65536) && !FS.isDir(node.mode)) {
      throw new FS.ErrnoError(54);
    }
    // check permissions, if this is not a file we just created now (it is ok to
    // create and write to a file with read-only permissions; it is read-only
    // for later use)
    if (!created) {
      var errCode = FS.mayOpen(node, flags);
      if (errCode) {
        throw new FS.ErrnoError(errCode);
      }
    }
    // do truncation if necessary
    if ((flags & 512) && !created) {
      FS.truncate(node, 0);
    }
    // we've already handled these, don't pass down to the underlying vfs
    flags &= ~(128 | 512 | 131072);
    // register the stream with the filesystem
    var stream = FS.createStream({
      node,
      path: FS.getPath(node),
      // we want the absolute path to the node
      flags,
      seekable: true,
      position: 0,
      stream_ops: node.stream_ops,
      // used by the file family libc calls (fopen, fwrite, ferror, etc.)
      ungotten: [],
      error: false
    });
    // call the new stream's open function
    if (stream.stream_ops.open) {
      stream.stream_ops.open(stream);
    }
    if (created) {
      FS.chmod(node, mode & 511);
    }
    if (Module["logReadFiles"] && !(flags & 1)) {
      if (!(path in FS.readFiles)) {
        FS.readFiles[path] = 1;
      }
    }
    return stream;
  },
  close(stream) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (stream.getdents) stream.getdents = null;
    // free readdir state
    try {
      if (stream.stream_ops.close) {
        stream.stream_ops.close(stream);
      }
    } catch (e) {
      throw e;
    } finally {
      FS.closeStream(stream.fd);
    }
    stream.fd = null;
  },
  isClosed(stream) {
    return stream.fd === null;
  },
  llseek(stream, offset, whence) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (!stream.seekable || !stream.stream_ops.llseek) {
      throw new FS.ErrnoError(70);
    }
    if (whence != 0 && whence != 1 && whence != 2) {
      throw new FS.ErrnoError(28);
    }
    stream.position = stream.stream_ops.llseek(stream, offset, whence);
    stream.ungotten = [];
    return stream.position;
  },
  read(stream, buffer, offset, length, position) {
    assert(offset >= 0);
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.read) {
      throw new FS.ErrnoError(28);
    }
    var seeking = typeof position != "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
    if (!seeking) stream.position += bytesRead;
    return bytesRead;
  },
  write(stream, buffer, offset, length, position, canOwn) {
    assert(offset >= 0);
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.write) {
      throw new FS.ErrnoError(28);
    }
    if (stream.seekable && stream.flags & 1024) {
      // seek to the end before writing in append mode
      FS.llseek(stream, 0, 2);
    }
    var seeking = typeof position != "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
    if (!seeking) stream.position += bytesWritten;
    return bytesWritten;
  },
  mmap(stream, length, position, prot, flags) {
    // User requests writing to file (prot & PROT_WRITE != 0).
    // Checking if we have permissions to write to the file unless
    // MAP_PRIVATE flag is set. According to POSIX spec it is possible
    // to write to file opened in read-only mode with MAP_PRIVATE flag,
    // as all modifications will be visible only in the memory of
    // the current process.
    if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
      throw new FS.ErrnoError(2);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(2);
    }
    if (!stream.stream_ops.mmap) {
      throw new FS.ErrnoError(43);
    }
    if (!length) {
      throw new FS.ErrnoError(28);
    }
    return stream.stream_ops.mmap(stream, length, position, prot, flags);
  },
  msync(stream, buffer, offset, length, mmapFlags) {
    assert(offset >= 0);
    if (!stream.stream_ops.msync) {
      return 0;
    }
    return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
  },
  ioctl(stream, cmd, arg) {
    if (!stream.stream_ops.ioctl) {
      throw new FS.ErrnoError(59);
    }
    return stream.stream_ops.ioctl(stream, cmd, arg);
  },
  readFile(path, opts = {}) {
    opts.flags = opts.flags || 0;
    opts.encoding = opts.encoding || "binary";
    if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
      throw new Error(`Invalid encoding type "${opts.encoding}"`);
    }
    var ret;
    var stream = FS.open(path, opts.flags);
    var stat = FS.stat(path);
    var length = stat.size;
    var buf = new Uint8Array(length);
    FS.read(stream, buf, 0, length, 0);
    if (opts.encoding === "utf8") {
      ret = UTF8ArrayToString(buf);
    } else if (opts.encoding === "binary") {
      ret = buf;
    }
    FS.close(stream);
    return ret;
  },
  writeFile(path, data, opts = {}) {
    opts.flags = opts.flags || 577;
    var stream = FS.open(path, opts.flags, opts.mode);
    if (typeof data == "string") {
      var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
      var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
      FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
    } else if (ArrayBuffer.isView(data)) {
      FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
    } else {
      throw new Error("Unsupported data type");
    }
    FS.close(stream);
  },
  cwd: () => FS.currentPath,
  chdir(path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    if (lookup.node === null) {
      throw new FS.ErrnoError(44);
    }
    if (!FS.isDir(lookup.node.mode)) {
      throw new FS.ErrnoError(54);
    }
    var errCode = FS.nodePermissions(lookup.node, "x");
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    FS.currentPath = lookup.path;
  },
  createDefaultDirectories() {
    FS.mkdir("/tmp");
    FS.mkdir("/home");
    FS.mkdir("/home/web_user");
  },
  createDefaultDevices() {
    // create /dev
    FS.mkdir("/dev");
    // setup /dev/null
    FS.registerDevice(FS.makedev(1, 3), {
      read: () => 0,
      write: (stream, buffer, offset, length, pos) => length,
      llseek: () => 0
    });
    FS.mkdev("/dev/null", FS.makedev(1, 3));
    // setup /dev/tty and /dev/tty1
    // stderr needs to print output using err() rather than out()
    // so we register a second tty just for it.
    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
    FS.mkdev("/dev/tty", FS.makedev(5, 0));
    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
    // setup /dev/[u]random
    // use a buffer to avoid overhead of individual crypto calls per byte
    var randomBuffer = new Uint8Array(1024), randomLeft = 0;
    var randomByte = () => {
      if (randomLeft === 0) {
        randomFill(randomBuffer);
        randomLeft = randomBuffer.byteLength;
      }
      return randomBuffer[--randomLeft];
    };
    FS.createDevice("/dev", "random", randomByte);
    FS.createDevice("/dev", "urandom", randomByte);
    // we're not going to emulate the actual shm device,
    // just create the tmp dirs that reside in it commonly
    FS.mkdir("/dev/shm");
    FS.mkdir("/dev/shm/tmp");
  },
  createSpecialDirectories() {
    // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
    // name of the stream for fd 6 (see test_unistd_ttyname)
    FS.mkdir("/proc");
    var proc_self = FS.mkdir("/proc/self");
    FS.mkdir("/proc/self/fd");
    FS.mount({
      mount() {
        var node = FS.createNode(proc_self, "fd", 16895, 73);
        node.stream_ops = {
          llseek: MEMFS.stream_ops.llseek
        };
        node.node_ops = {
          lookup(parent, name) {
            var fd = +name;
            var stream = FS.getStreamChecked(fd);
            var ret = {
              parent: null,
              mount: {
                mountpoint: "fake"
              },
              node_ops: {
                readlink: () => stream.path
              },
              id: fd + 1
            };
            ret.parent = ret;
            // make it look like a simple root node
            return ret;
          },
          readdir() {
            return Array.from(FS.streams.entries()).filter(([k, v]) => v).map(([k, v]) => k.toString());
          }
        };
        return node;
      }
    }, {}, "/proc/self/fd");
  },
  createStandardStreams(input, output, error) {
    // TODO deprecate the old functionality of a single
    // input / output callback and that utilizes FS.createDevice
    // and instead require a unique set of stream ops
    // by default, we symlink the standard streams to the
    // default tty devices. however, if the standard streams
    // have been overwritten we create a unique device for
    // them instead.
    if (input) {
      FS.createDevice("/dev", "stdin", input);
    } else {
      FS.symlink("/dev/tty", "/dev/stdin");
    }
    if (output) {
      FS.createDevice("/dev", "stdout", null, output);
    } else {
      FS.symlink("/dev/tty", "/dev/stdout");
    }
    if (error) {
      FS.createDevice("/dev", "stderr", null, error);
    } else {
      FS.symlink("/dev/tty1", "/dev/stderr");
    }
    // open default streams for the stdin, stdout and stderr devices
    var stdin = FS.open("/dev/stdin", 0);
    var stdout = FS.open("/dev/stdout", 1);
    var stderr = FS.open("/dev/stderr", 1);
    assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
    assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
    assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
  },
  staticInit() {
    FS.nameTable = new Array(4096);
    FS.mount(MEMFS, {}, "/");
    FS.createDefaultDirectories();
    FS.createDefaultDevices();
    FS.createSpecialDirectories();
    FS.filesystems = {
      "MEMFS": MEMFS
    };
  },
  init(input, output, error) {
    assert(!FS.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
    FS.initialized = true;
    // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
    input ??= Module["stdin"];
    output ??= Module["stdout"];
    error ??= Module["stderr"];
    FS.createStandardStreams(input, output, error);
  },
  quit() {
    FS.initialized = false;
    // force-flush all streams, so we get musl std streams printed out
    _fflush(0);
    // close all of our streams
    for (var stream of FS.streams) {
      if (stream) {
        FS.close(stream);
      }
    }
  },
  findObject(path, dontResolveLastLink) {
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (!ret.exists) {
      return null;
    }
    return ret.object;
  },
  analyzePath(path, dontResolveLastLink) {
    // operate from within the context of the symlink's target
    try {
      var lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      path = lookup.path;
    } catch (e) {}
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    try {
      var lookup = FS.lookupPath(path, {
        parent: true
      });
      ret.parentExists = true;
      ret.parentPath = lookup.path;
      ret.parentObject = lookup.node;
      ret.name = PATH.basename(path);
      lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      ret.exists = true;
      ret.path = lookup.path;
      ret.object = lookup.node;
      ret.name = lookup.node.name;
      ret.isRoot = lookup.path === "/";
    } catch (e) {
      ret.error = e.errno;
    }
    return ret;
  },
  createPath(parent, path, canRead, canWrite) {
    parent = typeof parent == "string" ? parent : FS.getPath(parent);
    var parts = path.split("/").reverse();
    while (parts.length) {
      var part = parts.pop();
      if (!part) continue;
      var current = PATH.join2(parent, part);
      try {
        FS.mkdir(current);
      } catch (e) {
        if (e.errno != 20) throw e;
      }
      parent = current;
    }
    return current;
  },
  createFile(parent, name, properties, canRead, canWrite) {
    var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
    var mode = FS_getMode(canRead, canWrite);
    return FS.create(path, mode);
  },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
    var path = name;
    if (parent) {
      parent = typeof parent == "string" ? parent : FS.getPath(parent);
      path = name ? PATH.join2(parent, name) : parent;
    }
    var mode = FS_getMode(canRead, canWrite);
    var node = FS.create(path, mode);
    if (data) {
      if (typeof data == "string") {
        var arr = new Array(data.length);
        for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
        data = arr;
      }
      // make sure we can write to the file
      FS.chmod(node, mode | 146);
      var stream = FS.open(node, 577);
      FS.write(stream, data, 0, data.length, 0, canOwn);
      FS.close(stream);
      FS.chmod(node, mode);
    }
  },
  createDevice(parent, name, input, output) {
    var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
    var mode = FS_getMode(!!input, !!output);
    FS.createDevice.major ??= 64;
    var dev = FS.makedev(FS.createDevice.major++, 0);
    // Create a fake device that a set of stream ops to emulate
    // the old behavior.
    FS.registerDevice(dev, {
      open(stream) {
        stream.seekable = false;
      },
      close(stream) {
        // flush any pending line data
        if (output?.buffer?.length) {
          output(10);
        }
      },
      read(stream, buffer, offset, length, pos) {
        var bytesRead = 0;
        for (var i = 0; i < length; i++) {
          var result;
          try {
            result = input();
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (result === undefined && bytesRead === 0) {
            throw new FS.ErrnoError(6);
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          buffer[offset + i] = result;
        }
        if (bytesRead) {
          stream.node.atime = Date.now();
        }
        return bytesRead;
      },
      write(stream, buffer, offset, length, pos) {
        for (var i = 0; i < length; i++) {
          try {
            output(buffer[offset + i]);
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
        if (length) {
          stream.node.mtime = stream.node.ctime = Date.now();
        }
        return i;
      }
    });
    return FS.mkdev(path, mode, dev);
  },
  forceLoadFile(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    if (typeof XMLHttpRequest != "undefined") {
      throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
    } else {
      // Command-line.
      try {
        obj.contents = readBinary(obj.url);
        obj.usedBytes = obj.contents.length;
      } catch (e) {
        throw new FS.ErrnoError(29);
      }
    }
  },
  createLazyFile(parent, name, url, canRead, canWrite) {
    // Lazy chunked Uint8Array (implements get and length from Uint8Array).
    // Actual getting is abstracted away for eventual reuse.
    class LazyUint8Array {
      lengthKnown=false;
      chunks=[];
      // Loaded chunks. Index is the chunk number
      get(idx) {
        if (idx > this.length - 1 || idx < 0) {
          return undefined;
        }
        var chunkOffset = idx % this.chunkSize;
        var chunkNum = (idx / this.chunkSize) | 0;
        return this.getter(chunkNum)[chunkOffset];
      }
      setDataGetter(getter) {
        this.getter = getter;
      }
      cacheLength() {
        // Find length
        var xhr = new XMLHttpRequest;
        xhr.open("HEAD", url, false);
        xhr.send(null);
        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
        var datalength = Number(xhr.getResponseHeader("Content-length"));
        var header;
        var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
        var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
        var chunkSize = 1024 * 1024;
        // Chunk size in bytes
        if (!hasByteServing) chunkSize = datalength;
        // Function to get a range from the remote URL.
        var doXHR = (from, to) => {
          if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
          if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
          // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
          var xhr = new XMLHttpRequest;
          xhr.open("GET", url, false);
          if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
          // Some hints to the browser that we want binary data.
          xhr.responseType = "arraybuffer";
          if (xhr.overrideMimeType) {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
          }
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          if (xhr.response !== undefined) {
            return new Uint8Array(/** @type{Array<number>} */ (xhr.response || []));
          }
          return intArrayFromString(xhr.responseText || "", true);
        };
        var lazyArray = this;
        lazyArray.setDataGetter(chunkNum => {
          var start = chunkNum * chunkSize;
          var end = (chunkNum + 1) * chunkSize - 1;
          // including this byte
          end = Math.min(end, datalength - 1);
          // if datalength-1 is selected, this is the last block
          if (typeof lazyArray.chunks[chunkNum] == "undefined") {
            lazyArray.chunks[chunkNum] = doXHR(start, end);
          }
          if (typeof lazyArray.chunks[chunkNum] == "undefined") throw new Error("doXHR failed!");
          return lazyArray.chunks[chunkNum];
        });
        if (usesGzip || !datalength) {
          // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
          chunkSize = datalength = 1;
          // this will force getter(0)/doXHR do download the whole file
          datalength = this.getter(0).length;
          chunkSize = datalength;
          out("LazyFiles on gzip forces download of the whole file when length is accessed");
        }
        this._length = datalength;
        this._chunkSize = chunkSize;
        this.lengthKnown = true;
      }
      get length() {
        if (!this.lengthKnown) {
          this.cacheLength();
        }
        return this._length;
      }
      get chunkSize() {
        if (!this.lengthKnown) {
          this.cacheLength();
        }
        return this._chunkSize;
      }
    }
    if (typeof XMLHttpRequest != "undefined") {
      if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
      var lazyArray = new LazyUint8Array;
      var properties = {
        isDevice: false,
        contents: lazyArray
      };
    } else {
      var properties = {
        isDevice: false,
        url
      };
    }
    var node = FS.createFile(parent, name, properties, canRead, canWrite);
    // This is a total hack, but I want to get this lazy file code out of the
    // core of MEMFS. If we want to keep this lazy file concept I feel it should
    // be its own thin LAZYFS proxying calls to MEMFS.
    if (properties.contents) {
      node.contents = properties.contents;
    } else if (properties.url) {
      node.contents = null;
      node.url = properties.url;
    }
    // Add a function that defers querying the file size until it is asked the first time.
    Object.defineProperties(node, {
      usedBytes: {
        get: function() {
          return this.contents.length;
        }
      }
    });
    // override each stream op with one that tries to force load the lazy file first
    var stream_ops = {};
    var keys = Object.keys(node.stream_ops);
    keys.forEach(key => {
      var fn = node.stream_ops[key];
      stream_ops[key] = (...args) => {
        FS.forceLoadFile(node);
        return fn(...args);
      };
    });
    function writeChunks(stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= contents.length) return 0;
      var size = Math.min(contents.length - position, length);
      assert(size >= 0);
      if (contents.slice) {
        // normal array
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents[position + i];
        }
      } else {
        for (var i = 0; i < size; i++) {
          // LazyUint8Array from sync binary XHR
          buffer[offset + i] = contents.get(position + i);
        }
      }
      return size;
    }
    // use a custom read function
    stream_ops.read = (stream, buffer, offset, length, position) => {
      FS.forceLoadFile(node);
      return writeChunks(stream, buffer, offset, length, position);
    };
    // use a custom mmap function
    stream_ops.mmap = (stream, length, position, prot, flags) => {
      FS.forceLoadFile(node);
      var ptr = mmapAlloc(length);
      if (!ptr) {
        throw new FS.ErrnoError(48);
      }
      writeChunks(stream, GROWABLE_HEAP_I8(), ptr, length, position);
      return {
        ptr,
        allocated: true
      };
    };
    node.stream_ops = stream_ops;
    return node;
  },
  absolutePath() {
    abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
  },
  createFolder() {
    abort("FS.createFolder has been removed; use FS.mkdir instead");
  },
  createLink() {
    abort("FS.createLink has been removed; use FS.symlink instead");
  },
  joinPath() {
    abort("FS.joinPath has been removed; use PATH.join instead");
  },
  mmapAlloc() {
    abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
  },
  standardizePath() {
    abort("FS.standardizePath has been removed; use PATH.normalize instead");
  }
};

var SYSCALLS = {
  DEFAULT_POLLMASK: 5,
  calculateAt(dirfd, path, allowEmpty) {
    if (PATH.isAbs(path)) {
      return path;
    }
    // relative path
    var dir;
    if (dirfd === -100) {
      dir = FS.cwd();
    } else {
      var dirstream = SYSCALLS.getStreamFromFD(dirfd);
      dir = dirstream.path;
    }
    if (path.length == 0) {
      if (!allowEmpty) {
        throw new FS.ErrnoError(44);
      }
      return dir;
    }
    return dir + "/" + path;
  },
  writeStat(buf, stat) {
    GROWABLE_HEAP_I32()[((buf) >> 2)] = stat.dev;
    GROWABLE_HEAP_I32()[(((buf) + (4)) >> 2)] = stat.mode;
    GROWABLE_HEAP_U32()[(((buf) + (8)) >> 2)] = stat.nlink;
    GROWABLE_HEAP_I32()[(((buf) + (12)) >> 2)] = stat.uid;
    GROWABLE_HEAP_I32()[(((buf) + (16)) >> 2)] = stat.gid;
    GROWABLE_HEAP_I32()[(((buf) + (20)) >> 2)] = stat.rdev;
    HEAP64[(((buf) + (24)) >> 3)] = BigInt(stat.size);
    GROWABLE_HEAP_I32()[(((buf) + (32)) >> 2)] = 4096;
    GROWABLE_HEAP_I32()[(((buf) + (36)) >> 2)] = stat.blocks;
    var atime = stat.atime.getTime();
    var mtime = stat.mtime.getTime();
    var ctime = stat.ctime.getTime();
    HEAP64[(((buf) + (40)) >> 3)] = BigInt(Math.floor(atime / 1e3));
    GROWABLE_HEAP_U32()[(((buf) + (48)) >> 2)] = (atime % 1e3) * 1e3 * 1e3;
    HEAP64[(((buf) + (56)) >> 3)] = BigInt(Math.floor(mtime / 1e3));
    GROWABLE_HEAP_U32()[(((buf) + (64)) >> 2)] = (mtime % 1e3) * 1e3 * 1e3;
    HEAP64[(((buf) + (72)) >> 3)] = BigInt(Math.floor(ctime / 1e3));
    GROWABLE_HEAP_U32()[(((buf) + (80)) >> 2)] = (ctime % 1e3) * 1e3 * 1e3;
    HEAP64[(((buf) + (88)) >> 3)] = BigInt(stat.ino);
    return 0;
  },
  writeStatFs(buf, stats) {
    GROWABLE_HEAP_I32()[(((buf) + (4)) >> 2)] = stats.bsize;
    GROWABLE_HEAP_I32()[(((buf) + (40)) >> 2)] = stats.bsize;
    GROWABLE_HEAP_I32()[(((buf) + (8)) >> 2)] = stats.blocks;
    GROWABLE_HEAP_I32()[(((buf) + (12)) >> 2)] = stats.bfree;
    GROWABLE_HEAP_I32()[(((buf) + (16)) >> 2)] = stats.bavail;
    GROWABLE_HEAP_I32()[(((buf) + (20)) >> 2)] = stats.files;
    GROWABLE_HEAP_I32()[(((buf) + (24)) >> 2)] = stats.ffree;
    GROWABLE_HEAP_I32()[(((buf) + (28)) >> 2)] = stats.fsid;
    GROWABLE_HEAP_I32()[(((buf) + (44)) >> 2)] = stats.flags;
    // ST_NOSUID
    GROWABLE_HEAP_I32()[(((buf) + (36)) >> 2)] = stats.namelen;
  },
  doMsync(addr, stream, len, flags, offset) {
    if (!FS.isFile(stream.node.mode)) {
      throw new FS.ErrnoError(43);
    }
    if (flags & 2) {
      // MAP_PRIVATE calls need not to be synced back to underlying fs
      return 0;
    }
    var buffer = GROWABLE_HEAP_U8().slice(addr, addr + len);
    FS.msync(stream, buffer, offset, len, flags);
  },
  getStreamFromFD(fd) {
    var stream = FS.getStreamChecked(fd);
    return stream;
  },
  varargs: undefined,
  getStr(ptr) {
    var ret = UTF8ToString(ptr);
    return ret;
  }
};

var ___syscall__newselect = function(nfds, readfds, writefds, exceptfds, timeout) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(3, 0, 1, nfds, readfds, writefds, exceptfds, timeout);
  try {
    // readfds are supported,
    // writefds checks socket open status
    // exceptfds are supported, although on web, such exceptional conditions never arise in web sockets
    //                          and so the exceptfds list will always return empty.
    // timeout is supported, although on SOCKFS and PIPEFS these are ignored and always treated as 0 - fully async
    assert(nfds <= 64, "nfds must be less than or equal to 64");
    // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
    var total = 0;
    var srcReadLow = (readfds ? GROWABLE_HEAP_I32()[((readfds) >> 2)] : 0), srcReadHigh = (readfds ? GROWABLE_HEAP_I32()[(((readfds) + (4)) >> 2)] : 0);
    var srcWriteLow = (writefds ? GROWABLE_HEAP_I32()[((writefds) >> 2)] : 0), srcWriteHigh = (writefds ? GROWABLE_HEAP_I32()[(((writefds) + (4)) >> 2)] : 0);
    var srcExceptLow = (exceptfds ? GROWABLE_HEAP_I32()[((exceptfds) >> 2)] : 0), srcExceptHigh = (exceptfds ? GROWABLE_HEAP_I32()[(((exceptfds) + (4)) >> 2)] : 0);
    var dstReadLow = 0, dstReadHigh = 0;
    var dstWriteLow = 0, dstWriteHigh = 0;
    var dstExceptLow = 0, dstExceptHigh = 0;
    var allLow = (readfds ? GROWABLE_HEAP_I32()[((readfds) >> 2)] : 0) | (writefds ? GROWABLE_HEAP_I32()[((writefds) >> 2)] : 0) | (exceptfds ? GROWABLE_HEAP_I32()[((exceptfds) >> 2)] : 0);
    var allHigh = (readfds ? GROWABLE_HEAP_I32()[(((readfds) + (4)) >> 2)] : 0) | (writefds ? GROWABLE_HEAP_I32()[(((writefds) + (4)) >> 2)] : 0) | (exceptfds ? GROWABLE_HEAP_I32()[(((exceptfds) + (4)) >> 2)] : 0);
    var check = (fd, low, high, val) => fd < 32 ? (low & val) : (high & val);
    for (var fd = 0; fd < nfds; fd++) {
      var mask = 1 << (fd % 32);
      if (!(check(fd, allLow, allHigh, mask))) {
        continue;
      }
      var stream = SYSCALLS.getStreamFromFD(fd);
      var flags = SYSCALLS.DEFAULT_POLLMASK;
      if (stream.stream_ops.poll) {
        var timeoutInMillis = -1;
        if (timeout) {
          // select(2) is declared to accept "struct timeval { time_t tv_sec; suseconds_t tv_usec; }".
          // However, musl passes the two values to the syscall as an array of long values.
          // Note that sizeof(time_t) != sizeof(long) in wasm32. The former is 8, while the latter is 4.
          // This means using "C_STRUCTS.timeval.tv_usec" leads to a wrong offset.
          // So, instead, we use POINTER_SIZE.
          var tv_sec = (readfds ? GROWABLE_HEAP_I32()[((timeout) >> 2)] : 0), tv_usec = (readfds ? GROWABLE_HEAP_I32()[(((timeout) + (4)) >> 2)] : 0);
          timeoutInMillis = (tv_sec + tv_usec / 1e6) * 1e3;
        }
        flags = stream.stream_ops.poll(stream, timeoutInMillis);
      }
      if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
        fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
        total++;
      }
      if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
        fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
        total++;
      }
      if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
        fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
        total++;
      }
    }
    if (readfds) {
      GROWABLE_HEAP_I32()[((readfds) >> 2)] = dstReadLow;
      GROWABLE_HEAP_I32()[(((readfds) + (4)) >> 2)] = dstReadHigh;
    }
    if (writefds) {
      GROWABLE_HEAP_I32()[((writefds) >> 2)] = dstWriteLow;
      GROWABLE_HEAP_I32()[(((writefds) + (4)) >> 2)] = dstWriteHigh;
    }
    if (exceptfds) {
      GROWABLE_HEAP_I32()[((exceptfds) >> 2)] = dstExceptLow;
      GROWABLE_HEAP_I32()[(((exceptfds) + (4)) >> 2)] = dstExceptHigh;
    }
    return total;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
};

/** @suppress {duplicate } */ var syscallGetVarargI = () => {
  assert(SYSCALLS.varargs != undefined);
  // the `+` prepended here is necessary to convince the JSCompiler that varargs is indeed a number.
  var ret = GROWABLE_HEAP_I32()[((+SYSCALLS.varargs) >> 2)];
  SYSCALLS.varargs += 4;
  return ret;
};

var syscallGetVarargP = syscallGetVarargI;

function ___syscall_fcntl64(fd, cmd, varargs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(4, 0, 1, fd, cmd, varargs);
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    switch (cmd) {
     case 0:
      {
        var arg = syscallGetVarargI();
        if (arg < 0) {
          return -28;
        }
        while (FS.streams[arg]) {
          arg++;
        }
        var newStream;
        newStream = FS.dupStream(stream, arg);
        return newStream.fd;
      }

     case 1:
     case 2:
      return 0;

     // FD_CLOEXEC makes no sense for a single process.
      case 3:
      return stream.flags;

     case 4:
      {
        var arg = syscallGetVarargI();
        stream.flags |= arg;
        return 0;
      }

     case 12:
      {
        var arg = syscallGetVarargP();
        var offset = 0;
        // We're always unlocked.
        GROWABLE_HEAP_I16()[(((arg) + (offset)) >> 1)] = 2;
        return 0;
      }

     case 13:
     case 14:
      // Pretend that the locking is successful. These are process-level locks,
      // and Emscripten programs are a single process. If we supported linking a
      // filesystem between programs, we'd need to do more here.
      // See https://github.com/emscripten-core/emscripten/issues/23697
      return 0;
    }
    return -28;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_fstat64(fd, buf) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(5, 0, 1, fd, buf);
  try {
    return SYSCALLS.writeStat(buf, FS.fstat(fd));
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_ioctl(fd, op, varargs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(6, 0, 1, fd, op, varargs);
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    switch (op) {
     case 21509:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     case 21505:
      {
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tcgets) {
          var termios = stream.tty.ops.ioctl_tcgets(stream);
          var argp = syscallGetVarargP();
          GROWABLE_HEAP_I32()[((argp) >> 2)] = termios.c_iflag || 0;
          GROWABLE_HEAP_I32()[(((argp) + (4)) >> 2)] = termios.c_oflag || 0;
          GROWABLE_HEAP_I32()[(((argp) + (8)) >> 2)] = termios.c_cflag || 0;
          GROWABLE_HEAP_I32()[(((argp) + (12)) >> 2)] = termios.c_lflag || 0;
          for (var i = 0; i < 32; i++) {
            GROWABLE_HEAP_I8()[(argp + i) + (17)] = termios.c_cc[i] || 0;
          }
          return 0;
        }
        return 0;
      }

     case 21510:
     case 21511:
     case 21512:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     case 21506:
     case 21507:
     case 21508:
      {
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tcsets) {
          var argp = syscallGetVarargP();
          var c_iflag = GROWABLE_HEAP_I32()[((argp) >> 2)];
          var c_oflag = GROWABLE_HEAP_I32()[(((argp) + (4)) >> 2)];
          var c_cflag = GROWABLE_HEAP_I32()[(((argp) + (8)) >> 2)];
          var c_lflag = GROWABLE_HEAP_I32()[(((argp) + (12)) >> 2)];
          var c_cc = [];
          for (var i = 0; i < 32; i++) {
            c_cc.push(GROWABLE_HEAP_I8()[(argp + i) + (17)]);
          }
          return stream.tty.ops.ioctl_tcsets(stream.tty, op, {
            c_iflag,
            c_oflag,
            c_cflag,
            c_lflag,
            c_cc
          });
        }
        return 0;
      }

     case 21519:
      {
        if (!stream.tty) return -59;
        var argp = syscallGetVarargP();
        GROWABLE_HEAP_I32()[((argp) >> 2)] = 0;
        return 0;
      }

     case 21520:
      {
        if (!stream.tty) return -59;
        return -28;
      }

     case 21531:
      {
        var argp = syscallGetVarargP();
        return FS.ioctl(stream, op, argp);
      }

     case 21523:
      {
        // TODO: in theory we should write to the winsize struct that gets
        // passed in, but for now musl doesn't read anything on it
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tiocgwinsz) {
          var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);
          var argp = syscallGetVarargP();
          GROWABLE_HEAP_I16()[((argp) >> 1)] = winsize[0];
          GROWABLE_HEAP_I16()[(((argp) + (2)) >> 1)] = winsize[1];
        }
        return 0;
      }

     case 21524:
      {
        // TODO: technically, this ioctl call should change the window size.
        // but, since emscripten doesn't have any concept of a terminal window
        // yet, we'll just silently throw it away as we do TIOCGWINSZ
        if (!stream.tty) return -59;
        return 0;
      }

     case 21515:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     default:
      return -28;
    }
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_lstat64(path, buf) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(7, 0, 1, path, buf);
  try {
    path = SYSCALLS.getStr(path);
    return SYSCALLS.writeStat(buf, FS.lstat(path));
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_newfstatat(dirfd, path, buf, flags) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(8, 0, 1, dirfd, path, buf, flags);
  try {
    path = SYSCALLS.getStr(path);
    var nofollow = flags & 256;
    var allowEmpty = flags & 4096;
    flags = flags & (~6400);
    assert(!flags, `unknown flags in __syscall_newfstatat: ${flags}`);
    path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
    return SYSCALLS.writeStat(buf, nofollow ? FS.lstat(path) : FS.stat(path));
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_openat(dirfd, path, flags, varargs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(9, 0, 1, dirfd, path, flags, varargs);
  SYSCALLS.varargs = varargs;
  try {
    path = SYSCALLS.getStr(path);
    path = SYSCALLS.calculateAt(dirfd, path);
    var mode = varargs ? syscallGetVarargI() : 0;
    return FS.open(path, flags, mode).fd;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_stat64(path, buf) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(10, 0, 1, path, buf);
  try {
    path = SYSCALLS.getStr(path);
    return SYSCALLS.writeStat(buf, FS.stat(path));
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

var __abort_js = () => abort("native code called abort()");

var __emscripten_init_main_thread_js = tb => {
  // Pass the thread address to the native code where they stored in wasm
  // globals which act as a form of TLS. Global constructors trying
  // to access this value will read the wrong value, but that is UB anyway.
  __emscripten_thread_init(tb, /*is_main=*/ !ENVIRONMENT_IS_WORKER, /*is_runtime=*/ 1, /*can_block=*/ !ENVIRONMENT_IS_WEB, /*default_stacksize=*/ 131072, /*start_profiling=*/ false);
  PThread.threadInitTLS();
};

var __emscripten_thread_mailbox_await = pthread_ptr => {
  if (typeof Atomics.waitAsync === "function") {
    // Wait on the pthread's initial self-pointer field because it is easy and
    // safe to access from sending threads that need to notify the waiting
    // thread.
    // TODO: How to make this work with wasm64?
    var wait = Atomics.waitAsync(GROWABLE_HEAP_I32(), ((pthread_ptr) >> 2), pthread_ptr);
    assert(wait.async);
    wait.value.then(checkMailbox);
    var waitingAsync = pthread_ptr + 128;
    Atomics.store(GROWABLE_HEAP_I32(), ((waitingAsync) >> 2), 1);
  }
};

var checkMailbox = () => {
  // Only check the mailbox if we have a live pthread runtime. We implement
  // pthread_self to return 0 if there is no live runtime.
  var pthread_ptr = _pthread_self();
  if (pthread_ptr) {
    // If we are using Atomics.waitAsync as our notification mechanism, wait
    // for a notification before processing the mailbox to avoid missing any
    // work that could otherwise arrive after we've finished processing the
    // mailbox and before we're ready for the next notification.
    __emscripten_thread_mailbox_await(pthread_ptr);
    callUserCallback(__emscripten_check_mailbox);
  }
};

var __emscripten_notify_mailbox_postmessage = (targetThread, currThreadId) => {
  if (targetThread == currThreadId) {
    setTimeout(checkMailbox);
  } else if (ENVIRONMENT_IS_PTHREAD) {
    postMessage({
      targetThread,
      cmd: "checkMailbox"
    });
  } else {
    var worker = PThread.pthreads[targetThread];
    if (!worker) {
      err(`Cannot send message to thread with ID ${targetThread}, unknown thread ID!`);
      return;
    }
    worker.postMessage({
      cmd: "checkMailbox"
    });
  }
};

var proxiedJSCallArgs = [];

var __emscripten_receive_on_main_thread_js = (funcIndex, emAsmAddr, callingThread, numCallArgs, args) => {
  // Sometimes we need to backproxy events to the calling thread (e.g.
  // HTML5 DOM events handlers such as
  // emscripten_set_mousemove_callback()), so keep track in a globally
  // accessible variable about the thread that initiated the proxying.
  numCallArgs /= 2;
  proxiedJSCallArgs.length = numCallArgs;
  var b = ((args) >> 3);
  for (var i = 0; i < numCallArgs; i++) {
    if (HEAP64[b + 2 * i]) {
      // It's a BigInt.
      proxiedJSCallArgs[i] = HEAP64[b + 2 * i + 1];
    } else {
      // It's a Number.
      proxiedJSCallArgs[i] = GROWABLE_HEAP_F64()[b + 2 * i + 1];
    }
  }
  // Proxied JS library funcs use funcIndex and EM_ASM functions use emAsmAddr
  var func = emAsmAddr ? ASM_CONSTS[emAsmAddr] : proxiedFunctionTable[funcIndex];
  assert(!(funcIndex && emAsmAddr));
  assert(func.length == numCallArgs, "Call args mismatch in _emscripten_receive_on_main_thread_js");
  PThread.currentProxiedOperationCallerThread = callingThread;
  var rtn = func(...proxiedJSCallArgs);
  PThread.currentProxiedOperationCallerThread = 0;
  // Proxied functions can return any type except bigint.  All other types
  // cooerce to f64/double (the return type of this function in C) but not
  // bigint.
  assert(typeof rtn != "bigint");
  return rtn;
};

var __emscripten_runtime_keepalive_clear = () => {
  noExitRuntime = false;
  runtimeKeepaliveCounter = 0;
};

var __emscripten_thread_cleanup = thread => {
  // Called when a thread needs to be cleaned up so it can be reused.
  // A thread is considered reusable when it either returns from its
  // entry point, calls pthread_exit, or acts upon a cancellation.
  // Detached threads are responsible for calling this themselves,
  // otherwise pthread_join is responsible for calling this.
  if (!ENVIRONMENT_IS_PTHREAD) cleanupThread(thread); else postMessage({
    cmd: "cleanupThread",
    thread
  });
};

var __emscripten_thread_set_strongref = thread => {
  // Called when a thread needs to be strongly referenced.
  // Currently only used for:
  // - keeping the "main" thread alive in PROXY_TO_PTHREAD mode;
  // - crashed threads that needs to propagate the uncaught exception
  //   back to the main thread.
  if (ENVIRONMENT_IS_NODE) {
    PThread.pthreads[thread].ref();
  }
};

var _emscripten_get_now;

// AudioWorkletGlobalScope does not have performance.now()
// (https://github.com/WebAudio/web-audio-api/issues/2527), so if building
// with
// Audio Worklets enabled, do a dynamic check for its presence.
if (typeof performance != "undefined" && performance.now) {
  _emscripten_get_now = () => performance.timeOrigin + performance.now();
} else {
  _emscripten_get_now = Date.now;
}

var _emscripten_date_now = () => Date.now();

var nowIsMonotonic = ((typeof performance == "object" && performance && typeof performance["now"] == "function"));

var checkWasiClock = clock_id => clock_id >= 0 && clock_id <= 3;

var INT53_MAX = 9007199254740992;

var INT53_MIN = -9007199254740992;

var bigintToI53Checked = num => (num < INT53_MIN || num > INT53_MAX) ? NaN : Number(num);

function _clock_time_get(clk_id, ignored_precision, ptime) {
  ignored_precision = bigintToI53Checked(ignored_precision);
  if (!checkWasiClock(clk_id)) {
    return 28;
  }
  var now;
  // all wasi clocks but realtime are monotonic
  if (clk_id === 0) {
    now = _emscripten_date_now();
  } else if (nowIsMonotonic) {
    now = _emscripten_get_now();
  } else {
    return 52;
  }
  // "now" is in ms, and wasi times are in ns.
  var nsec = Math.round(now * 1e3 * 1e3);
  HEAP64[((ptime) >> 3)] = BigInt(nsec);
  return 0;
}

var EGL = {
  errorCode: 12288,
  defaultDisplayInitialized: false,
  currentContext: 0,
  currentReadSurface: 0,
  currentDrawSurface: 0,
  contextAttributes: {
    alpha: false,
    depth: false,
    stencil: false,
    antialias: false
  },
  stringCache: {},
  setErrorCode(code) {
    EGL.errorCode = code;
  },
  chooseConfig(display, attribList, config, config_size, numConfigs) {
    if (display != 62e3) {
      EGL.setErrorCode(12296);
      return 0;
    }
    if (attribList) {
      // read attribList if it is non-null
      for (;;) {
        var param = GROWABLE_HEAP_I32()[((attribList) >> 2)];
        if (param == 12321) {
          var alphaSize = GROWABLE_HEAP_I32()[(((attribList) + (4)) >> 2)];
          EGL.contextAttributes.alpha = (alphaSize > 0);
        } else if (param == 12325) {
          var depthSize = GROWABLE_HEAP_I32()[(((attribList) + (4)) >> 2)];
          EGL.contextAttributes.depth = (depthSize > 0);
        } else if (param == 12326) {
          var stencilSize = GROWABLE_HEAP_I32()[(((attribList) + (4)) >> 2)];
          EGL.contextAttributes.stencil = (stencilSize > 0);
        } else if (param == 12337) {
          var samples = GROWABLE_HEAP_I32()[(((attribList) + (4)) >> 2)];
          EGL.contextAttributes.antialias = (samples > 0);
        } else if (param == 12338) {
          var samples = GROWABLE_HEAP_I32()[(((attribList) + (4)) >> 2)];
          EGL.contextAttributes.antialias = (samples == 1);
        } else if (param == 12544) {
          var requestedPriority = GROWABLE_HEAP_I32()[(((attribList) + (4)) >> 2)];
          EGL.contextAttributes.lowLatency = (requestedPriority != 12547);
        } else if (param == 12344) {
          break;
        }
        attribList += 8;
      }
    }
    if ((!config || !config_size) && !numConfigs) {
      EGL.setErrorCode(12300);
      return 0;
    }
    if (numConfigs) {
      GROWABLE_HEAP_I32()[((numConfigs) >> 2)] = 1;
    }
    if (config && config_size > 0) {
      GROWABLE_HEAP_U32()[((config) >> 2)] = 62002;
    }
    EGL.setErrorCode(12288);
    return 1;
  }
};

function _eglBindAPI(api) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(11, 0, 1, api);
  if (api == 12448) {
    EGL.setErrorCode(12288);
    return 1;
  }
  // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
  EGL.setErrorCode(12300);
  return 0;
}

function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(12, 0, 1, display, attrib_list, configs, config_size, numConfigs);
  return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
}

var GLctx;

var webgl_enable_ANGLE_instanced_arrays = ctx => {
  // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
  var ext = ctx.getExtension("ANGLE_instanced_arrays");
  // Because this extension is a core function in WebGL 2, assign the extension entry points in place of
  // where the core functions will reside in WebGL 2. This way the calling code can call these without
  // having to dynamically branch depending if running against WebGL 1 or WebGL 2.
  if (ext) {
    ctx["vertexAttribDivisor"] = (index, divisor) => ext["vertexAttribDivisorANGLE"](index, divisor);
    ctx["drawArraysInstanced"] = (mode, first, count, primcount) => ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
    ctx["drawElementsInstanced"] = (mode, count, type, indices, primcount) => ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
    return 1;
  }
};

var webgl_enable_OES_vertex_array_object = ctx => {
  // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
  var ext = ctx.getExtension("OES_vertex_array_object");
  if (ext) {
    ctx["createVertexArray"] = () => ext["createVertexArrayOES"]();
    ctx["deleteVertexArray"] = vao => ext["deleteVertexArrayOES"](vao);
    ctx["bindVertexArray"] = vao => ext["bindVertexArrayOES"](vao);
    ctx["isVertexArray"] = vao => ext["isVertexArrayOES"](vao);
    return 1;
  }
};

var webgl_enable_WEBGL_draw_buffers = ctx => {
  // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
  var ext = ctx.getExtension("WEBGL_draw_buffers");
  if (ext) {
    ctx["drawBuffers"] = (n, bufs) => ext["drawBuffersWEBGL"](n, bufs);
    return 1;
  }
};

var webgl_enable_EXT_polygon_offset_clamp = ctx => !!(ctx.extPolygonOffsetClamp = ctx.getExtension("EXT_polygon_offset_clamp"));

var webgl_enable_EXT_clip_control = ctx => !!(ctx.extClipControl = ctx.getExtension("EXT_clip_control"));

var webgl_enable_WEBGL_polygon_mode = ctx => !!(ctx.webglPolygonMode = ctx.getExtension("WEBGL_polygon_mode"));

var webgl_enable_WEBGL_multi_draw = ctx => // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
!!(ctx.multiDrawWebgl = ctx.getExtension("WEBGL_multi_draw"));

var getEmscriptenSupportedExtensions = ctx => {
  // Restrict the list of advertised extensions to those that we actually
  // support.
  var supportedExtensions = [ // WebGL 1 extensions
  "ANGLE_instanced_arrays", "EXT_blend_minmax", "EXT_disjoint_timer_query", "EXT_frag_depth", "EXT_shader_texture_lod", "EXT_sRGB", "OES_element_index_uint", "OES_fbo_render_mipmap", "OES_standard_derivatives", "OES_texture_float", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_color_buffer_float", "WEBGL_depth_texture", "WEBGL_draw_buffers", // WebGL 1 and WebGL 2 extensions
  "EXT_clip_control", "EXT_color_buffer_half_float", "EXT_depth_clamp", "EXT_float_blend", "EXT_polygon_offset_clamp", "EXT_texture_compression_bptc", "EXT_texture_compression_rgtc", "EXT_texture_filter_anisotropic", "KHR_parallel_shader_compile", "OES_texture_float_linear", "WEBGL_blend_func_extended", "WEBGL_compressed_texture_astc", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_s3tc", "WEBGL_compressed_texture_s3tc_srgb", "WEBGL_debug_renderer_info", "WEBGL_debug_shaders", "WEBGL_lose_context", "WEBGL_multi_draw", "WEBGL_polygon_mode" ];
  // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
  return (ctx.getSupportedExtensions() || []).filter(ext => supportedExtensions.includes(ext));
};

var GL = {
  counter: 1,
  buffers: [],
  programs: [],
  framebuffers: [],
  renderbuffers: [],
  textures: [],
  shaders: [],
  vaos: [],
  contexts: {},
  offscreenCanvases: {},
  queries: [],
  stringCache: {},
  unpackAlignment: 4,
  unpackRowLength: 0,
  recordError: errorCode => {
    if (!GL.lastError) {
      GL.lastError = errorCode;
    }
  },
  getNewId: table => {
    var ret = GL.counter++;
    for (var i = table.length; i < ret; i++) {
      table[i] = null;
    }
    return ret;
  },
  genObject: (n, buffers, createFunction, objectTable) => {
    for (var i = 0; i < n; i++) {
      var buffer = GLctx[createFunction]();
      var id = buffer && GL.getNewId(objectTable);
      if (buffer) {
        buffer.name = id;
        objectTable[id] = buffer;
      } else {
        GL.recordError(1282);
      }
      GROWABLE_HEAP_I32()[(((buffers) + (i * 4)) >> 2)] = id;
    }
  },
  getSource: (shader, count, string, length) => {
    var source = "";
    for (var i = 0; i < count; ++i) {
      var len = length ? GROWABLE_HEAP_U32()[(((length) + (i * 4)) >> 2)] : undefined;
      source += UTF8ToString(GROWABLE_HEAP_U32()[(((string) + (i * 4)) >> 2)], len);
    }
    return source;
  },
  createContext: (/** @type {HTMLCanvasElement} */ canvas, webGLContextAttributes) => {
    // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL
    // context on a canvas, calling .getContext() will always return that
    // context independent of which 'webgl' or 'webgl2'
    // context version was passed. See:
    //   https://bugs.webkit.org/show_bug.cgi?id=222758
    // and:
    //   https://github.com/emscripten-core/emscripten/issues/13295.
    // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari
    // version field in above check.
    if (!canvas.getContextSafariWebGL2Fixed) {
      canvas.getContextSafariWebGL2Fixed = canvas.getContext;
      /** @type {function(this:HTMLCanvasElement, string, (Object|null)=): (Object|null)} */ function fixedGetContext(ver, attrs) {
        var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
        return ((ver == "webgl") == (gl instanceof WebGLRenderingContext)) ? gl : null;
      }
      canvas.getContext = fixedGetContext;
    }
    var ctx = canvas.getContext("webgl", webGLContextAttributes);
    if (!ctx) return 0;
    var handle = GL.registerContext(ctx, webGLContextAttributes);
    return handle;
  },
  registerContext: (ctx, webGLContextAttributes) => {
    // with pthreads a context is a location in memory with some synchronized
    // data between threads
    var handle = _malloc(8);
    GROWABLE_HEAP_U32()[(((handle) + (4)) >> 2)] = _pthread_self();
    // the thread pointer of the thread that owns the control of the context
    var context = {
      handle,
      attributes: webGLContextAttributes,
      version: webGLContextAttributes.majorVersion,
      GLctx: ctx
    };
    // Store the created context object so that we can access the context
    // given a canvas without having to pass the parameters again.
    if (ctx.canvas) ctx.canvas.GLctxObject = context;
    GL.contexts[handle] = context;
    if (typeof webGLContextAttributes.enableExtensionsByDefault == "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
      GL.initExtensions(context);
    }
    return handle;
  },
  makeContextCurrent: contextHandle => {
    // Active Emscripten GL layer context object.
    GL.currentContext = GL.contexts[contextHandle];
    // Active WebGL context object.
    Module["ctx"] = GLctx = GL.currentContext?.GLctx;
    return !(contextHandle && !GLctx);
  },
  getContext: contextHandle => GL.contexts[contextHandle],
  deleteContext: contextHandle => {
    if (GL.currentContext === GL.contexts[contextHandle]) {
      GL.currentContext = null;
    }
    if (typeof JSEvents == "object") {
      // Release all JS event handlers on the DOM element that the GL context is
      // associated with since the context is now deleted.
      JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
    }
    // Make sure the canvas object no longer refers to the context object so
    // there are no GC surprises.
    if (GL.contexts[contextHandle]?.GLctx.canvas) {
      GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
    }
    _free(GL.contexts[contextHandle].handle);
    GL.contexts[contextHandle] = null;
  },
  initExtensions: context => {
    // If this function is called without a specific context object, init the
    // extensions of the currently active context.
    context ||= GL.currentContext;
    if (context.initExtensionsDone) return;
    context.initExtensionsDone = true;
    var GLctx = context.GLctx;
    // Detect the presence of a few extensions manually, ction GL interop
    // layer itself will need to know if they exist.
    // Extensions that are available in both WebGL 1 and WebGL 2
    webgl_enable_WEBGL_multi_draw(GLctx);
    webgl_enable_EXT_polygon_offset_clamp(GLctx);
    webgl_enable_EXT_clip_control(GLctx);
    webgl_enable_WEBGL_polygon_mode(GLctx);
    // Extensions that are only available in WebGL 1 (the calls will be no-ops
    // if called on a WebGL 2 context active)
    webgl_enable_ANGLE_instanced_arrays(GLctx);
    webgl_enable_OES_vertex_array_object(GLctx);
    webgl_enable_WEBGL_draw_buffers(GLctx);
    {
      GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
    }
    getEmscriptenSupportedExtensions(GLctx).forEach(ext => {
      // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders
      // are not enabled by default.
      if (!ext.includes("lose_context") && !ext.includes("debug")) {
        // Call .getExtension() to enable that extension permanently.
        GLctx.getExtension(ext);
      }
    });
  }
};

function _eglCreateContext(display, config, hmm, contextAttribs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(13, 0, 1, display, config, hmm, contextAttribs);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
  // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
  var glesContextVersion = 1;
  for (;;) {
    var param = GROWABLE_HEAP_I32()[((contextAttribs) >> 2)];
    if (param == 12440) {
      glesContextVersion = GROWABLE_HEAP_I32()[(((contextAttribs) + (4)) >> 2)];
    } else if (param == 12344) {
      break;
    } else {
      /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */ EGL.setErrorCode(12292);
      return 0;
    }
    contextAttribs += 8;
  }
  if (glesContextVersion != 2) {
    EGL.setErrorCode(12293);
    return 0;
  }
  EGL.contextAttributes.majorVersion = glesContextVersion - 1;
  // WebGL 1 is GLES 2, WebGL2 is GLES3
  EGL.contextAttributes.minorVersion = 0;
  EGL.context = GL.createContext(Browser.getCanvas(), EGL.contextAttributes);
  if (EGL.context != 0) {
    EGL.setErrorCode(12288);
    // Run callbacks so that GL emulation works
    GL.makeContextCurrent(EGL.context);
    Browser.useWebGL = true;
    Browser.moduleContextCreatedCallbacks.forEach(callback => callback());
    // Note: This function only creates a context, but it shall not make it active.
    GL.makeContextCurrent(null);
    return 62004;
  } else {
    EGL.setErrorCode(12297);
    // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
    return 0;
  }
}

function _eglCreateWindowSurface(display, config, win, attrib_list) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(14, 0, 1, display, config, win, attrib_list);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  if (config != 62002) {
    EGL.setErrorCode(12293);
    return 0;
  }
  // TODO: Examine attrib_list! Parameters that can be present there are:
  // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
  // - EGL_VG_COLORSPACE (can't be set)
  // - EGL_VG_ALPHA_FORMAT (can't be set)
  EGL.setErrorCode(12288);
  return 62006;
}

function _eglDestroyContext(display, context) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(15, 0, 1, display, context);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  if (context != 62004) {
    EGL.setErrorCode(12294);
    return 0;
  }
  GL.deleteContext(EGL.context);
  EGL.setErrorCode(12288);
  if (EGL.currentContext == context) {
    EGL.currentContext = 0;
  }
  return 1;
}

function _eglDestroySurface(display, surface) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(16, 0, 1, display, surface);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  if (surface != 62006) {
    EGL.setErrorCode(12301);
    return 1;
  }
  if (EGL.currentReadSurface == surface) {
    EGL.currentReadSurface = 0;
  }
  if (EGL.currentDrawSurface == surface) {
    EGL.currentDrawSurface = 0;
  }
  EGL.setErrorCode(12288);
  return 1;
}

function _eglGetConfigAttrib(display, config, attribute, value) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(17, 0, 1, display, config, attribute, value);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  if (config != 62002) {
    EGL.setErrorCode(12293);
    return 0;
  }
  if (!value) {
    EGL.setErrorCode(12300);
    return 0;
  }
  EGL.setErrorCode(12288);
  switch (attribute) {
   case 12320:
    // EGL_BUFFER_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = EGL.contextAttributes.alpha ? 32 : 24;
    return 1;

   case 12321:
    // EGL_ALPHA_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = EGL.contextAttributes.alpha ? 8 : 0;
    return 1;

   case 12322:
    // EGL_BLUE_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = 8;
    return 1;

   case 12323:
    // EGL_GREEN_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = 8;
    return 1;

   case 12324:
    // EGL_RED_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = 8;
    return 1;

   case 12325:
    // EGL_DEPTH_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = EGL.contextAttributes.depth ? 24 : 0;
    return 1;

   case 12326:
    // EGL_STENCIL_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = EGL.contextAttributes.stencil ? 8 : 0;
    return 1;

   case 12327:
    // EGL_CONFIG_CAVEAT
    // We can return here one of EGL_NONE (0x3038), EGL_SLOW_CONFIG (0x3050) or EGL_NON_CONFORMANT_CONFIG (0x3051).
    GROWABLE_HEAP_I32()[((value) >> 2)] = 12344;
    return 1;

   case 12328:
    // EGL_CONFIG_ID
    GROWABLE_HEAP_I32()[((value) >> 2)] = 62002;
    return 1;

   case 12329:
    // EGL_LEVEL
    GROWABLE_HEAP_I32()[((value) >> 2)] = 0;
    return 1;

   case 12330:
    // EGL_MAX_PBUFFER_HEIGHT
    GROWABLE_HEAP_I32()[((value) >> 2)] = 4096;
    return 1;

   case 12331:
    // EGL_MAX_PBUFFER_PIXELS
    GROWABLE_HEAP_I32()[((value) >> 2)] = 16777216;
    return 1;

   case 12332:
    // EGL_MAX_PBUFFER_WIDTH
    GROWABLE_HEAP_I32()[((value) >> 2)] = 4096;
    return 1;

   case 12333:
    // EGL_NATIVE_RENDERABLE
    GROWABLE_HEAP_I32()[((value) >> 2)] = 0;
    return 1;

   case 12334:
    // EGL_NATIVE_VISUAL_ID
    GROWABLE_HEAP_I32()[((value) >> 2)] = 0;
    return 1;

   case 12335:
    // EGL_NATIVE_VISUAL_TYPE
    GROWABLE_HEAP_I32()[((value) >> 2)] = 12344;
    return 1;

   case 12337:
    // EGL_SAMPLES
    GROWABLE_HEAP_I32()[((value) >> 2)] = EGL.contextAttributes.antialias ? 4 : 0;
    return 1;

   case 12338:
    // EGL_SAMPLE_BUFFERS
    GROWABLE_HEAP_I32()[((value) >> 2)] = EGL.contextAttributes.antialias ? 1 : 0;
    return 1;

   case 12339:
    // EGL_SURFACE_TYPE
    GROWABLE_HEAP_I32()[((value) >> 2)] = 4;
    return 1;

   case 12340:
    // EGL_TRANSPARENT_TYPE
    // If this returns EGL_TRANSPARENT_RGB (0x3052), transparency is used through color-keying. No such thing applies to Emscripten canvas.
    GROWABLE_HEAP_I32()[((value) >> 2)] = 12344;
    return 1;

   case 12341:
   // EGL_TRANSPARENT_BLUE_VALUE
    case 12342:
   // EGL_TRANSPARENT_GREEN_VALUE
    case 12343:
    // EGL_TRANSPARENT_RED_VALUE
    // "If EGL_TRANSPARENT_TYPE is EGL_NONE, then the values for EGL_TRANSPARENT_RED_VALUE, EGL_TRANSPARENT_GREEN_VALUE, and EGL_TRANSPARENT_BLUE_VALUE are undefined."
    GROWABLE_HEAP_I32()[((value) >> 2)] = -1;
    return 1;

   case 12345:
   // EGL_BIND_TO_TEXTURE_RGB
    case 12346:
    // EGL_BIND_TO_TEXTURE_RGBA
    GROWABLE_HEAP_I32()[((value) >> 2)] = 0;
    return 1;

   case 12347:
    // EGL_MIN_SWAP_INTERVAL
    GROWABLE_HEAP_I32()[((value) >> 2)] = 0;
    return 1;

   case 12348:
    // EGL_MAX_SWAP_INTERVAL
    GROWABLE_HEAP_I32()[((value) >> 2)] = 1;
    return 1;

   case 12349:
   // EGL_LUMINANCE_SIZE
    case 12350:
    // EGL_ALPHA_MASK_SIZE
    GROWABLE_HEAP_I32()[((value) >> 2)] = 0;
    return 1;

   case 12351:
    // EGL_COLOR_BUFFER_TYPE
    // EGL has two types of buffers: EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.
    GROWABLE_HEAP_I32()[((value) >> 2)] = 12430;
    return 1;

   case 12352:
    // EGL_RENDERABLE_TYPE
    // A bit combination of EGL_OPENGL_ES_BIT,EGL_OPENVG_BIT,EGL_OPENGL_ES2_BIT and EGL_OPENGL_BIT.
    GROWABLE_HEAP_I32()[((value) >> 2)] = 4;
    return 1;

   case 12354:
    // EGL_CONFORMANT
    // "EGL_CONFORMANT is a mask indicating if a client API context created with respect to the corresponding EGLConfig will pass the required conformance tests for that API."
    GROWABLE_HEAP_I32()[((value) >> 2)] = 0;
    return 1;

   default:
    EGL.setErrorCode(12292);
    return 0;
  }
}

function _eglGetDisplay(nativeDisplayType) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(18, 0, 1, nativeDisplayType);
  EGL.setErrorCode(12288);
  // Emscripten EGL implementation "emulates" X11, and eglGetDisplay is
  // expected to accept/receive a pointer to an X11 Display object (or
  // EGL_DEFAULT_DISPLAY).
  if (nativeDisplayType != 0 && nativeDisplayType != 1) {
    return 0;
  }
  return 62e3;
}

function _eglGetError() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(19, 0, 1);
  return EGL.errorCode;
}

function _eglInitialize(display, majorVersion, minorVersion) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(20, 0, 1, display, majorVersion, minorVersion);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  if (majorVersion) {
    GROWABLE_HEAP_I32()[((majorVersion) >> 2)] = 1;
  }
  if (minorVersion) {
    GROWABLE_HEAP_I32()[((minorVersion) >> 2)] = 4;
  }
  EGL.defaultDisplayInitialized = true;
  EGL.setErrorCode(12288);
  return 1;
}

function _eglMakeCurrent(display, draw, read, context) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(21, 0, 1, display, draw, read, context);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
  if (context != 0 && context != 62004) {
    EGL.setErrorCode(12294);
    return 0;
  }
  if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006)) {
    EGL.setErrorCode(12301);
    return 0;
  }
  GL.makeContextCurrent(context ? EGL.context : null);
  EGL.currentContext = context;
  EGL.currentDrawSurface = draw;
  EGL.currentReadSurface = read;
  EGL.setErrorCode(12288);
  return 1;
}

var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
  assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
  return stringToUTF8Array(str, GROWABLE_HEAP_U8(), outPtr, maxBytesToWrite);
};

var stringToNewUTF8 = str => {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8(str, ret, size);
  return ret;
};

function _eglQueryString(display, name) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(22, 0, 1, display, name);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
  EGL.setErrorCode(12288);
  if (EGL.stringCache[name]) return EGL.stringCache[name];
  var ret;
  switch (name) {
   case 12371:
    ret = stringToNewUTF8("Emscripten");
    break;

   case 12372:
    ret = stringToNewUTF8("1.4 Emscripten EGL");
    break;

   case 12373:
    ret = stringToNewUTF8("");
    break;

   // Currently not supporting any EGL extensions.
    case 12429:
    ret = stringToNewUTF8("OpenGL_ES");
    break;

   default:
    EGL.setErrorCode(12300);
    return 0;
  }
  EGL.stringCache[name] = ret;
  return ret;
}

function _eglSwapBuffers(dpy, surface) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(23, 0, 1, dpy, surface);
  if (!EGL.defaultDisplayInitialized) {
    EGL.setErrorCode(12289);
  } else if (!GLctx) {
    EGL.setErrorCode(12290);
  } else if (GLctx.isContextLost()) {
    EGL.setErrorCode(12302);
  } else {
    // According to documentation this does an implicit flush.
    // Due to discussion at https://github.com/emscripten-core/emscripten/pull/1871
    // the flush was removed since this _may_ result in slowing code down.
    //_glFlush();
    EGL.setErrorCode(12288);
    return 1;
  }
  return 0;
}

/**
     * @param {number=} arg
     * @param {boolean=} noSetTiming
     */ var setMainLoop = (iterFunc, fps, simulateInfiniteLoop, arg, noSetTiming) => {
  assert(!MainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
  MainLoop.func = iterFunc;
  MainLoop.arg = arg;
  var thisMainLoopId = MainLoop.currentlyRunningMainloop;
  function checkIsRunning() {
    if (thisMainLoopId < MainLoop.currentlyRunningMainloop) {
      runtimeKeepalivePop();
      maybeExit();
      return false;
    }
    return true;
  }
  // We create the loop runner here but it is not actually running until
  // _emscripten_set_main_loop_timing is called (which might happen a
  // later time).  This member signifies that the current runner has not
  // yet been started so that we can call runtimeKeepalivePush when it
  // gets it timing set for the first time.
  MainLoop.running = false;
  MainLoop.runner = function MainLoop_runner() {
    if (ABORT) return;
    if (MainLoop.queue.length > 0) {
      var start = Date.now();
      var blocker = MainLoop.queue.shift();
      blocker.func(blocker.arg);
      if (MainLoop.remainingBlockers) {
        var remaining = MainLoop.remainingBlockers;
        var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
        if (blocker.counted) {
          MainLoop.remainingBlockers = next;
        } else {
          // not counted, but move the progress along a tiny bit
          next = next + .5;
          // do not steal all the next one's progress
          MainLoop.remainingBlockers = (8 * remaining + next) / 9;
        }
      }
      MainLoop.updateStatus();
      // catches pause/resume main loop from blocker execution
      if (!checkIsRunning()) return;
      setTimeout(MainLoop.runner, 0);
      return;
    }
    // catch pauses from non-main loop sources
    if (!checkIsRunning()) return;
    // Implement very basic swap interval control
    MainLoop.currentFrameNumber = MainLoop.currentFrameNumber + 1 | 0;
    if (MainLoop.timingMode == 1 && MainLoop.timingValue > 1 && MainLoop.currentFrameNumber % MainLoop.timingValue != 0) {
      // Not the scheduled time to render this frame - skip.
      MainLoop.scheduler();
      return;
    } else if (MainLoop.timingMode == 0) {
      MainLoop.tickStartTime = _emscripten_get_now();
    }
    if (MainLoop.method === "timeout" && Module["ctx"]) {
      warnOnce("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
      MainLoop.method = "";
    }
    MainLoop.runIter(iterFunc);
    // catch pauses from the main loop itself
    if (!checkIsRunning()) return;
    MainLoop.scheduler();
  };
  if (!noSetTiming) {
    if (fps > 0) {
      _emscripten_set_main_loop_timing(0, 1e3 / fps);
    } else {
      // Do rAF by rendering each frame (no decimating)
      _emscripten_set_main_loop_timing(1, 1);
    }
    MainLoop.scheduler();
  }
  if (simulateInfiniteLoop) {
    throw "unwind";
  }
};

var MainLoop = {
  running: false,
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  preMainLoop: [],
  postMainLoop: [],
  pause() {
    MainLoop.scheduler = null;
    // Incrementing this signals the previous main loop that it's now become old, and it must return.
    MainLoop.currentlyRunningMainloop++;
  },
  resume() {
    MainLoop.currentlyRunningMainloop++;
    var timingMode = MainLoop.timingMode;
    var timingValue = MainLoop.timingValue;
    var func = MainLoop.func;
    MainLoop.func = null;
    // do not set timing and call scheduler, we will do it on the next lines
    setMainLoop(func, 0, false, MainLoop.arg, true);
    _emscripten_set_main_loop_timing(timingMode, timingValue);
    MainLoop.scheduler();
  },
  updateStatus() {
    if (Module["setStatus"]) {
      var message = Module["statusMessage"] || "Please wait...";
      var remaining = MainLoop.remainingBlockers ?? 0;
      var expected = MainLoop.expectedBlockers ?? 0;
      if (remaining) {
        if (remaining < expected) {
          Module["setStatus"](`{message} ({expected - remaining}/{expected})`);
        } else {
          Module["setStatus"](message);
        }
      } else {
        Module["setStatus"]("");
      }
    }
  },
  init() {
    Module["preMainLoop"] && MainLoop.preMainLoop.push(Module["preMainLoop"]);
    Module["postMainLoop"] && MainLoop.postMainLoop.push(Module["postMainLoop"]);
  },
  runIter(func) {
    if (ABORT) return;
    for (var pre of MainLoop.preMainLoop) {
      if (pre() === false) {
        return;
      }
    }
    callUserCallback(func);
    for (var post of MainLoop.postMainLoop) {
      post();
    }
    checkStackCookie();
  },
  nextRAF: 0,
  fakeRequestAnimationFrame(func) {
    // try to keep 60fps between calls to here
    var now = Date.now();
    if (MainLoop.nextRAF === 0) {
      MainLoop.nextRAF = now + 1e3 / 60;
    } else {
      while (now + 2 >= MainLoop.nextRAF) {
        // fudge a little, to avoid timer jitter causing us to do lots of delay:0
        MainLoop.nextRAF += 1e3 / 60;
      }
    }
    var delay = Math.max(MainLoop.nextRAF - now, 0);
    setTimeout(func, delay);
  },
  requestAnimationFrame(func) {
    if (typeof requestAnimationFrame == "function") {
      requestAnimationFrame(func);
      return;
    }
    var RAF = MainLoop.fakeRequestAnimationFrame;
    RAF(func);
  }
};

var _emscripten_set_main_loop_timing = (mode, value) => {
  MainLoop.timingMode = mode;
  MainLoop.timingValue = value;
  if (!MainLoop.func) {
    err("emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.");
    return 1;
  }
  if (!MainLoop.running) {
    runtimeKeepalivePush();
    MainLoop.running = true;
  }
  if (mode == 0) {
    MainLoop.scheduler = function MainLoop_scheduler_setTimeout() {
      var timeUntilNextTick = Math.max(0, MainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
      setTimeout(MainLoop.runner, timeUntilNextTick);
    };
    MainLoop.method = "timeout";
  } else if (mode == 1) {
    MainLoop.scheduler = function MainLoop_scheduler_rAF() {
      MainLoop.requestAnimationFrame(MainLoop.runner);
    };
    MainLoop.method = "rAF";
  } else if (mode == 2) {
    if (typeof MainLoop.setImmediate == "undefined") {
      if (typeof setImmediate == "undefined") {
        // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
        var setImmediates = [];
        var emscriptenMainLoopMessageId = "setimmediate";
        /** @param {Event} event */ var MainLoop_setImmediate_messageHandler = event => {
          // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
          // so check for both cases.
          if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
            event.stopPropagation();
            setImmediates.shift()();
          }
        };
        addEventListener("message", MainLoop_setImmediate_messageHandler, true);
        MainLoop.setImmediate = /** @type{function(function(): ?, ...?): number} */ (func => {
          setImmediates.push(func);
          if (ENVIRONMENT_IS_WORKER) {
            Module["setImmediates"] ??= [];
            Module["setImmediates"].push(func);
            postMessage({
              target: emscriptenMainLoopMessageId
            });
          } else postMessage(emscriptenMainLoopMessageId, "*");
        });
      } else {
        MainLoop.setImmediate = setImmediate;
      }
    }
    MainLoop.scheduler = function MainLoop_scheduler_setImmediate() {
      MainLoop.setImmediate(MainLoop.runner);
    };
    MainLoop.method = "immediate";
  }
  return 0;
};

function _eglSwapInterval(display, interval) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(24, 0, 1, display, interval);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  if (interval == 0) _emscripten_set_main_loop_timing(0, 0); else _emscripten_set_main_loop_timing(1, interval);
  EGL.setErrorCode(12288);
  return 1;
}

function _eglTerminate(display) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(25, 0, 1, display);
  if (display != 62e3) {
    EGL.setErrorCode(12296);
    return 0;
  }
  EGL.currentContext = 0;
  EGL.currentReadSurface = 0;
  EGL.currentDrawSurface = 0;
  EGL.defaultDisplayInitialized = false;
  EGL.setErrorCode(12288);
  return 1;
}

/** @suppress {duplicate } */ function _eglWaitClient() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(26, 0, 1);
  EGL.setErrorCode(12288);
  return 1;
}

var _eglWaitGL = _eglWaitClient;

function _eglWaitNative(nativeEngineId) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(27, 0, 1, nativeEngineId);
  EGL.setErrorCode(12288);
  return 1;
}

var readEmAsmArgsArray = [];

var readEmAsmArgs = (sigPtr, buf) => {
  // Nobody should have mutated _readEmAsmArgsArray underneath us to be something else than an array.
  assert(Array.isArray(readEmAsmArgsArray));
  // The input buffer is allocated on the stack, so it must be stack-aligned.
  assert(buf % 16 == 0);
  readEmAsmArgsArray.length = 0;
  var ch;
  // Most arguments are i32s, so shift the buffer pointer so it is a plain
  // index into HEAP32.
  while (ch = GROWABLE_HEAP_U8()[sigPtr++]) {
    var chr = String.fromCharCode(ch);
    var validChars = [ "d", "f", "i", "p" ];
    // In WASM_BIGINT mode we support passing i64 values as bigint.
    validChars.push("j");
    assert(validChars.includes(chr), `Invalid character ${ch}("${chr}") in readEmAsmArgs! Use only [${validChars}], and do not specify "v" for void return argument.`);
    // Floats are always passed as doubles, so all types except for 'i'
    // are 8 bytes and require alignment.
    var wide = (ch != 105);
    wide &= (ch != 112);
    buf += wide && (buf % 8) ? 4 : 0;
    readEmAsmArgsArray.push(// Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.
    ch == 112 ? GROWABLE_HEAP_U32()[((buf) >> 2)] : ch == 106 ? HEAP64[((buf) >> 3)] : ch == 105 ? GROWABLE_HEAP_I32()[((buf) >> 2)] : GROWABLE_HEAP_F64()[((buf) >> 3)]);
    buf += wide ? 8 : 4;
  }
  return readEmAsmArgsArray;
};

var runEmAsmFunction = (code, sigPtr, argbuf) => {
  var args = readEmAsmArgs(sigPtr, argbuf);
  assert(ASM_CONSTS.hasOwnProperty(code), `No EM_ASM constant found at address ${code}.  The loaded WebAssembly file is likely out of sync with the generated JavaScript.`);
  return ASM_CONSTS[code](...args);
};

var _emscripten_asm_const_int = (code, sigPtr, argbuf) => runEmAsmFunction(code, sigPtr, argbuf);

var runMainThreadEmAsm = (emAsmAddr, sigPtr, argbuf, sync) => {
  var args = readEmAsmArgs(sigPtr, argbuf);
  if (ENVIRONMENT_IS_PTHREAD) {
    // EM_ASM functions are variadic, receiving the actual arguments as a buffer
    // in memory. the last parameter (argBuf) points to that data. We need to
    // always un-variadify that, *before proxying*, as in the async case this
    // is a stack allocation that LLVM made, which may go away before the main
    // thread gets the message. For that reason we handle proxying *after* the
    // call to readEmAsmArgs, and therefore we do that manually here instead
    // of using __proxy. (And dor simplicity, do the same in the sync
    // case as well, even though it's not strictly necessary, to keep the two
    // code paths as similar as possible on both sides.)
    return proxyToMainThread(0, emAsmAddr, sync, ...args);
  }
  assert(ASM_CONSTS.hasOwnProperty(emAsmAddr), `No EM_ASM constant found at address ${emAsmAddr}.  The loaded WebAssembly file is likely out of sync with the generated JavaScript.`);
  return ASM_CONSTS[emAsmAddr](...args);
};

var _emscripten_asm_const_int_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);

var _emscripten_asm_const_ptr_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);

var _emscripten_cancel_main_loop = () => {
  MainLoop.pause();
  MainLoop.func = null;
};

var _emscripten_check_blocking_allowed = () => {
  if (ENVIRONMENT_IS_NODE) return;
  if (ENVIRONMENT_IS_WORKER) return;
  // Blocking in a worker/pthread is fine.
  warnOnce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
};

var onExits = [];

var addOnExit = cb => onExits.unshift(cb);

var JSEvents = {
  memcpy(target, src, size) {
    GROWABLE_HEAP_I8().set(GROWABLE_HEAP_I8().subarray(src, src + size), target);
  },
  removeAllEventListeners() {
    while (JSEvents.eventHandlers.length) {
      JSEvents._removeHandler(JSEvents.eventHandlers.length - 1);
    }
    JSEvents.deferredCalls = [];
  },
  inEventHandler: 0,
  deferredCalls: [],
  deferCall(targetFunction, precedence, argsList) {
    function arraysHaveEqualContent(arrA, arrB) {
      if (arrA.length != arrB.length) return false;
      for (var i in arrA) {
        if (arrA[i] != arrB[i]) return false;
      }
      return true;
    }
    // Test if the given call was already queued, and if so, don't add it again.
    for (var call of JSEvents.deferredCalls) {
      if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
        return;
      }
    }
    JSEvents.deferredCalls.push({
      targetFunction,
      precedence,
      argsList
    });
    JSEvents.deferredCalls.sort((x, y) => x.precedence < y.precedence);
  },
  removeDeferredCalls(targetFunction) {
    JSEvents.deferredCalls = JSEvents.deferredCalls.filter(call => call.targetFunction != targetFunction);
  },
  canPerformEventHandlerRequests() {
    if (navigator.userActivation) {
      // Verify against transient activation status from UserActivation API
      // whether it is possible to perform a request here without needing to defer. See
      // https://developer.mozilla.org/en-US/docs/Web/Security/User_activation#transient_activation
      // and https://caniuse.com/mdn-api_useractivation
      // At the time of writing, Firefox does not support this API: https://bugzilla.mozilla.org/show_bug.cgi?id=1791079
      return navigator.userActivation.isActive;
    }
    return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
  },
  runDeferredCalls() {
    if (!JSEvents.canPerformEventHandlerRequests()) {
      return;
    }
    var deferredCalls = JSEvents.deferredCalls;
    JSEvents.deferredCalls = [];
    for (var call of deferredCalls) {
      call.targetFunction(...call.argsList);
    }
  },
  eventHandlers: [],
  removeAllHandlersOnTarget: (target, eventTypeString) => {
    for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
      if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
        JSEvents._removeHandler(i--);
      }
    }
  },
  _removeHandler(i) {
    var h = JSEvents.eventHandlers[i];
    h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
    JSEvents.eventHandlers.splice(i, 1);
  },
  registerOrRemoveHandler(eventHandler) {
    if (!eventHandler.target) {
      err("registerOrRemoveHandler: the target element for event handler registration does not exist, when processing the following event handler registration:");
      console.dir(eventHandler);
      return -4;
    }
    if (eventHandler.callbackfunc) {
      eventHandler.eventListenerFunc = function(event) {
        // Increment nesting count for the event handler.
        ++JSEvents.inEventHandler;
        JSEvents.currentEventHandler = eventHandler;
        // Process any old deferred calls the user has placed.
        JSEvents.runDeferredCalls();
        // Process the actual event, calls back to user C code handler.
        eventHandler.handlerFunc(event);
        // Process any new deferred calls that were placed right now from this event handler.
        JSEvents.runDeferredCalls();
        // Out of event handler - restore nesting count.
        --JSEvents.inEventHandler;
      };
      eventHandler.target.addEventListener(eventHandler.eventTypeString, eventHandler.eventListenerFunc, eventHandler.useCapture);
      JSEvents.eventHandlers.push(eventHandler);
    } else {
      for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
        if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
          JSEvents._removeHandler(i--);
        }
      }
    }
    return 0;
  },
  getTargetThreadForEventCallback(targetThread) {
    switch (targetThread) {
     case 1:
      // The event callback for the current event should be called on the
      // main browser thread. (0 == don't proxy)
      return 0;

     case 2:
      // The event callback for the current event should be backproxied to
      // the thread that is registering the event.
      // This can be 0 in the case that the caller uses
      // EM_CALLBACK_THREAD_CONTEXT_CALLING_THREAD but on the main thread
      // itself.
      return PThread.currentProxiedOperationCallerThread;

     default:
      // The event callback for the current event should be proxied to the
      // given specific thread.
      return targetThread;
    }
  },
  getNodeNameForTarget(target) {
    if (!target) return "";
    if (target == window) return "#window";
    if (target == screen) return "#screen";
    return target?.nodeName || "";
  },
  fullscreenEnabled() {
    return document.fullscreenEnabled || document.webkitFullscreenEnabled;
  }
};

/** @type {Object} */ var specialHTMLTargets = [ 0, typeof document != "undefined" ? document : 0, typeof window != "undefined" ? window : 0 ];

var maybeCStringToJsString = cString => cString > 2 ? UTF8ToString(cString) : cString;

/** @suppress {duplicate } */ var findEventTarget = target => {
  target = maybeCStringToJsString(target);
  var domElement = specialHTMLTargets[target] || (typeof document != "undefined" ? document.querySelector(target) : null);
  return domElement;
};

var findCanvasEventTarget = findEventTarget;

var getCanvasSizeCallingThread = (target, width, height) => {
  var canvas = findCanvasEventTarget(target);
  if (!canvas) return -4;
  if (!canvas.controlTransferredOffscreen) {
    GROWABLE_HEAP_I32()[((width) >> 2)] = canvas.width;
    GROWABLE_HEAP_I32()[((height) >> 2)] = canvas.height;
  } else {
    return -4;
  }
  return 0;
};

function getCanvasSizeMainThread(target, width, height) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(29, 0, 1, target, width, height);
  return getCanvasSizeCallingThread(target, width, height);
}

var _emscripten_get_canvas_element_size = (target, width, height) => {
  var canvas = findCanvasEventTarget(target);
  if (canvas) {
    return getCanvasSizeCallingThread(target, width, height);
  }
  return getCanvasSizeMainThread(target, width, height);
};

var stringToUTF8OnStack = str => {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8(str, ret, size);
  return ret;
};

var getCanvasElementSize = target => {
  var sp = stackSave();
  var w = stackAlloc(8);
  var h = w + 4;
  var targetInt = stringToUTF8OnStack(target.id);
  var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
  var size = [ GROWABLE_HEAP_I32()[((w) >> 2)], GROWABLE_HEAP_I32()[((h) >> 2)] ];
  stackRestore(sp);
  return size;
};

var setCanvasElementSizeCallingThread = (target, width, height) => {
  var canvas = findCanvasEventTarget(target);
  if (!canvas) return -4;
  if (!canvas.controlTransferredOffscreen) {
    var autoResizeViewport = false;
    if (canvas.GLctxObject?.GLctx) {
      var prevViewport = canvas.GLctxObject.GLctx.getParameter(2978);
      // TODO: Perhaps autoResizeViewport should only be true if FBO 0 is currently active?
      autoResizeViewport = (prevViewport[0] === 0 && prevViewport[1] === 0 && prevViewport[2] === canvas.width && prevViewport[3] === canvas.height);
    }
    canvas.width = width;
    canvas.height = height;
    if (autoResizeViewport) {
      // TODO: Add -sCANVAS_RESIZE_SETS_GL_VIEWPORT=0/1 option (default=1). This is commonly done and several graphics engines depend on this,
      // but this can be quite disruptive.
      canvas.GLctxObject.GLctx.viewport(0, 0, width, height);
    }
  } else {
    return -4;
  }
  return 0;
};

function setCanvasElementSizeMainThread(target, width, height) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(30, 0, 1, target, width, height);
  return setCanvasElementSizeCallingThread(target, width, height);
}

var _emscripten_set_canvas_element_size = (target, width, height) => {
  var canvas = findCanvasEventTarget(target);
  if (canvas) {
    return setCanvasElementSizeCallingThread(target, width, height);
  }
  return setCanvasElementSizeMainThread(target, width, height);
};

var setCanvasElementSize = (target, width, height) => {
  if (!target.controlTransferredOffscreen) {
    target.width = width;
    target.height = height;
  } else {
    // This function is being called from high-level JavaScript code instead of asm.js/Wasm,
    // and it needs to synchronously proxy over to another thread, so marshal the string onto the heap to do the call.
    var sp = stackSave();
    var targetInt = stringToUTF8OnStack(target.id);
    _emscripten_set_canvas_element_size(targetInt, width, height);
    stackRestore(sp);
  }
};

var currentFullscreenStrategy = {};

var registerRestoreOldStyle = canvas => {
  var canvasSize = getCanvasElementSize(canvas);
  var oldWidth = canvasSize[0];
  var oldHeight = canvasSize[1];
  var oldCssWidth = canvas.style.width;
  var oldCssHeight = canvas.style.height;
  var oldBackgroundColor = canvas.style.backgroundColor;
  // Chrome reads color from here.
  var oldDocumentBackgroundColor = document.body.style.backgroundColor;
  // IE11 reads color from here.
  // Firefox always has black background color.
  var oldPaddingLeft = canvas.style.paddingLeft;
  // Chrome, FF, Safari
  var oldPaddingRight = canvas.style.paddingRight;
  var oldPaddingTop = canvas.style.paddingTop;
  var oldPaddingBottom = canvas.style.paddingBottom;
  var oldMarginLeft = canvas.style.marginLeft;
  // IE11
  var oldMarginRight = canvas.style.marginRight;
  var oldMarginTop = canvas.style.marginTop;
  var oldMarginBottom = canvas.style.marginBottom;
  var oldDocumentBodyMargin = document.body.style.margin;
  var oldDocumentOverflow = document.documentElement.style.overflow;
  // Chrome, Firefox
  var oldDocumentScroll = document.body.scroll;
  // IE
  var oldImageRendering = canvas.style.imageRendering;
  function restoreOldStyle() {
    var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement;
    if (!fullscreenElement) {
      document.removeEventListener("fullscreenchange", restoreOldStyle);
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      document.removeEventListener("webkitfullscreenchange", restoreOldStyle);
      setCanvasElementSize(canvas, oldWidth, oldHeight);
      canvas.style.width = oldCssWidth;
      canvas.style.height = oldCssHeight;
      canvas.style.backgroundColor = oldBackgroundColor;
      // Chrome
      // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
      // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
      // had explicitly set so subsequent fullscreen transitions would not set background color properly.
      if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = "white";
      document.body.style.backgroundColor = oldDocumentBackgroundColor;
      // IE11
      canvas.style.paddingLeft = oldPaddingLeft;
      // Chrome, FF, Safari
      canvas.style.paddingRight = oldPaddingRight;
      canvas.style.paddingTop = oldPaddingTop;
      canvas.style.paddingBottom = oldPaddingBottom;
      canvas.style.marginLeft = oldMarginLeft;
      // IE11
      canvas.style.marginRight = oldMarginRight;
      canvas.style.marginTop = oldMarginTop;
      canvas.style.marginBottom = oldMarginBottom;
      document.body.style.margin = oldDocumentBodyMargin;
      document.documentElement.style.overflow = oldDocumentOverflow;
      // Chrome, Firefox
      document.body.scroll = oldDocumentScroll;
      // IE
      canvas.style.imageRendering = oldImageRendering;
      if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
      if (currentFullscreenStrategy.canvasResizedCallback) {
        if (currentFullscreenStrategy.canvasResizedCallbackTargetThread) __emscripten_run_callback_on_thread(currentFullscreenStrategy.canvasResizedCallbackTargetThread, currentFullscreenStrategy.canvasResizedCallback, 37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData); else ((a1, a2, a3) => dynCall_iiii(currentFullscreenStrategy.canvasResizedCallback, a1, a2, a3))(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
    }
  }
  document.addEventListener("fullscreenchange", restoreOldStyle);
  // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
  // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
  document.addEventListener("webkitfullscreenchange", restoreOldStyle);
  return restoreOldStyle;
};

var setLetterbox = (element, topBottom, leftRight) => {
  // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
  element.style.paddingLeft = element.style.paddingRight = leftRight + "px";
  element.style.paddingTop = element.style.paddingBottom = topBottom + "px";
};

var getBoundingClientRect = e => specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {
  "left": 0,
  "top": 0
};

var JSEvents_resizeCanvasForFullscreen = (target, strategy) => {
  var restoreOldStyle = registerRestoreOldStyle(target);
  var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
  var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
  var rect = getBoundingClientRect(target);
  var windowedCssWidth = rect.width;
  var windowedCssHeight = rect.height;
  var canvasSize = getCanvasElementSize(target);
  var windowedRttWidth = canvasSize[0];
  var windowedRttHeight = canvasSize[1];
  if (strategy.scaleMode == 3) {
    setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
    cssWidth = windowedCssWidth;
    cssHeight = windowedCssHeight;
  } else if (strategy.scaleMode == 2) {
    if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
      var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
      setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
      cssHeight = desiredCssHeight;
    } else {
      var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
      setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
      cssWidth = desiredCssWidth;
    }
  }
  // If we are adding padding, must choose a background color or otherwise Chrome will give the
  // padding a default white color. Do it only if user has not customized their own background color.
  target.style.backgroundColor ||= "black";
  // IE11 does the same, but requires the color to be set in the document body.
  document.body.style.backgroundColor ||= "black";
  // IE11
  // Firefox always shows black letterboxes independent of style color.
  target.style.width = cssWidth + "px";
  target.style.height = cssHeight + "px";
  if (strategy.filteringMode == 1) {
    target.style.imageRendering = "optimizeSpeed";
    target.style.imageRendering = "-moz-crisp-edges";
    target.style.imageRendering = "-o-crisp-edges";
    target.style.imageRendering = "-webkit-optimize-contrast";
    target.style.imageRendering = "optimize-contrast";
    target.style.imageRendering = "crisp-edges";
    target.style.imageRendering = "pixelated";
  }
  var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? devicePixelRatio : 1;
  if (strategy.canvasResolutionScaleMode != 0) {
    var newWidth = (cssWidth * dpiScale) | 0;
    var newHeight = (cssHeight * dpiScale) | 0;
    setCanvasElementSize(target, newWidth, newHeight);
    if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
  }
  return restoreOldStyle;
};

var JSEvents_requestFullscreen = (target, strategy) => {
  // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
  if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
    JSEvents_resizeCanvasForFullscreen(target, strategy);
  }
  if (target.requestFullscreen) {
    target.requestFullscreen();
  } else if (target.webkitRequestFullscreen) {
    target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  } else {
    return JSEvents.fullscreenEnabled() ? -3 : -1;
  }
  currentFullscreenStrategy = strategy;
  if (strategy.canvasResizedCallback) {
    if (strategy.canvasResizedCallbackTargetThread) __emscripten_run_callback_on_thread(strategy.canvasResizedCallbackTargetThread, strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData); else ((a1, a2, a3) => dynCall_iiii(strategy.canvasResizedCallback, a1, a2, a3))(37, 0, strategy.canvasResizedCallbackUserData);
  }
  return 0;
};

function _emscripten_exit_fullscreen() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(28, 0, 1);
  if (!JSEvents.fullscreenEnabled()) return -1;
  // Make sure no queued up calls will fire after this.
  JSEvents.removeDeferredCalls(JSEvents_requestFullscreen);
  var d = specialHTMLTargets[1];
  if (d.exitFullscreen) {
    d.fullscreenElement && d.exitFullscreen();
  } else if (d.webkitExitFullscreen) {
    d.webkitFullscreenElement && d.webkitExitFullscreen();
  } else {
    return -1;
  }
  return 0;
}

var requestPointerLock = target => {
  if (target.requestPointerLock) {
    target.requestPointerLock();
  } else {
    // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
    // or if the whole browser just doesn't support the feature.
    if (document.body.requestPointerLock) {
      return -3;
    }
    return -1;
  }
  return 0;
};

function _emscripten_exit_pointerlock() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(31, 0, 1);
  // Make sure no queued up calls will fire after this.
  JSEvents.removeDeferredCalls(requestPointerLock);
  if (document.exitPointerLock) {
    document.exitPointerLock();
  } else {
    return -1;
  }
  return 0;
}

var _emscripten_exit_with_live_runtime = () => {
  runtimeKeepalivePush();
  throw "unwind";
};

function _emscripten_force_exit(status) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(32, 0, 1, status);
  warnOnce("emscripten_force_exit cannot actually shut down the runtime, as the build does not have EXIT_RUNTIME set");
  __emscripten_runtime_keepalive_clear();
  _exit(status);
}

function _emscripten_get_device_pixel_ratio() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(33, 0, 1);
  return (typeof devicePixelRatio == "number" && devicePixelRatio) || 1;
}

function _emscripten_get_element_css_size(target, width, height) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(34, 0, 1, target, width, height);
  target = findEventTarget(target);
  if (!target) return -4;
  var rect = getBoundingClientRect(target);
  GROWABLE_HEAP_F64()[((width) >> 3)] = rect.width;
  GROWABLE_HEAP_F64()[((height) >> 3)] = rect.height;
  return 0;
}

var fillGamepadEventData = (eventStruct, e) => {
  GROWABLE_HEAP_F64()[((eventStruct) >> 3)] = e.timestamp;
  for (var i = 0; i < e.axes.length; ++i) {
    GROWABLE_HEAP_F64()[(((eventStruct + i * 8) + (16)) >> 3)] = e.axes[i];
  }
  for (var i = 0; i < e.buttons.length; ++i) {
    if (typeof e.buttons[i] == "object") {
      GROWABLE_HEAP_F64()[(((eventStruct + i * 8) + (528)) >> 3)] = e.buttons[i].value;
    } else {
      GROWABLE_HEAP_F64()[(((eventStruct + i * 8) + (528)) >> 3)] = e.buttons[i];
    }
  }
  for (var i = 0; i < e.buttons.length; ++i) {
    if (typeof e.buttons[i] == "object") {
      GROWABLE_HEAP_I8()[(eventStruct + i) + (1040)] = e.buttons[i].pressed;
    } else {
      // Assigning a boolean to HEAP32, that's ok, but Closure would like to warn about it:
      /** @suppress {checkTypes} */ GROWABLE_HEAP_I8()[(eventStruct + i) + (1040)] = e.buttons[i] == 1;
    }
  }
  GROWABLE_HEAP_I8()[(eventStruct) + (1104)] = e.connected;
  GROWABLE_HEAP_I32()[(((eventStruct) + (1108)) >> 2)] = e.index;
  GROWABLE_HEAP_I32()[(((eventStruct) + (8)) >> 2)] = e.axes.length;
  GROWABLE_HEAP_I32()[(((eventStruct) + (12)) >> 2)] = e.buttons.length;
  stringToUTF8(e.id, eventStruct + 1112, 64);
  stringToUTF8(e.mapping, eventStruct + 1176, 64);
};

function _emscripten_get_gamepad_status(index, gamepadState) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(35, 0, 1, index, gamepadState);
  if (!JSEvents.lastGamepadState) throw "emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!";
  // INVALID_PARAM is returned on a Gamepad index that never was there.
  if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  // NO_DATA is returned on a Gamepad index that was removed.
  // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
  // This is because gamepads must keep their original position in the array.
  // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
  if (!JSEvents.lastGamepadState[index]) return -7;
  fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
  return 0;
}

function _emscripten_get_num_gamepads() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(36, 0, 1);
  if (!JSEvents.lastGamepadState) throw "emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!";
  // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
  // Otherwise the following line will throw an exception.
  return JSEvents.lastGamepadState.length;
}

function _emscripten_get_screen_size(width, height) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(37, 0, 1, width, height);
  GROWABLE_HEAP_I32()[((width) >> 2)] = screen.width;
  GROWABLE_HEAP_I32()[((height) >> 2)] = screen.height;
}

/** @suppress {duplicate } */ var _glActiveTexture = x0 => GLctx.activeTexture(x0);

var _emscripten_glActiveTexture = _glActiveTexture;

/** @suppress {duplicate } */ var _glAttachShader = (program, shader) => {
  GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
};

var _emscripten_glAttachShader = _glAttachShader;

/** @suppress {duplicate } */ var _glBeginQueryEXT = (target, id) => {
  GLctx.disjointTimerQueryExt["beginQueryEXT"](target, GL.queries[id]);
};

var _emscripten_glBeginQueryEXT = _glBeginQueryEXT;

/** @suppress {duplicate } */ var _glBindAttribLocation = (program, index, name) => {
  GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
};

var _emscripten_glBindAttribLocation = _glBindAttribLocation;

/** @suppress {duplicate } */ var _glBindBuffer = (target, buffer) => {
  GLctx.bindBuffer(target, GL.buffers[buffer]);
};

var _emscripten_glBindBuffer = _glBindBuffer;

/** @suppress {duplicate } */ var _glBindFramebuffer = (target, framebuffer) => {
  GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
};

var _emscripten_glBindFramebuffer = _glBindFramebuffer;

/** @suppress {duplicate } */ var _glBindRenderbuffer = (target, renderbuffer) => {
  GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
};

var _emscripten_glBindRenderbuffer = _glBindRenderbuffer;

/** @suppress {duplicate } */ var _glBindTexture = (target, texture) => {
  GLctx.bindTexture(target, GL.textures[texture]);
};

var _emscripten_glBindTexture = _glBindTexture;

/** @suppress {duplicate } */ var _glBindVertexArray = vao => {
  GLctx.bindVertexArray(GL.vaos[vao]);
};

/** @suppress {duplicate } */ var _glBindVertexArrayOES = _glBindVertexArray;

var _emscripten_glBindVertexArrayOES = _glBindVertexArrayOES;

/** @suppress {duplicate } */ var _glBlendColor = (x0, x1, x2, x3) => GLctx.blendColor(x0, x1, x2, x3);

var _emscripten_glBlendColor = _glBlendColor;

/** @suppress {duplicate } */ var _glBlendEquation = x0 => GLctx.blendEquation(x0);

var _emscripten_glBlendEquation = _glBlendEquation;

/** @suppress {duplicate } */ var _glBlendEquationSeparate = (x0, x1) => GLctx.blendEquationSeparate(x0, x1);

var _emscripten_glBlendEquationSeparate = _glBlendEquationSeparate;

/** @suppress {duplicate } */ var _glBlendFunc = (x0, x1) => GLctx.blendFunc(x0, x1);

var _emscripten_glBlendFunc = _glBlendFunc;

/** @suppress {duplicate } */ var _glBlendFuncSeparate = (x0, x1, x2, x3) => GLctx.blendFuncSeparate(x0, x1, x2, x3);

var _emscripten_glBlendFuncSeparate = _glBlendFuncSeparate;

/** @suppress {duplicate } */ var _glBufferData = (target, size, data, usage) => {
  // N.b. here first form specifies a heap subarray, second form an integer
  // size, so the ?: code here is polymorphic. It is advised to avoid
  // randomly mixing both uses in calling code, to avoid any potential JS
  // engine JIT issues.
  GLctx.bufferData(target, data ? GROWABLE_HEAP_U8().subarray(data, data + size) : size, usage);
};

var _emscripten_glBufferData = _glBufferData;

/** @suppress {duplicate } */ var _glBufferSubData = (target, offset, size, data) => {
  GLctx.bufferSubData(target, offset, GROWABLE_HEAP_U8().subarray(data, data + size));
};

var _emscripten_glBufferSubData = _glBufferSubData;

/** @suppress {duplicate } */ var _glCheckFramebufferStatus = x0 => GLctx.checkFramebufferStatus(x0);

var _emscripten_glCheckFramebufferStatus = _glCheckFramebufferStatus;

/** @suppress {duplicate } */ var _glClear = x0 => GLctx.clear(x0);

var _emscripten_glClear = _glClear;

/** @suppress {duplicate } */ var _glClearColor = (x0, x1, x2, x3) => GLctx.clearColor(x0, x1, x2, x3);

var _emscripten_glClearColor = _glClearColor;

/** @suppress {duplicate } */ var _glClearDepthf = x0 => GLctx.clearDepth(x0);

var _emscripten_glClearDepthf = _glClearDepthf;

/** @suppress {duplicate } */ var _glClearStencil = x0 => GLctx.clearStencil(x0);

var _emscripten_glClearStencil = _glClearStencil;

/** @suppress {duplicate } */ var _glClipControlEXT = (origin, depth) => {
  GLctx.extClipControl["clipControlEXT"](origin, depth);
};

var _emscripten_glClipControlEXT = _glClipControlEXT;

/** @suppress {duplicate } */ var _glColorMask = (red, green, blue, alpha) => {
  GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
};

var _emscripten_glColorMask = _glColorMask;

/** @suppress {duplicate } */ var _glCompileShader = shader => {
  GLctx.compileShader(GL.shaders[shader]);
};

var _emscripten_glCompileShader = _glCompileShader;

/** @suppress {duplicate } */ var _glCompressedTexImage2D = (target, level, internalFormat, width, height, border, imageSize, data) => {
  // `data` may be null here, which means "allocate uniniitalized space but
  // don't upload" in GLES parlance, but `compressedTexImage2D` requires the
  // final data parameter, so we simply pass a heap view starting at zero
  // effectively uploading whatever happens to be near address zero.  See
  // https://github.com/emscripten-core/emscripten/issues/19300.
  GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, GROWABLE_HEAP_U8().subarray((data), data + imageSize));
};

var _emscripten_glCompressedTexImage2D = _glCompressedTexImage2D;

/** @suppress {duplicate } */ var _glCompressedTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, imageSize, data) => {
  GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, GROWABLE_HEAP_U8().subarray((data), data + imageSize));
};

var _emscripten_glCompressedTexSubImage2D = _glCompressedTexSubImage2D;

/** @suppress {duplicate } */ var _glCopyTexImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);

var _emscripten_glCopyTexImage2D = _glCopyTexImage2D;

/** @suppress {duplicate } */ var _glCopyTexSubImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);

var _emscripten_glCopyTexSubImage2D = _glCopyTexSubImage2D;

/** @suppress {duplicate } */ var _glCreateProgram = () => {
  var id = GL.getNewId(GL.programs);
  var program = GLctx.createProgram();
  // Store additional information needed for each shader program:
  program.name = id;
  // Lazy cache results of
  // glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
  program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
  program.uniformIdCounter = 1;
  GL.programs[id] = program;
  return id;
};

var _emscripten_glCreateProgram = _glCreateProgram;

/** @suppress {duplicate } */ var _glCreateShader = shaderType => {
  var id = GL.getNewId(GL.shaders);
  GL.shaders[id] = GLctx.createShader(shaderType);
  return id;
};

var _emscripten_glCreateShader = _glCreateShader;

/** @suppress {duplicate } */ var _glCullFace = x0 => GLctx.cullFace(x0);

var _emscripten_glCullFace = _glCullFace;

/** @suppress {duplicate } */ var _glDeleteBuffers = (n, buffers) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((buffers) + (i * 4)) >> 2)];
    var buffer = GL.buffers[id];
    // From spec: "glDeleteBuffers silently ignores 0's and names that do not
    // correspond to existing buffer objects."
    if (!buffer) continue;
    GLctx.deleteBuffer(buffer);
    buffer.name = 0;
    GL.buffers[id] = null;
  }
};

var _emscripten_glDeleteBuffers = _glDeleteBuffers;

/** @suppress {duplicate } */ var _glDeleteFramebuffers = (n, framebuffers) => {
  for (var i = 0; i < n; ++i) {
    var id = GROWABLE_HEAP_I32()[(((framebuffers) + (i * 4)) >> 2)];
    var framebuffer = GL.framebuffers[id];
    if (!framebuffer) continue;
    // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
    GLctx.deleteFramebuffer(framebuffer);
    framebuffer.name = 0;
    GL.framebuffers[id] = null;
  }
};

var _emscripten_glDeleteFramebuffers = _glDeleteFramebuffers;

/** @suppress {duplicate } */ var _glDeleteProgram = id => {
  if (!id) return;
  var program = GL.programs[id];
  if (!program) {
    // glDeleteProgram actually signals an error when deleting a nonexisting
    // object, unlike some other GL delete functions.
    GL.recordError(1281);
    return;
  }
  GLctx.deleteProgram(program);
  program.name = 0;
  GL.programs[id] = null;
};

var _emscripten_glDeleteProgram = _glDeleteProgram;

/** @suppress {duplicate } */ var _glDeleteQueriesEXT = (n, ids) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((ids) + (i * 4)) >> 2)];
    var query = GL.queries[id];
    if (!query) continue;
    // GL spec: "unused names in ids are ignored, as is the name zero."
    GLctx.disjointTimerQueryExt["deleteQueryEXT"](query);
    GL.queries[id] = null;
  }
};

var _emscripten_glDeleteQueriesEXT = _glDeleteQueriesEXT;

/** @suppress {duplicate } */ var _glDeleteRenderbuffers = (n, renderbuffers) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((renderbuffers) + (i * 4)) >> 2)];
    var renderbuffer = GL.renderbuffers[id];
    if (!renderbuffer) continue;
    // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
    GLctx.deleteRenderbuffer(renderbuffer);
    renderbuffer.name = 0;
    GL.renderbuffers[id] = null;
  }
};

var _emscripten_glDeleteRenderbuffers = _glDeleteRenderbuffers;

/** @suppress {duplicate } */ var _glDeleteShader = id => {
  if (!id) return;
  var shader = GL.shaders[id];
  if (!shader) {
    // glDeleteShader actually signals an error when deleting a nonexisting
    // object, unlike some other GL delete functions.
    GL.recordError(1281);
    return;
  }
  GLctx.deleteShader(shader);
  GL.shaders[id] = null;
};

var _emscripten_glDeleteShader = _glDeleteShader;

/** @suppress {duplicate } */ var _glDeleteTextures = (n, textures) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((textures) + (i * 4)) >> 2)];
    var texture = GL.textures[id];
    // GL spec: "glDeleteTextures silently ignores 0s and names that do not
    // correspond to existing textures".
    if (!texture) continue;
    GLctx.deleteTexture(texture);
    texture.name = 0;
    GL.textures[id] = null;
  }
};

var _emscripten_glDeleteTextures = _glDeleteTextures;

/** @suppress {duplicate } */ var _glDeleteVertexArrays = (n, vaos) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((vaos) + (i * 4)) >> 2)];
    GLctx.deleteVertexArray(GL.vaos[id]);
    GL.vaos[id] = null;
  }
};

/** @suppress {duplicate } */ var _glDeleteVertexArraysOES = _glDeleteVertexArrays;

var _emscripten_glDeleteVertexArraysOES = _glDeleteVertexArraysOES;

/** @suppress {duplicate } */ var _glDepthFunc = x0 => GLctx.depthFunc(x0);

var _emscripten_glDepthFunc = _glDepthFunc;

/** @suppress {duplicate } */ var _glDepthMask = flag => {
  GLctx.depthMask(!!flag);
};

var _emscripten_glDepthMask = _glDepthMask;

/** @suppress {duplicate } */ var _glDepthRangef = (x0, x1) => GLctx.depthRange(x0, x1);

var _emscripten_glDepthRangef = _glDepthRangef;

/** @suppress {duplicate } */ var _glDetachShader = (program, shader) => {
  GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
};

var _emscripten_glDetachShader = _glDetachShader;

/** @suppress {duplicate } */ var _glDisable = x0 => GLctx.disable(x0);

var _emscripten_glDisable = _glDisable;

/** @suppress {duplicate } */ var _glDisableVertexAttribArray = index => {
  GLctx.disableVertexAttribArray(index);
};

var _emscripten_glDisableVertexAttribArray = _glDisableVertexAttribArray;

/** @suppress {duplicate } */ var _glDrawArrays = (mode, first, count) => {
  GLctx.drawArrays(mode, first, count);
};

var _emscripten_glDrawArrays = _glDrawArrays;

/** @suppress {duplicate } */ var _glDrawArraysInstanced = (mode, first, count, primcount) => {
  GLctx.drawArraysInstanced(mode, first, count, primcount);
};

/** @suppress {duplicate } */ var _glDrawArraysInstancedANGLE = _glDrawArraysInstanced;

var _emscripten_glDrawArraysInstancedANGLE = _glDrawArraysInstancedANGLE;

var tempFixedLengthArray = [];

/** @suppress {duplicate } */ var _glDrawBuffers = (n, bufs) => {
  var bufArray = tempFixedLengthArray[n];
  for (var i = 0; i < n; i++) {
    bufArray[i] = GROWABLE_HEAP_I32()[(((bufs) + (i * 4)) >> 2)];
  }
  GLctx.drawBuffers(bufArray);
};

/** @suppress {duplicate } */ var _glDrawBuffersWEBGL = _glDrawBuffers;

var _emscripten_glDrawBuffersWEBGL = _glDrawBuffersWEBGL;

/** @suppress {duplicate } */ var _glDrawElements = (mode, count, type, indices) => {
  GLctx.drawElements(mode, count, type, indices);
};

var _emscripten_glDrawElements = _glDrawElements;

/** @suppress {duplicate } */ var _glDrawElementsInstanced = (mode, count, type, indices, primcount) => {
  GLctx.drawElementsInstanced(mode, count, type, indices, primcount);
};

/** @suppress {duplicate } */ var _glDrawElementsInstancedANGLE = _glDrawElementsInstanced;

var _emscripten_glDrawElementsInstancedANGLE = _glDrawElementsInstancedANGLE;

/** @suppress {duplicate } */ var _glEnable = x0 => GLctx.enable(x0);

var _emscripten_glEnable = _glEnable;

/** @suppress {duplicate } */ var _glEnableVertexAttribArray = index => {
  GLctx.enableVertexAttribArray(index);
};

var _emscripten_glEnableVertexAttribArray = _glEnableVertexAttribArray;

/** @suppress {duplicate } */ var _glEndQueryEXT = target => {
  GLctx.disjointTimerQueryExt["endQueryEXT"](target);
};

var _emscripten_glEndQueryEXT = _glEndQueryEXT;

/** @suppress {duplicate } */ var _glFinish = () => GLctx.finish();

var _emscripten_glFinish = _glFinish;

/** @suppress {duplicate } */ var _glFlush = () => GLctx.flush();

var _emscripten_glFlush = _glFlush;

/** @suppress {duplicate } */ var _glFramebufferRenderbuffer = (target, attachment, renderbuffertarget, renderbuffer) => {
  GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer]);
};

var _emscripten_glFramebufferRenderbuffer = _glFramebufferRenderbuffer;

/** @suppress {duplicate } */ var _glFramebufferTexture2D = (target, attachment, textarget, texture, level) => {
  GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level);
};

var _emscripten_glFramebufferTexture2D = _glFramebufferTexture2D;

/** @suppress {duplicate } */ var _glFrontFace = x0 => GLctx.frontFace(x0);

var _emscripten_glFrontFace = _glFrontFace;

/** @suppress {duplicate } */ var _glGenBuffers = (n, buffers) => {
  GL.genObject(n, buffers, "createBuffer", GL.buffers);
};

var _emscripten_glGenBuffers = _glGenBuffers;

/** @suppress {duplicate } */ var _glGenFramebuffers = (n, ids) => {
  GL.genObject(n, ids, "createFramebuffer", GL.framebuffers);
};

var _emscripten_glGenFramebuffers = _glGenFramebuffers;

/** @suppress {duplicate } */ var _glGenQueriesEXT = (n, ids) => {
  for (var i = 0; i < n; i++) {
    var query = GLctx.disjointTimerQueryExt["createQueryEXT"]();
    if (!query) {
      GL.recordError(1282);
      while (i < n) GROWABLE_HEAP_I32()[(((ids) + (i++ * 4)) >> 2)] = 0;
      return;
    }
    var id = GL.getNewId(GL.queries);
    query.name = id;
    GL.queries[id] = query;
    GROWABLE_HEAP_I32()[(((ids) + (i * 4)) >> 2)] = id;
  }
};

var _emscripten_glGenQueriesEXT = _glGenQueriesEXT;

/** @suppress {duplicate } */ var _glGenRenderbuffers = (n, renderbuffers) => {
  GL.genObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers);
};

var _emscripten_glGenRenderbuffers = _glGenRenderbuffers;

/** @suppress {duplicate } */ var _glGenTextures = (n, textures) => {
  GL.genObject(n, textures, "createTexture", GL.textures);
};

var _emscripten_glGenTextures = _glGenTextures;

/** @suppress {duplicate } */ var _glGenVertexArrays = (n, arrays) => {
  GL.genObject(n, arrays, "createVertexArray", GL.vaos);
};

/** @suppress {duplicate } */ var _glGenVertexArraysOES = _glGenVertexArrays;

var _emscripten_glGenVertexArraysOES = _glGenVertexArraysOES;

/** @suppress {duplicate } */ var _glGenerateMipmap = x0 => GLctx.generateMipmap(x0);

var _emscripten_glGenerateMipmap = _glGenerateMipmap;

var __glGetActiveAttribOrUniform = (funcName, program, index, bufSize, length, size, type, name) => {
  program = GL.programs[program];
  var info = GLctx[funcName](program, index);
  if (info) {
    // If an error occurs, nothing will be written to length, size and type and name.
    var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
    if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
    if (size) GROWABLE_HEAP_I32()[((size) >> 2)] = info.size;
    if (type) GROWABLE_HEAP_I32()[((type) >> 2)] = info.type;
  }
};

/** @suppress {duplicate } */ var _glGetActiveAttrib = (program, index, bufSize, length, size, type, name) => __glGetActiveAttribOrUniform("getActiveAttrib", program, index, bufSize, length, size, type, name);

var _emscripten_glGetActiveAttrib = _glGetActiveAttrib;

/** @suppress {duplicate } */ var _glGetActiveUniform = (program, index, bufSize, length, size, type, name) => __glGetActiveAttribOrUniform("getActiveUniform", program, index, bufSize, length, size, type, name);

var _emscripten_glGetActiveUniform = _glGetActiveUniform;

/** @suppress {duplicate } */ var _glGetAttachedShaders = (program, maxCount, count, shaders) => {
  var result = GLctx.getAttachedShaders(GL.programs[program]);
  var len = result.length;
  if (len > maxCount) {
    len = maxCount;
  }
  GROWABLE_HEAP_I32()[((count) >> 2)] = len;
  for (var i = 0; i < len; ++i) {
    var id = GL.shaders.indexOf(result[i]);
    GROWABLE_HEAP_I32()[(((shaders) + (i * 4)) >> 2)] = id;
  }
};

var _emscripten_glGetAttachedShaders = _glGetAttachedShaders;

/** @suppress {duplicate } */ var _glGetAttribLocation = (program, name) => GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));

var _emscripten_glGetAttribLocation = _glGetAttribLocation;

var readI53FromI64 = ptr => GROWABLE_HEAP_U32()[((ptr) >> 2)] + GROWABLE_HEAP_I32()[(((ptr) + (4)) >> 2)] * 4294967296;

var readI53FromU64 = ptr => GROWABLE_HEAP_U32()[((ptr) >> 2)] + GROWABLE_HEAP_U32()[(((ptr) + (4)) >> 2)] * 4294967296;

var writeI53ToI64 = (ptr, num) => {
  GROWABLE_HEAP_U32()[((ptr) >> 2)] = num;
  var lower = GROWABLE_HEAP_U32()[((ptr) >> 2)];
  GROWABLE_HEAP_U32()[(((ptr) + (4)) >> 2)] = (num - lower) / 4294967296;
  var deserialized = (num >= 0) ? readI53FromU64(ptr) : readI53FromI64(ptr);
  var offset = ((ptr) >> 2);
  if (deserialized != num) warnOnce(`writeI53ToI64() out of range: serialized JS Number ${num} to Wasm heap as bytes lo=${ptrToString(GROWABLE_HEAP_U32()[offset])}, hi=${ptrToString(GROWABLE_HEAP_U32()[offset + 1])}, which deserializes back to ${deserialized} instead!`);
};

var emscriptenWebGLGet = (name_, p, type) => {
  // Guard against user passing a null pointer.
  // Note that GLES2 spec does not say anything about how passing a null
  // pointer should be treated.  Testing on desktop core GL 3, the application
  // crashes on glGetIntegerv to a null pointer, but better to report an error
  // instead of doing anything random.
  if (!p) {
    GL.recordError(1281);
    return;
  }
  var ret = undefined;
  switch (name_) {
   // Handle a few trivial GLES values
    case 36346:
    // GL_SHADER_COMPILER
    ret = 1;
    break;

   case 36344:
    // GL_SHADER_BINARY_FORMATS
    if (type != 0 && type != 1) {
      GL.recordError(1280);
    }
    // Do not write anything to the out pointer, since no binary formats are
    // supported.
    return;

   case 36345:
    // GL_NUM_SHADER_BINARY_FORMATS
    ret = 0;
    break;

   case 34466:
    // GL_NUM_COMPRESSED_TEXTURE_FORMATS
    // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete
    // since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be
    // queried for length), so implement it ourselves to allow C++ GLES2
    // code get the length.
    var formats = GLctx.getParameter(34467);
    ret = formats ? formats.length : 0;
    break;
  }
  if (ret === undefined) {
    var result = GLctx.getParameter(name_);
    switch (typeof result) {
     case "number":
      ret = result;
      break;

     case "boolean":
      ret = result ? 1 : 0;
      break;

     case "string":
      GL.recordError(1280);
      // GL_INVALID_ENUM
      return;

     case "object":
      if (result === null) {
        // null is a valid result for some (e.g., which buffer is bound -
        // perhaps nothing is bound), but otherwise can mean an invalid
        // name_, which we need to report as an error
        switch (name_) {
         case 34964:
         // ARRAY_BUFFER_BINDING
          case 35725:
         // CURRENT_PROGRAM
          case 34965:
         // ELEMENT_ARRAY_BUFFER_BINDING
          case 36006:
         // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
          case 36007:
         // RENDERBUFFER_BINDING
          case 32873:
         // TEXTURE_BINDING_2D
          case 34229:
         // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
          case 34068:
          {
            // TEXTURE_BINDING_CUBE_MAP
            ret = 0;
            break;
          }

         default:
          {
            GL.recordError(1280);
            // GL_INVALID_ENUM
            return;
          }
        }
      } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
        for (var i = 0; i < result.length; ++i) {
          switch (type) {
           case 0:
            GROWABLE_HEAP_I32()[(((p) + (i * 4)) >> 2)] = result[i];
            break;

           case 2:
            GROWABLE_HEAP_F32()[(((p) + (i * 4)) >> 2)] = result[i];
            break;

           case 4:
            GROWABLE_HEAP_I8()[(p) + (i)] = result[i] ? 1 : 0;
            break;
          }
        }
        return;
      } else {
        try {
          ret = result.name | 0;
        } catch (e) {
          GL.recordError(1280);
          // GL_INVALID_ENUM
          err(`GL_INVALID_ENUM in glGet${type}v: Unknown object returned from WebGL getParameter(${name_})! (error: ${e})`);
          return;
        }
      }
      break;

     default:
      GL.recordError(1280);
      // GL_INVALID_ENUM
      err(`GL_INVALID_ENUM in glGet${type}v: Native code calling glGet${type}v(${name_}) and it returns ${result} of type ${typeof (result)}!`);
      return;
    }
  }
  switch (type) {
   case 1:
    writeI53ToI64(p, ret);
    break;

   case 0:
    GROWABLE_HEAP_I32()[((p) >> 2)] = ret;
    break;

   case 2:
    GROWABLE_HEAP_F32()[((p) >> 2)] = ret;
    break;

   case 4:
    GROWABLE_HEAP_I8()[p] = ret ? 1 : 0;
    break;
  }
};

/** @suppress {duplicate } */ var _glGetBooleanv = (name_, p) => emscriptenWebGLGet(name_, p, 4);

var _emscripten_glGetBooleanv = _glGetBooleanv;

/** @suppress {duplicate } */ var _glGetBufferParameteriv = (target, value, data) => {
  if (!data) {
    // GLES2 specification does not specify how to behave if data is a null
    // pointer. Since calling this function does not make sense if data ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((data) >> 2)] = GLctx.getBufferParameter(target, value);
};

var _emscripten_glGetBufferParameteriv = _glGetBufferParameteriv;

/** @suppress {duplicate } */ var _glGetError = () => {
  var error = GLctx.getError() || GL.lastError;
  GL.lastError = 0;
  return error;
};

var _emscripten_glGetError = _glGetError;

/** @suppress {duplicate } */ var _glGetFloatv = (name_, p) => emscriptenWebGLGet(name_, p, 2);

var _emscripten_glGetFloatv = _glGetFloatv;

/** @suppress {duplicate } */ var _glGetFramebufferAttachmentParameteriv = (target, attachment, pname, params) => {
  var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
  if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
    result = result.name | 0;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = result;
};

var _emscripten_glGetFramebufferAttachmentParameteriv = _glGetFramebufferAttachmentParameteriv;

/** @suppress {duplicate } */ var _glGetIntegerv = (name_, p) => emscriptenWebGLGet(name_, p, 0);

var _emscripten_glGetIntegerv = _glGetIntegerv;

/** @suppress {duplicate } */ var _glGetProgramInfoLog = (program, maxLength, length, infoLog) => {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  if (log === null) log = "(unknown error)";
  var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
  if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
};

var _emscripten_glGetProgramInfoLog = _glGetProgramInfoLog;

/** @suppress {duplicate } */ var _glGetProgramiv = (program, pname, p) => {
  if (!p) {
    // GLES2 specification does not specify how to behave if p is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  if (program >= GL.counter) {
    GL.recordError(1281);
    return;
  }
  program = GL.programs[program];
  if (pname == 35716) {
    // GL_INFO_LOG_LENGTH
    var log = GLctx.getProgramInfoLog(program);
    if (log === null) log = "(unknown error)";
    GROWABLE_HEAP_I32()[((p) >> 2)] = log.length + 1;
  } else if (pname == 35719) {
    if (!program.maxUniformLength) {
      var numActiveUniforms = GLctx.getProgramParameter(program, 35718);
      for (var i = 0; i < numActiveUniforms; ++i) {
        program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length + 1);
      }
    }
    GROWABLE_HEAP_I32()[((p) >> 2)] = program.maxUniformLength;
  } else if (pname == 35722) {
    if (!program.maxAttributeLength) {
      var numActiveAttributes = GLctx.getProgramParameter(program, 35721);
      for (var i = 0; i < numActiveAttributes; ++i) {
        program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length + 1);
      }
    }
    GROWABLE_HEAP_I32()[((p) >> 2)] = program.maxAttributeLength;
  } else if (pname == 35381) {
    if (!program.maxUniformBlockNameLength) {
      var numActiveUniformBlocks = GLctx.getProgramParameter(program, 35382);
      for (var i = 0; i < numActiveUniformBlocks; ++i) {
        program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length + 1);
      }
    }
    GROWABLE_HEAP_I32()[((p) >> 2)] = program.maxUniformBlockNameLength;
  } else {
    GROWABLE_HEAP_I32()[((p) >> 2)] = GLctx.getProgramParameter(program, pname);
  }
};

var _emscripten_glGetProgramiv = _glGetProgramiv;

/** @suppress {duplicate } */ var _glGetQueryObjecti64vEXT = (id, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if p == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  var query = GL.queries[id];
  var param;
  {
    param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
  }
  var ret;
  if (typeof param == "boolean") {
    ret = param ? 1 : 0;
  } else {
    ret = param;
  }
  writeI53ToI64(params, ret);
};

var _emscripten_glGetQueryObjecti64vEXT = _glGetQueryObjecti64vEXT;

/** @suppress {duplicate } */ var _glGetQueryObjectivEXT = (id, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if p == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  var query = GL.queries[id];
  var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
  var ret;
  if (typeof param == "boolean") {
    ret = param ? 1 : 0;
  } else {
    ret = param;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = ret;
};

var _emscripten_glGetQueryObjectivEXT = _glGetQueryObjectivEXT;

/** @suppress {duplicate } */ var _glGetQueryObjectui64vEXT = _glGetQueryObjecti64vEXT;

var _emscripten_glGetQueryObjectui64vEXT = _glGetQueryObjectui64vEXT;

/** @suppress {duplicate } */ var _glGetQueryObjectuivEXT = _glGetQueryObjectivEXT;

var _emscripten_glGetQueryObjectuivEXT = _glGetQueryObjectuivEXT;

/** @suppress {duplicate } */ var _glGetQueryivEXT = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if p == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = GLctx.disjointTimerQueryExt["getQueryEXT"](target, pname);
};

var _emscripten_glGetQueryivEXT = _glGetQueryivEXT;

/** @suppress {duplicate } */ var _glGetRenderbufferParameteriv = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if params == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = GLctx.getRenderbufferParameter(target, pname);
};

var _emscripten_glGetRenderbufferParameteriv = _glGetRenderbufferParameteriv;

/** @suppress {duplicate } */ var _glGetShaderInfoLog = (shader, maxLength, length, infoLog) => {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
  if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
};

var _emscripten_glGetShaderInfoLog = _glGetShaderInfoLog;

/** @suppress {duplicate } */ var _glGetShaderPrecisionFormat = (shaderType, precisionType, range, precision) => {
  var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
  GROWABLE_HEAP_I32()[((range) >> 2)] = result.rangeMin;
  GROWABLE_HEAP_I32()[(((range) + (4)) >> 2)] = result.rangeMax;
  GROWABLE_HEAP_I32()[((precision) >> 2)] = result.precision;
};

var _emscripten_glGetShaderPrecisionFormat = _glGetShaderPrecisionFormat;

/** @suppress {duplicate } */ var _glGetShaderSource = (shader, bufSize, length, source) => {
  var result = GLctx.getShaderSource(GL.shaders[shader]);
  if (!result) return;
  // If an error occurs, nothing will be written to length or source.
  var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
  if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
};

var _emscripten_glGetShaderSource = _glGetShaderSource;

/** @suppress {duplicate } */ var _glGetShaderiv = (shader, pname, p) => {
  if (!p) {
    // GLES2 specification does not specify how to behave if p is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  if (pname == 35716) {
    // GL_INFO_LOG_LENGTH
    var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
    if (log === null) log = "(unknown error)";
    // The GLES2 specification says that if the shader has an empty info log,
    // a value of 0 is returned. Otherwise the log has a null char appended.
    // (An empty string is falsey, so we can just check that instead of
    // looking at log.length.)
    var logLength = log ? log.length + 1 : 0;
    GROWABLE_HEAP_I32()[((p) >> 2)] = logLength;
  } else if (pname == 35720) {
    // GL_SHADER_SOURCE_LENGTH
    var source = GLctx.getShaderSource(GL.shaders[shader]);
    // source may be a null, or the empty string, both of which are falsey
    // values that we report a 0 length for.
    var sourceLength = source ? source.length + 1 : 0;
    GROWABLE_HEAP_I32()[((p) >> 2)] = sourceLength;
  } else {
    GROWABLE_HEAP_I32()[((p) >> 2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
  }
};

var _emscripten_glGetShaderiv = _glGetShaderiv;

var webglGetExtensions = () => {
  var exts = getEmscriptenSupportedExtensions(GLctx);
  exts = exts.concat(exts.map(e => "GL_" + e));
  return exts;
};

/** @suppress {duplicate } */ var _glGetString = name_ => {
  var ret = GL.stringCache[name_];
  if (!ret) {
    switch (name_) {
     case 7939:
      ret = stringToNewUTF8(webglGetExtensions().join(" "));
      break;

     case 7936:
     case 7937:
     case 37445:
     case 37446:
      var s = GLctx.getParameter(name_);
      if (!s) {
        GL.recordError(1280);
      }
      ret = s ? stringToNewUTF8(s) : 0;
      break;

     case 7938:
      var webGLVersion = GLctx.getParameter(7938);
      // return GLES version string corresponding to the version of the WebGL context
      var glVersion = `OpenGL ES 2.0 (${webGLVersion})`;
      ret = stringToNewUTF8(glVersion);
      break;

     case 35724:
      var glslVersion = GLctx.getParameter(35724);
      // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
      var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
      var ver_num = glslVersion.match(ver_re);
      if (ver_num !== null) {
        if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
        // ensure minor version has 2 digits
        glslVersion = `OpenGL ES GLSL ES ${ver_num[1]} (${glslVersion})`;
      }
      ret = stringToNewUTF8(glslVersion);
      break;

     default:
      GL.recordError(1280);
    }
    GL.stringCache[name_] = ret;
  }
  return ret;
};

var _emscripten_glGetString = _glGetString;

/** @suppress {duplicate } */ var _glGetTexParameterfv = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_F32()[((params) >> 2)] = GLctx.getTexParameter(target, pname);
};

var _emscripten_glGetTexParameterfv = _glGetTexParameterfv;

/** @suppress {duplicate } */ var _glGetTexParameteriv = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = GLctx.getTexParameter(target, pname);
};

var _emscripten_glGetTexParameteriv = _glGetTexParameteriv;

/** @suppress {checkTypes} */ var jstoi_q = str => parseInt(str);

/** @noinline */ var webglGetLeftBracePos = name => name.slice(-1) == "]" && name.lastIndexOf("[");

var webglPrepareUniformLocationsBeforeFirstUse = program => {
  var uniformLocsById = program.uniformLocsById, // Maps GLuint -> WebGLUniformLocation
  uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, // Maps name -> [uniform array length, GLuint]
  i, j;
  // On the first time invocation of glGetUniformLocation on this shader program:
  // initialize cache data structures and discover which uniforms are arrays.
  if (!uniformLocsById) {
    // maps GLint integer locations to WebGLUniformLocations
    program.uniformLocsById = uniformLocsById = {};
    // maps integer locations back to uniform name strings, so that we can lazily fetch uniform array locations
    program.uniformArrayNamesById = {};
    var numActiveUniforms = GLctx.getProgramParameter(program, 35718);
    for (i = 0; i < numActiveUniforms; ++i) {
      var u = GLctx.getActiveUniform(program, i);
      var nm = u.name;
      var sz = u.size;
      var lb = webglGetLeftBracePos(nm);
      var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
      // Assign a new location.
      var id = program.uniformIdCounter;
      program.uniformIdCounter += sz;
      // Eagerly get the location of the uniformArray[0] base element.
      // The remaining indices >0 will be left for lazy evaluation to
      // improve performance. Those may never be needed to fetch, if the
      // application fills arrays always in full starting from the first
      // element of the array.
      uniformSizeAndIdsByName[arrayName] = [ sz, id ];
      // Store placeholder integers in place that highlight that these
      // >0 index locations are array indices pending population.
      for (j = 0; j < sz; ++j) {
        uniformLocsById[id] = j;
        program.uniformArrayNamesById[id++] = arrayName;
      }
    }
  }
};

/** @suppress {duplicate } */ var _glGetUniformLocation = (program, name) => {
  name = UTF8ToString(name);
  if (program = GL.programs[program]) {
    webglPrepareUniformLocationsBeforeFirstUse(program);
    var uniformLocsById = program.uniformLocsById;
    // Maps GLuint -> WebGLUniformLocation
    var arrayIndex = 0;
    var uniformBaseName = name;
    // Invariant: when populating integer IDs for uniform locations, we must
    // maintain the precondition that arrays reside in contiguous addresses,
    // i.e. for a 'vec4 colors[10];', colors[4] must be at location
    // colors[0]+4.  However, user might call glGetUniformLocation(program,
    // "colors") for an array, so we cannot discover based on the user input
    // arguments whether the uniform we are dealing with is an array. The only
    // way to discover which uniforms are arrays is to enumerate over all the
    // active uniforms in the program.
    var leftBrace = webglGetLeftBracePos(name);
    // If user passed an array accessor "[index]", parse the array index off the accessor.
    if (leftBrace > 0) {
      arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0;
      // "index]", coerce parseInt(']') with >>>0 to treat "foo[]" as "foo[0]" and foo[-1] as unsigned out-of-bounds.
      uniformBaseName = name.slice(0, leftBrace);
    }
    // Have we cached the location of this uniform before?
    // A pair [array length, GLint of the uniform location]
    var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
    // If an uniform with this name exists, and if its index is within the
    // array limits (if it's even an array), query the WebGLlocation, or
    // return an existing cached location.
    if (sizeAndId && arrayIndex < sizeAndId[0]) {
      arrayIndex += sizeAndId[1];
      // Add the base location of the uniform to the array index offset.
      if ((uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name))) {
        return arrayIndex;
      }
    }
  } else {
    // N.b. we are currently unable to distinguish between GL program IDs that
    // never existed vs GL program IDs that have been deleted, so report
    // GL_INVALID_VALUE in both cases.
    GL.recordError(1281);
  }
  return -1;
};

var _emscripten_glGetUniformLocation = _glGetUniformLocation;

var webglGetUniformLocation = location => {
  var p = GLctx.currentProgram;
  if (p) {
    var webglLoc = p.uniformLocsById[location];
    // p.uniformLocsById[location] stores either an integer, or a
    // WebGLUniformLocation.
    // If an integer, we have not yet bound the location, so do it now. The
    // integer value specifies the array index we should bind to.
    if (typeof webglLoc == "number") {
      p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? `[${webglLoc}]` : ""));
    }
    // Else an already cached WebGLUniformLocation, return it.
    return webglLoc;
  } else {
    GL.recordError(1282);
  }
};

/** @suppress{checkTypes} */ var emscriptenWebGLGetUniform = (program, location, params, type) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if params ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  program = GL.programs[program];
  webglPrepareUniformLocationsBeforeFirstUse(program);
  var data = GLctx.getUniform(program, webglGetUniformLocation(location));
  if (typeof data == "number" || typeof data == "boolean") {
    switch (type) {
     case 0:
      GROWABLE_HEAP_I32()[((params) >> 2)] = data;
      break;

     case 2:
      GROWABLE_HEAP_F32()[((params) >> 2)] = data;
      break;
    }
  } else {
    for (var i = 0; i < data.length; i++) {
      switch (type) {
       case 0:
        GROWABLE_HEAP_I32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;

       case 2:
        GROWABLE_HEAP_F32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;
      }
    }
  }
};

/** @suppress {duplicate } */ var _glGetUniformfv = (program, location, params) => {
  emscriptenWebGLGetUniform(program, location, params, 2);
};

var _emscripten_glGetUniformfv = _glGetUniformfv;

/** @suppress {duplicate } */ var _glGetUniformiv = (program, location, params) => {
  emscriptenWebGLGetUniform(program, location, params, 0);
};

var _emscripten_glGetUniformiv = _glGetUniformiv;

/** @suppress {duplicate } */ var _glGetVertexAttribPointerv = (index, pname, pointer) => {
  if (!pointer) {
    // GLES2 specification does not specify how to behave if pointer is a null
    // pointer. Since calling this function does not make sense if pointer ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((pointer) >> 2)] = GLctx.getVertexAttribOffset(index, pname);
};

var _emscripten_glGetVertexAttribPointerv = _glGetVertexAttribPointerv;

/** @suppress{checkTypes} */ var emscriptenWebGLGetVertexAttrib = (index, pname, params, type) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if params ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  var data = GLctx.getVertexAttrib(index, pname);
  if (pname == 34975) {
    GROWABLE_HEAP_I32()[((params) >> 2)] = data && data["name"];
  } else if (typeof data == "number" || typeof data == "boolean") {
    switch (type) {
     case 0:
      GROWABLE_HEAP_I32()[((params) >> 2)] = data;
      break;

     case 2:
      GROWABLE_HEAP_F32()[((params) >> 2)] = data;
      break;

     case 5:
      GROWABLE_HEAP_I32()[((params) >> 2)] = Math.fround(data);
      break;
    }
  } else {
    for (var i = 0; i < data.length; i++) {
      switch (type) {
       case 0:
        GROWABLE_HEAP_I32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;

       case 2:
        GROWABLE_HEAP_F32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;

       case 5:
        GROWABLE_HEAP_I32()[(((params) + (i * 4)) >> 2)] = Math.fround(data[i]);
        break;
      }
    }
  }
};

/** @suppress {duplicate } */ var _glGetVertexAttribfv = (index, pname, params) => {
  // N.B. This function may only be called if the vertex attribute was
  // specified using the function glVertexAttrib*f(), otherwise the results
  // are undefined. (GLES3 spec 6.1.12)
  emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
};

var _emscripten_glGetVertexAttribfv = _glGetVertexAttribfv;

/** @suppress {duplicate } */ var _glGetVertexAttribiv = (index, pname, params) => {
  // N.B. This function may only be called if the vertex attribute was
  // specified using the function glVertexAttrib*f(), otherwise the results
  // are undefined. (GLES3 spec 6.1.12)
  emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
};

var _emscripten_glGetVertexAttribiv = _glGetVertexAttribiv;

/** @suppress {duplicate } */ var _glHint = (x0, x1) => GLctx.hint(x0, x1);

var _emscripten_glHint = _glHint;

/** @suppress {duplicate } */ var _glIsBuffer = buffer => {
  var b = GL.buffers[buffer];
  if (!b) return 0;
  return GLctx.isBuffer(b);
};

var _emscripten_glIsBuffer = _glIsBuffer;

/** @suppress {duplicate } */ var _glIsEnabled = x0 => GLctx.isEnabled(x0);

var _emscripten_glIsEnabled = _glIsEnabled;

/** @suppress {duplicate } */ var _glIsFramebuffer = framebuffer => {
  var fb = GL.framebuffers[framebuffer];
  if (!fb) return 0;
  return GLctx.isFramebuffer(fb);
};

var _emscripten_glIsFramebuffer = _glIsFramebuffer;

/** @suppress {duplicate } */ var _glIsProgram = program => {
  program = GL.programs[program];
  if (!program) return 0;
  return GLctx.isProgram(program);
};

var _emscripten_glIsProgram = _glIsProgram;

/** @suppress {duplicate } */ var _glIsQueryEXT = id => {
  var query = GL.queries[id];
  if (!query) return 0;
  return GLctx.disjointTimerQueryExt["isQueryEXT"](query);
};

var _emscripten_glIsQueryEXT = _glIsQueryEXT;

/** @suppress {duplicate } */ var _glIsRenderbuffer = renderbuffer => {
  var rb = GL.renderbuffers[renderbuffer];
  if (!rb) return 0;
  return GLctx.isRenderbuffer(rb);
};

var _emscripten_glIsRenderbuffer = _glIsRenderbuffer;

/** @suppress {duplicate } */ var _glIsShader = shader => {
  var s = GL.shaders[shader];
  if (!s) return 0;
  return GLctx.isShader(s);
};

var _emscripten_glIsShader = _glIsShader;

/** @suppress {duplicate } */ var _glIsTexture = id => {
  var texture = GL.textures[id];
  if (!texture) return 0;
  return GLctx.isTexture(texture);
};

var _emscripten_glIsTexture = _glIsTexture;

/** @suppress {duplicate } */ var _glIsVertexArray = array => {
  var vao = GL.vaos[array];
  if (!vao) return 0;
  return GLctx.isVertexArray(vao);
};

/** @suppress {duplicate } */ var _glIsVertexArrayOES = _glIsVertexArray;

var _emscripten_glIsVertexArrayOES = _glIsVertexArrayOES;

/** @suppress {duplicate } */ var _glLineWidth = x0 => GLctx.lineWidth(x0);

var _emscripten_glLineWidth = _glLineWidth;

/** @suppress {duplicate } */ var _glLinkProgram = program => {
  program = GL.programs[program];
  GLctx.linkProgram(program);
  // Invalidate earlier computed uniform->ID mappings, those have now become stale
  program.uniformLocsById = 0;
  // Mark as null-like so that glGetUniformLocation() knows to populate this again.
  program.uniformSizeAndIdsByName = {};
};

var _emscripten_glLinkProgram = _glLinkProgram;

/** @suppress {duplicate } */ var _glPixelStorei = (pname, param) => {
  if (pname == 3317) {
    GL.unpackAlignment = param;
  } else if (pname == 3314) {
    GL.unpackRowLength = param;
  }
  GLctx.pixelStorei(pname, param);
};

var _emscripten_glPixelStorei = _glPixelStorei;

/** @suppress {duplicate } */ var _glPolygonModeWEBGL = (face, mode) => {
  GLctx.webglPolygonMode["polygonModeWEBGL"](face, mode);
};

var _emscripten_glPolygonModeWEBGL = _glPolygonModeWEBGL;

/** @suppress {duplicate } */ var _glPolygonOffset = (x0, x1) => GLctx.polygonOffset(x0, x1);

var _emscripten_glPolygonOffset = _glPolygonOffset;

/** @suppress {duplicate } */ var _glPolygonOffsetClampEXT = (factor, units, clamp) => {
  GLctx.extPolygonOffsetClamp["polygonOffsetClampEXT"](factor, units, clamp);
};

var _emscripten_glPolygonOffsetClampEXT = _glPolygonOffsetClampEXT;

/** @suppress {duplicate } */ var _glQueryCounterEXT = (id, target) => {
  GLctx.disjointTimerQueryExt["queryCounterEXT"](GL.queries[id], target);
};

var _emscripten_glQueryCounterEXT = _glQueryCounterEXT;

var computeUnpackAlignedImageSize = (width, height, sizePerPixel) => {
  function roundedToNextMultipleOf(x, y) {
    return (x + y - 1) & -y;
  }
  var plainRowSize = (GL.unpackRowLength || width) * sizePerPixel;
  var alignedRowSize = roundedToNextMultipleOf(plainRowSize, GL.unpackAlignment);
  return height * alignedRowSize;
};

var colorChannelsInGlTextureFormat = format => {
  // Micro-optimizations for size: map format to size by subtracting smallest
  // enum value (0x1902) from all values first.  Also omit the most common
  // size value (1) from the list, which is assumed by formats not on the
  // list.
  var colorChannels = {
    // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
    // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
    5: 3,
    6: 4,
    // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
    8: 2,
    29502: 3,
    29504: 4
  };
  return colorChannels[format - 6402] || 1;
};

var heapObjectForWebGLType = type => {
  // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
  // smaller values for the heap, for shorter generated code size.
  // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
  // (since most types are HEAPU16)
  type -= 5120;
  if (type == 1) return GROWABLE_HEAP_U8();
  if (type == 4) return GROWABLE_HEAP_I32();
  if (type == 6) return GROWABLE_HEAP_F32();
  if (type == 5 || type == 28922) return GROWABLE_HEAP_U32();
  return GROWABLE_HEAP_U16();
};

var toTypedArrayIndex = (pointer, heap) => pointer >>> (31 - Math.clz32(heap.BYTES_PER_ELEMENT));

var emscriptenWebGLGetTexPixelData = (type, format, width, height, pixels, internalFormat) => {
  var heap = heapObjectForWebGLType(type);
  var sizePerPixel = colorChannelsInGlTextureFormat(format) * heap.BYTES_PER_ELEMENT;
  var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel);
  return heap.subarray(toTypedArrayIndex(pixels, heap), toTypedArrayIndex(pixels + bytes, heap));
};

/** @suppress {duplicate } */ var _glReadPixels = (x, y, width, height, format, type, pixels) => {
  var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
  if (!pixelData) {
    GL.recordError(1280);
    return;
  }
  GLctx.readPixels(x, y, width, height, format, type, pixelData);
};

var _emscripten_glReadPixels = _glReadPixels;

/** @suppress {duplicate } */ var _glReleaseShaderCompiler = () => {};

var _emscripten_glReleaseShaderCompiler = _glReleaseShaderCompiler;

/** @suppress {duplicate } */ var _glRenderbufferStorage = (x0, x1, x2, x3) => GLctx.renderbufferStorage(x0, x1, x2, x3);

var _emscripten_glRenderbufferStorage = _glRenderbufferStorage;

/** @suppress {duplicate } */ var _glSampleCoverage = (value, invert) => {
  GLctx.sampleCoverage(value, !!invert);
};

var _emscripten_glSampleCoverage = _glSampleCoverage;

/** @suppress {duplicate } */ var _glScissor = (x0, x1, x2, x3) => GLctx.scissor(x0, x1, x2, x3);

var _emscripten_glScissor = _glScissor;

/** @suppress {duplicate } */ var _glShaderBinary = (count, shaders, binaryformat, binary, length) => {
  GL.recordError(1280);
};

var _emscripten_glShaderBinary = _glShaderBinary;

/** @suppress {duplicate } */ var _glShaderSource = (shader, count, string, length) => {
  var source = GL.getSource(shader, count, string, length);
  GLctx.shaderSource(GL.shaders[shader], source);
};

var _emscripten_glShaderSource = _glShaderSource;

/** @suppress {duplicate } */ var _glStencilFunc = (x0, x1, x2) => GLctx.stencilFunc(x0, x1, x2);

var _emscripten_glStencilFunc = _glStencilFunc;

/** @suppress {duplicate } */ var _glStencilFuncSeparate = (x0, x1, x2, x3) => GLctx.stencilFuncSeparate(x0, x1, x2, x3);

var _emscripten_glStencilFuncSeparate = _glStencilFuncSeparate;

/** @suppress {duplicate } */ var _glStencilMask = x0 => GLctx.stencilMask(x0);

var _emscripten_glStencilMask = _glStencilMask;

/** @suppress {duplicate } */ var _glStencilMaskSeparate = (x0, x1) => GLctx.stencilMaskSeparate(x0, x1);

var _emscripten_glStencilMaskSeparate = _glStencilMaskSeparate;

/** @suppress {duplicate } */ var _glStencilOp = (x0, x1, x2) => GLctx.stencilOp(x0, x1, x2);

var _emscripten_glStencilOp = _glStencilOp;

/** @suppress {duplicate } */ var _glStencilOpSeparate = (x0, x1, x2, x3) => GLctx.stencilOpSeparate(x0, x1, x2, x3);

var _emscripten_glStencilOpSeparate = _glStencilOpSeparate;

/** @suppress {duplicate } */ var _glTexImage2D = (target, level, internalFormat, width, height, border, format, type, pixels) => {
  var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null;
  GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
};

var _emscripten_glTexImage2D = _glTexImage2D;

/** @suppress {duplicate } */ var _glTexParameterf = (x0, x1, x2) => GLctx.texParameterf(x0, x1, x2);

var _emscripten_glTexParameterf = _glTexParameterf;

/** @suppress {duplicate } */ var _glTexParameterfv = (target, pname, params) => {
  var param = GROWABLE_HEAP_F32()[((params) >> 2)];
  GLctx.texParameterf(target, pname, param);
};

var _emscripten_glTexParameterfv = _glTexParameterfv;

/** @suppress {duplicate } */ var _glTexParameteri = (x0, x1, x2) => GLctx.texParameteri(x0, x1, x2);

var _emscripten_glTexParameteri = _glTexParameteri;

/** @suppress {duplicate } */ var _glTexParameteriv = (target, pname, params) => {
  var param = GROWABLE_HEAP_I32()[((params) >> 2)];
  GLctx.texParameteri(target, pname, param);
};

var _emscripten_glTexParameteriv = _glTexParameteriv;

/** @suppress {duplicate } */ var _glTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, type, pixels) => {
  var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0) : null;
  GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
};

var _emscripten_glTexSubImage2D = _glTexSubImage2D;

/** @suppress {duplicate } */ var _glUniform1f = (location, v0) => {
  GLctx.uniform1f(webglGetUniformLocation(location), v0);
};

var _emscripten_glUniform1f = _glUniform1f;

var miniTempWebGLFloatBuffers = [];

/** @suppress {duplicate } */ var _glUniform1fv = (location, count, value) => {
  if (count <= 288) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; ++i) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 4) >> 2));
  }
  GLctx.uniform1fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform1fv = _glUniform1fv;

/** @suppress {duplicate } */ var _glUniform1i = (location, v0) => {
  GLctx.uniform1i(webglGetUniformLocation(location), v0);
};

var _emscripten_glUniform1i = _glUniform1i;

var miniTempWebGLIntBuffers = [];

/** @suppress {duplicate } */ var _glUniform1iv = (location, count, value) => {
  if (count <= 288) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; ++i) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 4) >> 2));
  }
  GLctx.uniform1iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform1iv = _glUniform1iv;

/** @suppress {duplicate } */ var _glUniform2f = (location, v0, v1) => {
  GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
};

var _emscripten_glUniform2f = _glUniform2f;

/** @suppress {duplicate } */ var _glUniform2fv = (location, count, value) => {
  if (count <= 144) {
    // avoid allocation when uploading few enough uniforms
    count *= 2;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 2) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 8) >> 2));
  }
  GLctx.uniform2fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform2fv = _glUniform2fv;

/** @suppress {duplicate } */ var _glUniform2i = (location, v0, v1) => {
  GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
};

var _emscripten_glUniform2i = _glUniform2i;

/** @suppress {duplicate } */ var _glUniform2iv = (location, count, value) => {
  if (count <= 144) {
    // avoid allocation when uploading few enough uniforms
    count *= 2;
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; i += 2) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 4)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 8) >> 2));
  }
  GLctx.uniform2iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform2iv = _glUniform2iv;

/** @suppress {duplicate } */ var _glUniform3f = (location, v0, v1, v2) => {
  GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
};

var _emscripten_glUniform3f = _glUniform3f;

/** @suppress {duplicate } */ var _glUniform3fv = (location, count, value) => {
  if (count <= 96) {
    // avoid allocation when uploading few enough uniforms
    count *= 3;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 3) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 8)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 12) >> 2));
  }
  GLctx.uniform3fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform3fv = _glUniform3fv;

/** @suppress {duplicate } */ var _glUniform3i = (location, v0, v1, v2) => {
  GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
};

var _emscripten_glUniform3i = _glUniform3i;

/** @suppress {duplicate } */ var _glUniform3iv = (location, count, value) => {
  if (count <= 96) {
    // avoid allocation when uploading few enough uniforms
    count *= 3;
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; i += 3) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 8)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 12) >> 2));
  }
  GLctx.uniform3iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform3iv = _glUniform3iv;

/** @suppress {duplicate } */ var _glUniform4f = (location, v0, v1, v2, v3) => {
  GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
};

var _emscripten_glUniform4f = _glUniform4f;

/** @suppress {duplicate } */ var _glUniform4fv = (location, count, value) => {
  if (count <= 72) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLFloatBuffers[4 * count];
    // hoist the heap out of the loop for size and for pthreads+growth.
    var heap = GROWABLE_HEAP_F32();
    value = ((value) >> 2);
    count *= 4;
    for (var i = 0; i < count; i += 4) {
      var dst = value + i;
      view[i] = heap[dst];
      view[i + 1] = heap[dst + 1];
      view[i + 2] = heap[dst + 2];
      view[i + 3] = heap[dst + 3];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 16) >> 2));
  }
  GLctx.uniform4fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform4fv = _glUniform4fv;

/** @suppress {duplicate } */ var _glUniform4i = (location, v0, v1, v2, v3) => {
  GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
};

var _emscripten_glUniform4i = _glUniform4i;

/** @suppress {duplicate } */ var _glUniform4iv = (location, count, value) => {
  if (count <= 72) {
    // avoid allocation when uploading few enough uniforms
    count *= 4;
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; i += 4) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 8)) >> 2)];
      view[i + 3] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 12)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 16) >> 2));
  }
  GLctx.uniform4iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform4iv = _glUniform4iv;

/** @suppress {duplicate } */ var _glUniformMatrix2fv = (location, count, transpose, value) => {
  if (count <= 72) {
    // avoid allocation when uploading few enough uniforms
    count *= 4;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 4) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 8)) >> 2)];
      view[i + 3] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 12)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 16) >> 2));
  }
  GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, view);
};

var _emscripten_glUniformMatrix2fv = _glUniformMatrix2fv;

/** @suppress {duplicate } */ var _glUniformMatrix3fv = (location, count, transpose, value) => {
  if (count <= 32) {
    // avoid allocation when uploading few enough uniforms
    count *= 9;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 9) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 8)) >> 2)];
      view[i + 3] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 12)) >> 2)];
      view[i + 4] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 16)) >> 2)];
      view[i + 5] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 20)) >> 2)];
      view[i + 6] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 24)) >> 2)];
      view[i + 7] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 28)) >> 2)];
      view[i + 8] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 32)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 36) >> 2));
  }
  GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, view);
};

var _emscripten_glUniformMatrix3fv = _glUniformMatrix3fv;

/** @suppress {duplicate } */ var _glUniformMatrix4fv = (location, count, transpose, value) => {
  if (count <= 18) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLFloatBuffers[16 * count];
    // hoist the heap out of the loop for size and for pthreads+growth.
    var heap = GROWABLE_HEAP_F32();
    value = ((value) >> 2);
    count *= 16;
    for (var i = 0; i < count; i += 16) {
      var dst = value + i;
      view[i] = heap[dst];
      view[i + 1] = heap[dst + 1];
      view[i + 2] = heap[dst + 2];
      view[i + 3] = heap[dst + 3];
      view[i + 4] = heap[dst + 4];
      view[i + 5] = heap[dst + 5];
      view[i + 6] = heap[dst + 6];
      view[i + 7] = heap[dst + 7];
      view[i + 8] = heap[dst + 8];
      view[i + 9] = heap[dst + 9];
      view[i + 10] = heap[dst + 10];
      view[i + 11] = heap[dst + 11];
      view[i + 12] = heap[dst + 12];
      view[i + 13] = heap[dst + 13];
      view[i + 14] = heap[dst + 14];
      view[i + 15] = heap[dst + 15];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 64) >> 2));
  }
  GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view);
};

var _emscripten_glUniformMatrix4fv = _glUniformMatrix4fv;

/** @suppress {duplicate } */ var _glUseProgram = program => {
  program = GL.programs[program];
  GLctx.useProgram(program);
  // Record the currently active program so that we can access the uniform
  // mapping table of that program.
  GLctx.currentProgram = program;
};

var _emscripten_glUseProgram = _glUseProgram;

/** @suppress {duplicate } */ var _glValidateProgram = program => {
  GLctx.validateProgram(GL.programs[program]);
};

var _emscripten_glValidateProgram = _glValidateProgram;

/** @suppress {duplicate } */ var _glVertexAttrib1f = (x0, x1) => GLctx.vertexAttrib1f(x0, x1);

var _emscripten_glVertexAttrib1f = _glVertexAttrib1f;

/** @suppress {duplicate } */ var _glVertexAttrib1fv = (index, v) => {
  GLctx.vertexAttrib1f(index, GROWABLE_HEAP_F32()[v >> 2]);
};

var _emscripten_glVertexAttrib1fv = _glVertexAttrib1fv;

/** @suppress {duplicate } */ var _glVertexAttrib2f = (x0, x1, x2) => GLctx.vertexAttrib2f(x0, x1, x2);

var _emscripten_glVertexAttrib2f = _glVertexAttrib2f;

/** @suppress {duplicate } */ var _glVertexAttrib2fv = (index, v) => {
  GLctx.vertexAttrib2f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2]);
};

var _emscripten_glVertexAttrib2fv = _glVertexAttrib2fv;

/** @suppress {duplicate } */ var _glVertexAttrib3f = (x0, x1, x2, x3) => GLctx.vertexAttrib3f(x0, x1, x2, x3);

var _emscripten_glVertexAttrib3f = _glVertexAttrib3f;

/** @suppress {duplicate } */ var _glVertexAttrib3fv = (index, v) => {
  GLctx.vertexAttrib3f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2], GROWABLE_HEAP_F32()[v + 8 >> 2]);
};

var _emscripten_glVertexAttrib3fv = _glVertexAttrib3fv;

/** @suppress {duplicate } */ var _glVertexAttrib4f = (x0, x1, x2, x3, x4) => GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);

var _emscripten_glVertexAttrib4f = _glVertexAttrib4f;

/** @suppress {duplicate } */ var _glVertexAttrib4fv = (index, v) => {
  GLctx.vertexAttrib4f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2], GROWABLE_HEAP_F32()[v + 8 >> 2], GROWABLE_HEAP_F32()[v + 12 >> 2]);
};

var _emscripten_glVertexAttrib4fv = _glVertexAttrib4fv;

/** @suppress {duplicate } */ var _glVertexAttribDivisor = (index, divisor) => {
  GLctx.vertexAttribDivisor(index, divisor);
};

/** @suppress {duplicate } */ var _glVertexAttribDivisorANGLE = _glVertexAttribDivisor;

var _emscripten_glVertexAttribDivisorANGLE = _glVertexAttribDivisorANGLE;

/** @suppress {duplicate } */ var _glVertexAttribPointer = (index, size, type, normalized, stride, ptr) => {
  GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
};

var _emscripten_glVertexAttribPointer = _glVertexAttribPointer;

/** @suppress {duplicate } */ var _glViewport = (x0, x1, x2, x3) => GLctx.viewport(x0, x1, x2, x3);

var _emscripten_glViewport = _glViewport;

var _emscripten_has_asyncify = () => 1;

var doRequestFullscreen = (target, strategy) => {
  if (!JSEvents.fullscreenEnabled()) return -1;
  target = findEventTarget(target);
  if (!target) return -4;
  if (!target.requestFullscreen && !target.webkitRequestFullscreen) {
    return -3;
  }
  // Queue this function call if we're not currently in an event handler and
  // the user saw it appropriate to do so.
  if (!JSEvents.canPerformEventHandlerRequests()) {
    if (strategy.deferUntilInEventHandler) {
      JSEvents.deferCall(JSEvents_requestFullscreen, 1, [ target, strategy ]);
      return 1;
    }
    return -2;
  }
  return JSEvents_requestFullscreen(target, strategy);
};

function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(38, 0, 1, target, deferUntilInEventHandler, fullscreenStrategy);
  var strategy = {
    scaleMode: GROWABLE_HEAP_I32()[((fullscreenStrategy) >> 2)],
    canvasResolutionScaleMode: GROWABLE_HEAP_I32()[(((fullscreenStrategy) + (4)) >> 2)],
    filteringMode: GROWABLE_HEAP_I32()[(((fullscreenStrategy) + (8)) >> 2)],
    deferUntilInEventHandler,
    canvasResizedCallbackTargetThread: GROWABLE_HEAP_I32()[(((fullscreenStrategy) + (20)) >> 2)],
    canvasResizedCallback: GROWABLE_HEAP_I32()[(((fullscreenStrategy) + (12)) >> 2)],
    canvasResizedCallbackUserData: GROWABLE_HEAP_I32()[(((fullscreenStrategy) + (16)) >> 2)]
  };
  return doRequestFullscreen(target, strategy);
}

function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(39, 0, 1, target, deferUntilInEventHandler);
  target = findEventTarget(target);
  if (!target) return -4;
  if (!target.requestPointerLock) {
    return -1;
  }
  // Queue this function call if we're not currently in an event handler and
  // the user saw it appropriate to do so.
  if (!JSEvents.canPerformEventHandlerRequests()) {
    if (deferUntilInEventHandler) {
      JSEvents.deferCall(requestPointerLock, 2, [ target ]);
      return 1;
    }
    return -2;
  }
  return requestPointerLock(target);
}

var getHeapMax = () => // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
// full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
// for any code that deals with heap sizes, which would require special
// casing all heap size related code to treat 0 specially.
2147483648;

var alignMemory = (size, alignment) => {
  assert(alignment, "alignment argument is required");
  return Math.ceil(size / alignment) * alignment;
};

var growMemory = size => {
  var b = wasmMemory.buffer;
  var pages = ((size - b.byteLength + 65535) / 65536) | 0;
  try {
    // round size grow request up to wasm page size (fixed 64KB per spec)
    wasmMemory.grow(pages);
    // .grow() takes a delta compared to the previous size
    updateMemoryViews();
    return 1;
  } catch (e) {
    err(`growMemory: Attempted to grow heap from ${b.byteLength} bytes to ${size} bytes, but got error: ${e}`);
  }
};

var _emscripten_resize_heap = requestedSize => {
  var oldSize = GROWABLE_HEAP_U8().length;
  // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
  requestedSize >>>= 0;
  // With multithreaded builds, races can happen (another thread might increase the size
  // in between), so return a failure, and let the caller retry.
  if (requestedSize <= oldSize) {
    return false;
  }
  // Memory resize rules:
  // 1.  Always increase heap size to at least the requested size, rounded up
  //     to next page multiple.
  // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
  //     geometrically: increase the heap size according to
  //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
  //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
  // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
  //     linearly: increase the heap size by at least
  //     MEMORY_GROWTH_LINEAR_STEP bytes.
  // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
  //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
  // 4.  If we were unable to allocate as much memory, it may be due to
  //     over-eager decision to excessively reserve due to (3) above.
  //     Hence if an allocation fails, cut down on the amount of excess
  //     growth, in an attempt to succeed to perform a smaller allocation.
  // A limit is set for how much we can grow. We should not exceed that
  // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
  var maxHeapSize = getHeapMax();
  if (requestedSize > maxHeapSize) {
    err(`Cannot enlarge memory, requested ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);
    return false;
  }
  // Loop through potential heap size increases. If we attempt a too eager
  // reservation that fails, cut down on the attempted size and reserve a
  // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
  for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
    var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
    // ensure geometric growth
    // but limit overreserving (default to capping at +96MB overgrowth at most)
    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
    var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
    var replacement = growMemory(newSize);
    if (replacement) {
      return true;
    }
  }
  err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);
  return false;
};

/** @suppress {checkTypes} */ function _emscripten_sample_gamepad_data() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(40, 0, 1);
  try {
    if (navigator.getGamepads) return (JSEvents.lastGamepadState = navigator.getGamepads()) ? 0 : -1;
  } catch (e) {
    err(`navigator.getGamepads() exists, but failed to execute with exception ${e}. Disabling Gamepad access.`);
    navigator.getGamepads = null;
  }
  return -1;
}

var registerBeforeUnloadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) => {
  var beforeUnloadEventHandlerFunc = (e = event) => {
    // Note: This is always called on the main browser thread, since it needs synchronously return a value!
    var confirmationMessage = ((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, 0, userData);
    if (confirmationMessage) {
      confirmationMessage = UTF8ToString(confirmationMessage);
    }
    if (confirmationMessage) {
      e.preventDefault();
      e.returnValue = confirmationMessage;
      return confirmationMessage;
    }
  };
  var eventHandler = {
    target: findEventTarget(target),
    eventTypeString,
    callbackfunc,
    handlerFunc: beforeUnloadEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_beforeunload_callback_on_thread(userData, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(41, 0, 1, userData, callbackfunc, targetThread);
  if (typeof onbeforeunload == "undefined") return -1;
  // beforeunload callback can only be registered on the main browser thread, because the page will go away immediately after returning from the handler,
  // and there is no time to start proxying it anywhere.
  if (targetThread !== 1) return -5;
  return registerBeforeUnloadEventCallback(2, userData, true, callbackfunc, 28, "beforeunload");
}

var registerFocusEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.focusEvent ||= _malloc(256);
  var focusEventHandlerFunc = (e = event) => {
    var nodeName = JSEvents.getNodeNameForTarget(e.target);
    var id = e.target.id ? e.target.id : "";
    var focusEvent = targetThread ? _malloc(256) : JSEvents.focusEvent;
    stringToUTF8(nodeName, focusEvent + 0, 128);
    stringToUTF8(id, focusEvent + 128, 128);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, focusEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, focusEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target: findEventTarget(target),
    eventTypeString,
    callbackfunc,
    handlerFunc: focusEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_blur_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(42, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur", targetThread);
}

function _emscripten_set_element_css_size(target, width, height) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(43, 0, 1, target, width, height);
  target = findEventTarget(target);
  if (!target) return -4;
  target.style.width = width + "px";
  target.style.height = height + "px";
  return 0;
}

function _emscripten_set_focus_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(44, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus", targetThread);
}

var fillFullscreenChangeEventData = eventStruct => {
  var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  var isFullscreen = !!fullscreenElement;
  // Assigning a boolean to HEAP32 with expected type coercion.
  /** @suppress{checkTypes} */ GROWABLE_HEAP_I8()[eventStruct] = isFullscreen;
  GROWABLE_HEAP_I8()[(eventStruct) + (1)] = JSEvents.fullscreenEnabled();
  // If transitioning to fullscreen, report info about the element that is now fullscreen.
  // If transitioning to windowed mode, report info about the element that just was fullscreen.
  var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
  var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
  var id = reportedElement?.id || "";
  stringToUTF8(nodeName, eventStruct + 2, 128);
  stringToUTF8(id, eventStruct + 130, 128);
  GROWABLE_HEAP_I32()[(((eventStruct) + (260)) >> 2)] = reportedElement ? reportedElement.clientWidth : 0;
  GROWABLE_HEAP_I32()[(((eventStruct) + (264)) >> 2)] = reportedElement ? reportedElement.clientHeight : 0;
  GROWABLE_HEAP_I32()[(((eventStruct) + (268)) >> 2)] = screen.width;
  GROWABLE_HEAP_I32()[(((eventStruct) + (272)) >> 2)] = screen.height;
  if (isFullscreen) {
    JSEvents.previousFullscreenElement = fullscreenElement;
  }
};

var registerFullscreenChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.fullscreenChangeEvent ||= _malloc(276);
  var fullscreenChangeEventhandlerFunc = (e = event) => {
    var fullscreenChangeEvent = targetThread ? _malloc(276) : JSEvents.fullscreenChangeEvent;
    fillFullscreenChangeEventData(fullscreenChangeEvent);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, fullscreenChangeEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    eventTypeString,
    callbackfunc,
    handlerFunc: fullscreenChangeEventhandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(45, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  if (!JSEvents.fullscreenEnabled()) return -1;
  target = findEventTarget(target);
  if (!target) return -4;
  // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
  // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
  registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  return registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
}

var registerGamepadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.gamepadEvent ||= _malloc(1240);
  var gamepadEventHandlerFunc = (e = event) => {
    var gamepadEvent = targetThread ? _malloc(1240) : JSEvents.gamepadEvent;
    fillGamepadEventData(gamepadEvent, e["gamepad"]);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, gamepadEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, gamepadEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target: findEventTarget(target),
    allowsDeferredCalls: true,
    eventTypeString,
    callbackfunc,
    handlerFunc: gamepadEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(46, 0, 1, userData, useCapture, callbackfunc, targetThread);
  if (_emscripten_sample_gamepad_data()) return -1;
  return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
}

function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(47, 0, 1, userData, useCapture, callbackfunc, targetThread);
  if (_emscripten_sample_gamepad_data()) return -1;
  return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
}

var registerKeyEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.keyEvent ||= _malloc(160);
  var keyEventHandlerFunc = e => {
    assert(e);
    var keyEventData = targetThread ? _malloc(160) : JSEvents.keyEvent;
    // This allocated block is passed as satellite data to the proxied function call, so the call frees up the data block when done.
    GROWABLE_HEAP_F64()[((keyEventData) >> 3)] = e.timeStamp;
    var idx = ((keyEventData) >> 2);
    GROWABLE_HEAP_I32()[idx + 2] = e.location;
    GROWABLE_HEAP_I8()[keyEventData + 12] = e.ctrlKey;
    GROWABLE_HEAP_I8()[keyEventData + 13] = e.shiftKey;
    GROWABLE_HEAP_I8()[keyEventData + 14] = e.altKey;
    GROWABLE_HEAP_I8()[keyEventData + 15] = e.metaKey;
    GROWABLE_HEAP_I8()[keyEventData + 16] = e.repeat;
    GROWABLE_HEAP_I32()[idx + 5] = e.charCode;
    GROWABLE_HEAP_I32()[idx + 6] = e.keyCode;
    GROWABLE_HEAP_I32()[idx + 7] = e.which;
    stringToUTF8(e.key || "", keyEventData + 32, 32);
    stringToUTF8(e.code || "", keyEventData + 64, 32);
    stringToUTF8(e.char || "", keyEventData + 96, 32);
    stringToUTF8(e.locale || "", keyEventData + 128, 32);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, keyEventData, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, keyEventData, userData)) e.preventDefault();
  };
  var eventHandler = {
    target: findEventTarget(target),
    eventTypeString,
    callbackfunc,
    handlerFunc: keyEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_keydown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(48, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);
}

function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(49, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
}

function _emscripten_set_keyup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(50, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);
}

var _emscripten_set_main_loop_arg = (func, arg, fps, simulateInfiniteLoop) => {
  var iterFunc = () => (a1 => dynCall_vi(func, a1))(arg);
  setMainLoop(iterFunc, fps, simulateInfiniteLoop, arg);
};

var fillMouseEventData = (eventStruct, e, target) => {
  assert(eventStruct % 4 == 0);
  GROWABLE_HEAP_F64()[((eventStruct) >> 3)] = e.timeStamp;
  var idx = ((eventStruct) >> 2);
  GROWABLE_HEAP_I32()[idx + 2] = e.screenX;
  GROWABLE_HEAP_I32()[idx + 3] = e.screenY;
  GROWABLE_HEAP_I32()[idx + 4] = e.clientX;
  GROWABLE_HEAP_I32()[idx + 5] = e.clientY;
  GROWABLE_HEAP_I8()[eventStruct + 24] = e.ctrlKey;
  GROWABLE_HEAP_I8()[eventStruct + 25] = e.shiftKey;
  GROWABLE_HEAP_I8()[eventStruct + 26] = e.altKey;
  GROWABLE_HEAP_I8()[eventStruct + 27] = e.metaKey;
  GROWABLE_HEAP_I16()[idx * 2 + 14] = e.button;
  GROWABLE_HEAP_I16()[idx * 2 + 15] = e.buttons;
  GROWABLE_HEAP_I32()[idx + 8] = e["movementX"];
  GROWABLE_HEAP_I32()[idx + 9] = e["movementY"];
  // Note: rect contains doubles (truncated to placate SAFE_HEAP, which is the same behaviour when writing to HEAP32 anyway)
  var rect = getBoundingClientRect(target);
  GROWABLE_HEAP_I32()[idx + 10] = e.clientX - (rect.left | 0);
  GROWABLE_HEAP_I32()[idx + 11] = e.clientY - (rect.top | 0);
};

var registerMouseEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.mouseEvent ||= _malloc(64);
  target = findEventTarget(target);
  var mouseEventHandlerFunc = (e = event) => {
    // TODO: Make this access thread safe, or this could update live while app is reading it.
    fillMouseEventData(JSEvents.mouseEvent, e, target);
    if (targetThread) {
      var mouseEventData = _malloc(64);
      // This allocated block is passed as satellite data to the proxied function call, so the call frees up the data block when done.
      fillMouseEventData(mouseEventData, e, target);
      __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, mouseEventData, userData);
    } else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
    // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
    eventTypeString,
    callbackfunc,
    handlerFunc: mouseEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_mousedown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(51, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);
}

function _emscripten_set_mouseenter_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(52, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);
}

function _emscripten_set_mouseleave_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(53, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);
}

function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(54, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
}

function _emscripten_set_mouseup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(55, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);
}

var fillPointerlockChangeEventData = eventStruct => {
  var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
  var isPointerlocked = !!pointerLockElement;
  // Assigning a boolean to HEAP32 with expected type coercion.
  /** @suppress{checkTypes} */ GROWABLE_HEAP_I8()[eventStruct] = isPointerlocked;
  var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
  var id = pointerLockElement?.id || "";
  stringToUTF8(nodeName, eventStruct + 1, 128);
  stringToUTF8(id, eventStruct + 129, 128);
};

var registerPointerlockChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.pointerlockChangeEvent ||= _malloc(257);
  var pointerlockChangeEventHandlerFunc = (e = event) => {
    var pointerlockChangeEvent = targetThread ? _malloc(257) : JSEvents.pointerlockChangeEvent;
    fillPointerlockChangeEventData(pointerlockChangeEvent);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, pointerlockChangeEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    eventTypeString,
    callbackfunc,
    handlerFunc: pointerlockChangeEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

/** @suppress {missingProperties} */ function _emscripten_set_pointerlockchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(56, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
  if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
    return -1;
  }
  target = findEventTarget(target);
  if (!target) return -4;
  registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
  registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
  registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
  return registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
}

var registerUiEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.uiEvent ||= _malloc(36);
  target = findEventTarget(target);
  var uiEventHandlerFunc = (e = event) => {
    if (e.target != target) {
      // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
      // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
      // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
      // causing a new scroll, etc..
      return;
    }
    var b = document.body;
    // Take document.body to a variable, Closure compiler does not outline access to it on its own.
    if (!b) {
      // During a page unload 'body' can be null, with "Cannot read property 'clientWidth' of null" being thrown
      return;
    }
    var uiEvent = targetThread ? _malloc(36) : JSEvents.uiEvent;
    GROWABLE_HEAP_I32()[((uiEvent) >> 2)] = 0;
    // always zero for resize and scroll
    GROWABLE_HEAP_I32()[(((uiEvent) + (4)) >> 2)] = b.clientWidth;
    GROWABLE_HEAP_I32()[(((uiEvent) + (8)) >> 2)] = b.clientHeight;
    GROWABLE_HEAP_I32()[(((uiEvent) + (12)) >> 2)] = innerWidth;
    GROWABLE_HEAP_I32()[(((uiEvent) + (16)) >> 2)] = innerHeight;
    GROWABLE_HEAP_I32()[(((uiEvent) + (20)) >> 2)] = outerWidth;
    GROWABLE_HEAP_I32()[(((uiEvent) + (24)) >> 2)] = outerHeight;
    GROWABLE_HEAP_I32()[(((uiEvent) + (28)) >> 2)] = pageXOffset | 0;
    // scroll offsets are float
    GROWABLE_HEAP_I32()[(((uiEvent) + (32)) >> 2)] = pageYOffset | 0;
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, uiEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, uiEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    eventTypeString,
    callbackfunc,
    handlerFunc: uiEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(57, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
}

var registerTouchEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.touchEvent ||= _malloc(1552);
  target = findEventTarget(target);
  var touchEventHandlerFunc = e => {
    assert(e);
    var t, touches = {}, et = e.touches;
    // To ease marshalling different kinds of touches that browser reports (all touches are listed in e.touches,
    // only changed touches in e.changedTouches, and touches on target at a.targetTouches), mark a boolean in
    // each Touch object so that we can later loop only once over all touches we see to marshall over to Wasm.
    for (let t of et) {
      // Browser might recycle the generated Touch objects between each frame (Firefox on Android), so reset any
      // changed/target states we may have set from previous frame.
      t.isChanged = t.onTarget = 0;
      touches[t.identifier] = t;
    }
    // Mark which touches are part of the changedTouches list.
    for (let t of e.changedTouches) {
      t.isChanged = 1;
      touches[t.identifier] = t;
    }
    // Mark which touches are part of the targetTouches list.
    for (let t of e.targetTouches) {
      touches[t.identifier].onTarget = 1;
    }
    var touchEvent = targetThread ? _malloc(1552) : JSEvents.touchEvent;
    GROWABLE_HEAP_F64()[((touchEvent) >> 3)] = e.timeStamp;
    GROWABLE_HEAP_I8()[touchEvent + 12] = e.ctrlKey;
    GROWABLE_HEAP_I8()[touchEvent + 13] = e.shiftKey;
    GROWABLE_HEAP_I8()[touchEvent + 14] = e.altKey;
    GROWABLE_HEAP_I8()[touchEvent + 15] = e.metaKey;
    var idx = touchEvent + 16;
    var targetRect = getBoundingClientRect(target);
    var numTouches = 0;
    for (let t of Object.values(touches)) {
      var idx32 = ((idx) >> 2);
      // Pre-shift the ptr to index to HEAP32 to save code size
      GROWABLE_HEAP_I32()[idx32 + 0] = t.identifier;
      GROWABLE_HEAP_I32()[idx32 + 1] = t.screenX;
      GROWABLE_HEAP_I32()[idx32 + 2] = t.screenY;
      GROWABLE_HEAP_I32()[idx32 + 3] = t.clientX;
      GROWABLE_HEAP_I32()[idx32 + 4] = t.clientY;
      GROWABLE_HEAP_I32()[idx32 + 5] = t.pageX;
      GROWABLE_HEAP_I32()[idx32 + 6] = t.pageY;
      GROWABLE_HEAP_I8()[idx + 28] = t.isChanged;
      GROWABLE_HEAP_I8()[idx + 29] = t.onTarget;
      GROWABLE_HEAP_I32()[idx32 + 8] = t.clientX - (targetRect.left | 0);
      GROWABLE_HEAP_I32()[idx32 + 9] = t.clientY - (targetRect.top | 0);
      idx += 48;
      if (++numTouches > 31) {
        break;
      }
    }
    GROWABLE_HEAP_I32()[(((touchEvent) + (8)) >> 2)] = numTouches;
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, touchEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, touchEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    allowsDeferredCalls: eventTypeString == "touchstart" || eventTypeString == "touchend",
    eventTypeString,
    callbackfunc,
    handlerFunc: touchEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(58, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
}

function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(59, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
}

function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(60, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
}

function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(61, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
}

var fillVisibilityChangeEventData = eventStruct => {
  var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
  var visibilityState = visibilityStates.indexOf(document.visibilityState);
  // Assigning a boolean to HEAP32 with expected type coercion.
  /** @suppress{checkTypes} */ GROWABLE_HEAP_I8()[eventStruct] = document.hidden;
  GROWABLE_HEAP_I32()[(((eventStruct) + (4)) >> 2)] = visibilityState;
};

var registerVisibilityChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.visibilityChangeEvent ||= _malloc(8);
  var visibilityChangeEventHandlerFunc = (e = event) => {
    var visibilityChangeEvent = targetThread ? _malloc(8) : JSEvents.visibilityChangeEvent;
    fillVisibilityChangeEventData(visibilityChangeEvent);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, visibilityChangeEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, visibilityChangeEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    eventTypeString,
    callbackfunc,
    handlerFunc: visibilityChangeEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_visibilitychange_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(62, 0, 1, userData, useCapture, callbackfunc, targetThread);
  if (!specialHTMLTargets[1]) {
    return -4;
  }
  return registerVisibilityChangeEventCallback(specialHTMLTargets[1], userData, useCapture, callbackfunc, 21, "visibilitychange", targetThread);
}

var registerWheelEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.wheelEvent ||= _malloc(96);
  // The DOM Level 3 events spec event 'wheel'
  var wheelHandlerFunc = (e = event) => {
    var wheelEvent = targetThread ? _malloc(96) : JSEvents.wheelEvent;
    // This allocated block is passed as satellite data to the proxied function call, so the call frees up the data block when done.
    fillMouseEventData(wheelEvent, e, target);
    GROWABLE_HEAP_F64()[(((wheelEvent) + (64)) >> 3)] = e["deltaX"];
    GROWABLE_HEAP_F64()[(((wheelEvent) + (72)) >> 3)] = e["deltaY"];
    GROWABLE_HEAP_F64()[(((wheelEvent) + (80)) >> 3)] = e["deltaZ"];
    GROWABLE_HEAP_I32()[(((wheelEvent) + (88)) >> 2)] = e["deltaMode"];
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, wheelEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, wheelEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    allowsDeferredCalls: true,
    eventTypeString,
    callbackfunc,
    handlerFunc: wheelHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_wheel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(63, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  target = findEventTarget(target);
  if (!target) return -4;
  if (typeof target.onwheel != "undefined") {
    return registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
  } else {
    return -1;
  }
}

function _emscripten_set_window_title(title) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(64, 0, 1, title);
  return document.title = UTF8ToString(title);
}

var _emscripten_sleep = ms => Asyncify.handleSleep(wakeUp => safeSetTimeout(wakeUp, ms));

_emscripten_sleep.isAsync = true;

var ENV = {};

var getExecutableName = () => thisProgram || "./this.program";

var getEnvStrings = () => {
  if (!getEnvStrings.strings) {
    // Default values.
    // Browser language detection #8751
    var lang = ((typeof navigator == "object" && navigator.languages && navigator.languages[0]) || "C").replace("-", "_") + ".UTF-8";
    var env = {
      "USER": "web_user",
      "LOGNAME": "web_user",
      "PATH": "/",
      "PWD": "/",
      "HOME": "/home/web_user",
      "LANG": lang,
      "_": getExecutableName()
    };
    // Apply the user-provided values, if any.
    for (var x in ENV) {
      // x is a key in ENV; if ENV[x] is undefined, that means it was
      // explicitly set to be so. We allow user code to do that to
      // force variables with default values to remain unset.
      if (ENV[x] === undefined) delete env[x]; else env[x] = ENV[x];
    }
    var strings = [];
    for (var x in env) {
      strings.push(`${x}=${env[x]}`);
    }
    getEnvStrings.strings = strings;
  }
  return getEnvStrings.strings;
};

var stringToAscii = (str, buffer) => {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));
    GROWABLE_HEAP_I8()[buffer++] = str.charCodeAt(i);
  }
  // Null-terminate the string
  GROWABLE_HEAP_I8()[buffer] = 0;
};

var _environ_get = function(__environ, environ_buf) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(65, 0, 1, __environ, environ_buf);
  var bufSize = 0;
  getEnvStrings().forEach((string, i) => {
    var ptr = environ_buf + bufSize;
    GROWABLE_HEAP_U32()[(((__environ) + (i * 4)) >> 2)] = ptr;
    stringToAscii(string, ptr);
    bufSize += string.length + 1;
  });
  return 0;
};

var _environ_sizes_get = function(penviron_count, penviron_buf_size) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(66, 0, 1, penviron_count, penviron_buf_size);
  var strings = getEnvStrings();
  GROWABLE_HEAP_U32()[((penviron_count) >> 2)] = strings.length;
  var bufSize = 0;
  strings.forEach(string => bufSize += string.length + 1);
  GROWABLE_HEAP_U32()[((penviron_buf_size) >> 2)] = bufSize;
  return 0;
};

function _fd_close(fd) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(67, 0, 1, fd);
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    FS.close(stream);
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

/** @param {number=} offset */ var doReadv = (stream, iov, iovcnt, offset) => {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
    var ptr = GROWABLE_HEAP_U32()[((iov) >> 2)];
    var len = GROWABLE_HEAP_U32()[(((iov) + (4)) >> 2)];
    iov += 8;
    var curr = FS.read(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
    if (curr < 0) return -1;
    ret += curr;
    if (curr < len) break;
    // nothing more to read
    if (typeof offset != "undefined") {
      offset += curr;
    }
  }
  return ret;
};

function _fd_read(fd, iov, iovcnt, pnum) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(68, 0, 1, fd, iov, iovcnt, pnum);
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = doReadv(stream, iov, iovcnt);
    GROWABLE_HEAP_U32()[((pnum) >> 2)] = num;
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

function _fd_seek(fd, offset, whence, newOffset) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(69, 0, 1, fd, offset, whence, newOffset);
  offset = bigintToI53Checked(offset);
  try {
    if (isNaN(offset)) return 61;
    var stream = SYSCALLS.getStreamFromFD(fd);
    FS.llseek(stream, offset, whence);
    HEAP64[((newOffset) >> 3)] = BigInt(stream.position);
    if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
    // reset readdir state
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

/** @param {number=} offset */ var doWritev = (stream, iov, iovcnt, offset) => {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
    var ptr = GROWABLE_HEAP_U32()[((iov) >> 2)];
    var len = GROWABLE_HEAP_U32()[(((iov) + (4)) >> 2)];
    iov += 8;
    var curr = FS.write(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
    if (curr < 0) return -1;
    ret += curr;
    if (curr < len) {
      // No more space to write.
      break;
    }
    if (typeof offset != "undefined") {
      offset += curr;
    }
  }
  return ret;
};

function _fd_write(fd, iov, iovcnt, pnum) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(70, 0, 1, fd, iov, iovcnt, pnum);
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = doWritev(stream, iov, iovcnt);
    GROWABLE_HEAP_U32()[((pnum) >> 2)] = num;
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

var listenOnce = (object, event, func) => object.addEventListener(event, func, {
  "once": true
});

/** @param {Object=} elements */ var autoResumeAudioContext = (ctx, elements) => {
  if (!elements) {
    elements = [ document, document.getElementById("canvas") ];
  }
  [ "keydown", "mousedown", "touchstart" ].forEach(event => {
    elements.forEach(element => {
      if (element) {
        listenOnce(element, event, () => {
          if (ctx.state === "suspended") ctx.resume();
        });
      }
    });
  });
};

var dynCallLegacy = (sig, ptr, args) => {
  sig = sig.replace(/p/g, "i");
  assert(("dynCall_" + sig) in Module, `bad function pointer type - dynCall function not found for sig '${sig}'`);
  if (args?.length) {
    // j (64-bit integer) is fine, and is implemented as a BigInt. Without
    // legalization, the number of parameters should match (j is not expanded
    // into two i's).
    assert(args.length === sig.length - 1);
  } else {
    assert(sig.length == 1);
  }
  var f = Module["dynCall_" + sig];
  return f(ptr, ...args);
};

var dynCall = (sig, ptr, args = [], promising = false) => {
  assert(!promising, "async dynCall is not supported in this mode");
  var rtn = dynCallLegacy(sig, ptr, args);
  return rtn;
};

var runAndAbortIfError = func => {
  try {
    return func();
  } catch (e) {
    abort(e);
  }
};

var sigToWasmTypes = sig => {
  var typeNames = {
    "i": "i32",
    "j": "i64",
    "f": "f32",
    "d": "f64",
    "e": "externref",
    "p": "i32"
  };
  var type = {
    parameters: [],
    results: sig[0] == "v" ? [] : [ typeNames[sig[0]] ]
  };
  for (var i = 1; i < sig.length; ++i) {
    assert(sig[i] in typeNames, "invalid signature char: " + sig[i]);
    type.parameters.push(typeNames[sig[i]]);
  }
  return type;
};

var Asyncify = {
  instrumentWasmImports(imports) {
    var importPattern = /^(invoke_.*|__asyncjs__.*)$/;
    for (let [x, original] of Object.entries(imports)) {
      if (typeof original == "function") {
        let isAsyncifyImport = original.isAsync || importPattern.test(x);
        imports[x] = (...args) => {
          var originalAsyncifyState = Asyncify.state;
          try {
            return original(...args);
          } finally {
            // Only asyncify-declared imports are allowed to change the
            // state.
            // Changing the state from normal to disabled is allowed (in any
            // function) as that is what shutdown does (and we don't have an
            // explicit list of shutdown imports).
            var changedToDisabled = originalAsyncifyState === Asyncify.State.Normal && Asyncify.state === Asyncify.State.Disabled;
            // invoke_* functions are allowed to change the state if we do
            // not ignore indirect calls.
            var ignoredInvoke = x.startsWith("invoke_") && true;
            if (Asyncify.state !== originalAsyncifyState && !isAsyncifyImport && !changedToDisabled && !ignoredInvoke) {
              throw new Error(`import ${x} was not in ASYNCIFY_IMPORTS, but changed the state`);
            }
          }
        };
      }
    }
  },
  instrumentWasmExports(exports) {
    var ret = {};
    for (let [x, original] of Object.entries(exports)) {
      if (typeof original == "function") {
        ret[x] = (...args) => {
          Asyncify.exportCallStack.push(x);
          try {
            return original(...args);
          } finally {
            if (!ABORT) {
              var y = Asyncify.exportCallStack.pop();
              assert(y === x);
              Asyncify.maybeStopUnwind();
            }
          }
        };
      } else {
        ret[x] = original;
      }
    }
    return ret;
  },
  State: {
    Normal: 0,
    Unwinding: 1,
    Rewinding: 2,
    Disabled: 3
  },
  state: 0,
  StackSize: 4096,
  currData: null,
  handleSleepReturnValue: 0,
  exportCallStack: [],
  callStackNameToId: {},
  callStackIdToName: {},
  callStackId: 0,
  asyncPromiseHandlers: null,
  sleepCallbacks: [],
  getCallStackId(funcName) {
    var id = Asyncify.callStackNameToId[funcName];
    if (id === undefined) {
      id = Asyncify.callStackId++;
      Asyncify.callStackNameToId[funcName] = id;
      Asyncify.callStackIdToName[id] = funcName;
    }
    return id;
  },
  maybeStopUnwind() {
    if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
      // We just finished unwinding.
      // Be sure to set the state before calling any other functions to avoid
      // possible infinite recursion here (For example in debug pthread builds
      // the dbg() function itself can call back into WebAssembly to get the
      // current pthread_self() pointer).
      Asyncify.state = Asyncify.State.Normal;
      runtimeKeepalivePush();
      // Keep the runtime alive so that a re-wind can be done later.
      runAndAbortIfError(_asyncify_stop_unwind);
      if (typeof Fibers != "undefined") {
        Fibers.trampoline();
      }
    }
  },
  whenDone() {
    assert(Asyncify.currData, "Tried to wait for an async operation when none is in progress.");
    assert(!Asyncify.asyncPromiseHandlers, "Cannot have multiple async operations in flight at once");
    return new Promise((resolve, reject) => {
      Asyncify.asyncPromiseHandlers = {
        resolve,
        reject
      };
    });
  },
  allocateData() {
    // An asyncify data structure has three fields:
    //  0  current stack pos
    //  4  max stack pos
    //  8  id of function at bottom of the call stack (callStackIdToName[id] == name of js function)
    // The Asyncify ABI only interprets the first two fields, the rest is for the runtime.
    // We also embed a stack in the same memory region here, right next to the structure.
    // This struct is also defined as asyncify_data_t in emscripten/fiber.h
    var ptr = _malloc(12 + Asyncify.StackSize);
    Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
    Asyncify.setDataRewindFunc(ptr);
    return ptr;
  },
  setDataHeader(ptr, stack, stackSize) {
    GROWABLE_HEAP_U32()[((ptr) >> 2)] = stack;
    GROWABLE_HEAP_U32()[(((ptr) + (4)) >> 2)] = stack + stackSize;
  },
  setDataRewindFunc(ptr) {
    var bottomOfCallStack = Asyncify.exportCallStack[0];
    var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
    GROWABLE_HEAP_I32()[(((ptr) + (8)) >> 2)] = rewindId;
  },
  getDataRewindFuncName(ptr) {
    var id = GROWABLE_HEAP_I32()[(((ptr) + (8)) >> 2)];
    var name = Asyncify.callStackIdToName[id];
    return name;
  },
  getDataRewindFunc(name) {
    var func = wasmExports[name];
    return func;
  },
  doRewind(ptr) {
    var name = Asyncify.getDataRewindFuncName(ptr);
    var func = Asyncify.getDataRewindFunc(name);
    // Once we have rewound and the stack we no longer need to artificially
    // keep the runtime alive.
    runtimeKeepalivePop();
    return func();
  },
  handleSleep(startAsync) {
    assert(Asyncify.state !== Asyncify.State.Disabled, "Asyncify cannot be done during or after the runtime exits");
    if (ABORT) return;
    if (Asyncify.state === Asyncify.State.Normal) {
      // Prepare to sleep. Call startAsync, and see what happens:
      // if the code decided to call our callback synchronously,
      // then no async operation was in fact begun, and we don't
      // need to do anything.
      var reachedCallback = false;
      var reachedAfterCallback = false;
      startAsync((handleSleepReturnValue = 0) => {
        assert(!handleSleepReturnValue || typeof handleSleepReturnValue == "number" || typeof handleSleepReturnValue == "boolean");
        // old emterpretify API supported other stuff
        if (ABORT) return;
        Asyncify.handleSleepReturnValue = handleSleepReturnValue;
        reachedCallback = true;
        if (!reachedAfterCallback) {
          // We are happening synchronously, so no need for async.
          return;
        }
        // This async operation did not happen synchronously, so we did
        // unwind. In that case there can be no compiled code on the stack,
        // as it might break later operations (we can rewind ok now, but if
        // we unwind again, we would unwind through the extra compiled code
        // too).
        assert(!Asyncify.exportCallStack.length, "Waking up (starting to rewind) must be done from JS, without compiled code on the stack.");
        Asyncify.state = Asyncify.State.Rewinding;
        runAndAbortIfError(() => _asyncify_start_rewind(Asyncify.currData));
        if (typeof MainLoop != "undefined" && MainLoop.func) {
          MainLoop.resume();
        }
        var asyncWasmReturnValue, isError = false;
        try {
          asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
        } catch (err) {
          asyncWasmReturnValue = err;
          isError = true;
        }
        // Track whether the return value was handled by any promise handlers.
        var handled = false;
        if (!Asyncify.currData) {
          // All asynchronous execution has finished.
          // `asyncWasmReturnValue` now contains the final
          // return value of the exported async WASM function.
          // Note: `asyncWasmReturnValue` is distinct from
          // `Asyncify.handleSleepReturnValue`.
          // `Asyncify.handleSleepReturnValue` contains the return
          // value of the last C function to have executed
          // `Asyncify.handleSleep()`, where as `asyncWasmReturnValue`
          // contains the return value of the exported WASM function
          // that may have called C functions that
          // call `Asyncify.handleSleep()`.
          var asyncPromiseHandlers = Asyncify.asyncPromiseHandlers;
          if (asyncPromiseHandlers) {
            Asyncify.asyncPromiseHandlers = null;
            (isError ? asyncPromiseHandlers.reject : asyncPromiseHandlers.resolve)(asyncWasmReturnValue);
            handled = true;
          }
        }
        if (isError && !handled) {
          // If there was an error and it was not handled by now, we have no choice but to
          // rethrow that error into the global scope where it can be caught only by
          // `onerror` or `onunhandledpromiserejection`.
          throw asyncWasmReturnValue;
        }
      });
      reachedAfterCallback = true;
      if (!reachedCallback) {
        // A true async operation was begun; start a sleep.
        Asyncify.state = Asyncify.State.Unwinding;
        // TODO: reuse, don't alloc/free every sleep
        Asyncify.currData = Asyncify.allocateData();
        if (typeof MainLoop != "undefined" && MainLoop.func) {
          MainLoop.pause();
        }
        runAndAbortIfError(() => _asyncify_start_unwind(Asyncify.currData));
      }
    } else if (Asyncify.state === Asyncify.State.Rewinding) {
      // Stop a resume.
      Asyncify.state = Asyncify.State.Normal;
      runAndAbortIfError(_asyncify_stop_rewind);
      _free(Asyncify.currData);
      Asyncify.currData = null;
      // Call all sleep callbacks now that the sleep-resume is all done.
      Asyncify.sleepCallbacks.forEach(callUserCallback);
    } else {
      abort(`invalid state: ${Asyncify.state}`);
    }
    return Asyncify.handleSleepReturnValue;
  },
  handleAsync(startAsync) {
    return Asyncify.handleSleep(wakeUp => {
      // TODO: add error handling as a second param when handleSleep implements it.
      startAsync().then(wakeUp);
    });
  }
};

var getCFunc = ident => {
  var func = Module["_" + ident];
  // closure exported function
  assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
  return func;
};

var writeArrayToMemory = (array, buffer) => {
  assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
  GROWABLE_HEAP_I8().set(array, buffer);
};

/**
     * @param {string|null=} returnType
     * @param {Array=} argTypes
     * @param {Arguments|Array=} args
     * @param {Object=} opts
     */ var ccall = (ident, returnType, argTypes, args, opts) => {
  // For fast lookup of conversion functions
  var toC = {
    "string": str => {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) {
        // null string
        ret = stringToUTF8OnStack(str);
      }
      return ret;
    },
    "array": arr => {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };
  function convertReturnValue(ret) {
    if (returnType === "string") {
      return UTF8ToString(ret);
    }
    if (returnType === "boolean") return Boolean(ret);
    return ret;
  }
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== "array", 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  // Data for a previous async operation that was in flight before us.
  var previousAsync = Asyncify.currData;
  var ret = func(...cArgs);
  function onDone(ret) {
    runtimeKeepalivePop();
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }
  var asyncMode = opts?.async;
  // Keep the runtime alive through all calls. Note that this call might not be
  // async, but for simplicity we push and pop in all calls.
  runtimeKeepalivePush();
  if (Asyncify.currData != previousAsync) {
    // A change in async operation happened. If there was already an async
    // operation in flight before us, that is an error: we should not start
    // another async operation while one is active, and we should not stop one
    // either. The only valid combination is to have no change in the async
    // data (so we either had one in flight and left it alone, or we didn't have
    // one), or to have nothing in flight and to start one.
    assert(!(previousAsync && Asyncify.currData), "We cannot start an async operation when one is already flight");
    assert(!(previousAsync && !Asyncify.currData), "We cannot stop an async operation in flight");
    // This is a new async operation. The wasm is paused and has unwound its stack.
    // We need to return a Promise that resolves the return value
    // once the stack is rewound and execution finishes.
    assert(asyncMode, "The call to " + ident + " is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.");
    return Asyncify.whenDone().then(onDone);
  }
  ret = onDone(ret);
  // If this is an async ccall, ensure we return a promise
  if (asyncMode) return Promise.resolve(ret);
  return ret;
};

/**
     * @param {string=} returnType
     * @param {Array=} argTypes
     * @param {Object=} opts
     */ var cwrap = (ident, returnType, argTypes, opts) => (...args) => ccall(ident, returnType, argTypes, args, opts);

var FS_createPath = FS.createPath;

var FS_unlink = path => FS.unlink(path);

var FS_createLazyFile = FS.createLazyFile;

var FS_createDevice = FS.createDevice;

// exports
Module["requestFullscreen"] = Browser.requestFullscreen;

Module["requestFullScreen"] = Browser.requestFullScreen;

Module["setCanvasSize"] = Browser.setCanvasSize;

Module["getUserMedia"] = Browser.getUserMedia;

Module["createContext"] = Browser.createContext;

PThread.init();

FS.createPreloadedFile = FS_createPreloadedFile;

FS.staticInit();

// Set module methods based on EXPORTED_RUNTIME_METHODS
Module["FS_createPath"] = FS.createPath;

Module["FS_createDataFile"] = FS.createDataFile;

Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

Module["FS_unlink"] = FS.unlink;

Module["FS_createLazyFile"] = FS.createLazyFile;

Module["FS_createDevice"] = FS.createDevice;

Module["requestAnimationFrame"] = MainLoop.requestAnimationFrame;

Module["pauseMainLoop"] = MainLoop.pause;

Module["resumeMainLoop"] = MainLoop.resume;

MainLoop.init();

for (let i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));

var miniTempWebGLFloatBuffersStorage = new Float32Array(288);

// Create GL_POOL_TEMP_BUFFERS_SIZE+1 temporary buffers, for uploads of size 0 through GL_POOL_TEMP_BUFFERS_SIZE inclusive
for (/**@suppress{duplicate}*/ var i = 0; i <= 288; ++i) {
  miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i);
}

var miniTempWebGLIntBuffersStorage = new Int32Array(288);

// Create GL_POOL_TEMP_BUFFERS_SIZE+1 temporary buffers, for uploads of size 0 through GL_POOL_TEMP_BUFFERS_SIZE inclusive
for (/**@suppress{duplicate}*/ var i = 0; i <= 288; ++i) {
  miniTempWebGLIntBuffers[i] = miniTempWebGLIntBuffersStorage.subarray(0, i);
}

// End JS library code
// proxiedFunctionTable specifies the list of functions that can be called
// either synchronously or asynchronously from other threads in postMessage()d
// or internally queued events. This way a pthread in a Worker can synchronously
// access e.g. the DOM on the main thread.
var proxiedFunctionTable = [ _proc_exit, exitOnMainThread, pthreadCreateProxied, ___syscall__newselect, ___syscall_fcntl64, ___syscall_fstat64, ___syscall_ioctl, ___syscall_lstat64, ___syscall_newfstatat, ___syscall_openat, ___syscall_stat64, _eglBindAPI, _eglChooseConfig, _eglCreateContext, _eglCreateWindowSurface, _eglDestroyContext, _eglDestroySurface, _eglGetConfigAttrib, _eglGetDisplay, _eglGetError, _eglInitialize, _eglMakeCurrent, _eglQueryString, _eglSwapBuffers, _eglSwapInterval, _eglTerminate, _eglWaitClient, _eglWaitNative, _emscripten_exit_fullscreen, getCanvasSizeMainThread, setCanvasElementSizeMainThread, _emscripten_exit_pointerlock, _emscripten_force_exit, _emscripten_get_device_pixel_ratio, _emscripten_get_element_css_size, _emscripten_get_gamepad_status, _emscripten_get_num_gamepads, _emscripten_get_screen_size, _emscripten_request_fullscreen_strategy, _emscripten_request_pointerlock, _emscripten_sample_gamepad_data, _emscripten_set_beforeunload_callback_on_thread, _emscripten_set_blur_callback_on_thread, _emscripten_set_element_css_size, _emscripten_set_focus_callback_on_thread, _emscripten_set_fullscreenchange_callback_on_thread, _emscripten_set_gamepadconnected_callback_on_thread, _emscripten_set_gamepaddisconnected_callback_on_thread, _emscripten_set_keydown_callback_on_thread, _emscripten_set_keypress_callback_on_thread, _emscripten_set_keyup_callback_on_thread, _emscripten_set_mousedown_callback_on_thread, _emscripten_set_mouseenter_callback_on_thread, _emscripten_set_mouseleave_callback_on_thread, _emscripten_set_mousemove_callback_on_thread, _emscripten_set_mouseup_callback_on_thread, _emscripten_set_pointerlockchange_callback_on_thread, _emscripten_set_resize_callback_on_thread, _emscripten_set_touchcancel_callback_on_thread, _emscripten_set_touchend_callback_on_thread, _emscripten_set_touchmove_callback_on_thread, _emscripten_set_touchstart_callback_on_thread, _emscripten_set_visibilitychange_callback_on_thread, _emscripten_set_wheel_callback_on_thread, _emscripten_set_window_title, _environ_get, _environ_sizes_get, _fd_close, _fd_read, _fd_seek, _fd_write ];

function checkIncomingModuleAPI() {
  ignoredModuleProp("fetchSettings");
}

var ASM_CONSTS = {
  421168: () => {
    if (!audioInitialized) {
      initAudioContext();
    }
  },
  421219: () => {
    Module.setGameState(1);
    console.log("GAME HAS BEGUN");
  },
  421274: () => {
    Module.setGameState(1);
    console.log("GAME HAS BEGUN");
  },
  421329: ($0, $1, $2) => {
    const sig = UTF8ToString($2);
    Module.showGameOver($0, $1, sig);
    _free($2);
  },
  421408: $0 => {
    Module.updateScore($0);
  },
  421436: $0 => {
    var str = UTF8ToString($0) + "\n\n" + "Abort/Retry/Ignore/AlwaysIgnore? [ariA] :";
    var reply = window.prompt(str, "i");
    if (reply === null) {
      reply = "i";
    }
    return allocate(intArrayFromString(reply), "i8", ALLOC_NORMAL);
  },
  421661: () => {
    if (typeof (AudioContext) !== "undefined") {
      return true;
    } else if (typeof (webkitAudioContext) !== "undefined") {
      return true;
    }
    return false;
  },
  421808: () => {
    if ((typeof (navigator.mediaDevices) !== "undefined") && (typeof (navigator.mediaDevices.getUserMedia) !== "undefined")) {
      return true;
    } else if (typeof (navigator.webkitGetUserMedia) !== "undefined") {
      return true;
    }
    return false;
  },
  422042: $0 => {
    if (typeof (Module["SDL2"]) === "undefined") {
      Module["SDL2"] = {};
    }
    var SDL2 = Module["SDL2"];
    if (!$0) {
      SDL2.audio = {};
    } else {
      SDL2.capture = {};
    }
    if (!SDL2.audioContext) {
      if (typeof (AudioContext) !== "undefined") {
        SDL2.audioContext = new AudioContext;
      } else if (typeof (webkitAudioContext) !== "undefined") {
        SDL2.audioContext = new webkitAudioContext;
      }
      if (SDL2.audioContext) {
        if ((typeof navigator.userActivation) === "undefined") {
          autoResumeAudioContext(SDL2.audioContext);
        }
      }
    }
    return SDL2.audioContext === undefined ? -1 : 0;
  },
  422594: () => {
    var SDL2 = Module["SDL2"];
    return SDL2.audioContext.sampleRate;
  },
  422662: ($0, $1, $2, $3) => {
    var SDL2 = Module["SDL2"];
    var have_microphone = function(stream) {
      if (SDL2.capture.silenceTimer !== undefined) {
        clearInterval(SDL2.capture.silenceTimer);
        SDL2.capture.silenceTimer = undefined;
        SDL2.capture.silenceBuffer = undefined;
      }
      SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream);
      SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1);
      SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {
        if ((SDL2 === undefined) || (SDL2.capture === undefined)) {
          return;
        }
        audioProcessingEvent.outputBuffer.getChannelData(0).fill(0);
        SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer;
        dynCall("vi", $2, [ $3 ]);
      };
      SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode);
      SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination);
      SDL2.capture.stream = stream;
    };
    var no_microphone = function(error) {};
    SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate);
    SDL2.capture.silenceBuffer.getChannelData(0).fill(0);
    var silence_callback = function() {
      SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer;
      dynCall("vi", $2, [ $3 ]);
    };
    SDL2.capture.silenceTimer = setInterval(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1e3);
    if ((navigator.mediaDevices !== undefined) && (navigator.mediaDevices.getUserMedia !== undefined)) {
      navigator.mediaDevices.getUserMedia({
        audio: true,
        video: false
      }).then(have_microphone).catch(no_microphone);
    } else if (navigator.webkitGetUserMedia !== undefined) {
      navigator.webkitGetUserMedia({
        audio: true,
        video: false
      }, have_microphone, no_microphone);
    }
  },
  424355: ($0, $1, $2, $3) => {
    var SDL2 = Module["SDL2"];
    SDL2.audio.scriptProcessorNode = SDL2.audioContext["createScriptProcessor"]($1, 0, $0);
    SDL2.audio.scriptProcessorNode["onaudioprocess"] = function(e) {
      if ((SDL2 === undefined) || (SDL2.audio === undefined)) {
        return;
      }
      if (SDL2.audio.silenceTimer !== undefined) {
        clearInterval(SDL2.audio.silenceTimer);
        SDL2.audio.silenceTimer = undefined;
        SDL2.audio.silenceBuffer = undefined;
      }
      SDL2.audio.currentOutputBuffer = e["outputBuffer"];
      dynCall("vi", $2, [ $3 ]);
    };
    SDL2.audio.scriptProcessorNode["connect"](SDL2.audioContext["destination"]);
    if (SDL2.audioContext.state === "suspended") {
      SDL2.audio.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate);
      SDL2.audio.silenceBuffer.getChannelData(0).fill(0);
      var silence_callback = function() {
        if ((typeof navigator.userActivation) !== "undefined") {
          if (navigator.userActivation.hasBeenActive) {
            SDL2.audioContext.resume();
          }
        }
        SDL2.audio.currentOutputBuffer = SDL2.audio.silenceBuffer;
        dynCall("vi", $2, [ $3 ]);
        SDL2.audio.currentOutputBuffer = undefined;
      };
      SDL2.audio.silenceTimer = setInterval(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1e3);
    }
  },
  425530: ($0, $1) => {
    var SDL2 = Module["SDL2"];
    var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels;
    for (var c = 0; c < numChannels; ++c) {
      var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c);
      if (channelData.length != $1) {
        throw "Web Audio capture buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!";
      }
      if (numChannels == 1) {
        for (var j = 0; j < $1; ++j) {
          setValue($0 + (j * 4), channelData[j], "float");
        }
      } else {
        for (var j = 0; j < $1; ++j) {
          setValue($0 + (((j * numChannels) + c) * 4), channelData[j], "float");
        }
      }
    }
  },
  426135: ($0, $1) => {
    var SDL2 = Module["SDL2"];
    var buf = $0 >>> 2;
    var numChannels = SDL2.audio.currentOutputBuffer["numberOfChannels"];
    for (var c = 0; c < numChannels; ++c) {
      var channelData = SDL2.audio.currentOutputBuffer["getChannelData"](c);
      if (channelData.length != $1) {
        throw "Web Audio output buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!";
      }
      for (var j = 0; j < $1; ++j) {
        channelData[j] = GROWABLE_HEAP_F32()[buf + (j * numChannels + c)];
      }
    }
  },
  426624: $0 => {
    var SDL2 = Module["SDL2"];
    if ($0) {
      if (SDL2.capture.silenceTimer !== undefined) {
        clearInterval(SDL2.capture.silenceTimer);
      }
      if (SDL2.capture.stream !== undefined) {
        var tracks = SDL2.capture.stream.getAudioTracks();
        for (var i = 0; i < tracks.length; i++) {
          SDL2.capture.stream.removeTrack(tracks[i]);
        }
      }
      if (SDL2.capture.scriptProcessorNode !== undefined) {
        SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {};
        SDL2.capture.scriptProcessorNode.disconnect();
      }
      if (SDL2.capture.mediaStreamNode !== undefined) {
        SDL2.capture.mediaStreamNode.disconnect();
      }
      SDL2.capture = undefined;
    } else {
      if (SDL2.audio.scriptProcessorNode != undefined) {
        SDL2.audio.scriptProcessorNode.disconnect();
      }
      if (SDL2.audio.silenceTimer !== undefined) {
        clearInterval(SDL2.audio.silenceTimer);
      }
      SDL2.audio = undefined;
    }
    if ((SDL2.audioContext !== undefined) && (SDL2.audio === undefined) && (SDL2.capture === undefined)) {
      SDL2.audioContext.close();
      SDL2.audioContext = undefined;
    }
  },
  427630: ($0, $1, $2) => {
    var w = $0;
    var h = $1;
    var pixels = $2;
    if (!Module["SDL2"]) Module["SDL2"] = {};
    var SDL2 = Module["SDL2"];
    if (SDL2.ctxCanvas !== Module["canvas"]) {
      SDL2.ctx = Module["createContext"](Module["canvas"], false, true);
      SDL2.ctxCanvas = Module["canvas"];
    }
    if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) {
      SDL2.image = SDL2.ctx.createImageData(w, h);
      SDL2.w = w;
      SDL2.h = h;
      SDL2.imageCtx = SDL2.ctx;
    }
    var data = SDL2.image.data;
    var src = pixels / 4;
    var dst = 0;
    var num;
    if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
      num = data.length;
      while (dst < num) {
        var val = GROWABLE_HEAP_I32()[src];
        data[dst] = val & 255;
        data[dst + 1] = (val >> 8) & 255;
        data[dst + 2] = (val >> 16) & 255;
        data[dst + 3] = 255;
        src++;
        dst += 4;
      }
    } else {
      if (SDL2.data32Data !== data) {
        SDL2.data32 = new Int32Array(data.buffer);
        SDL2.data8 = new Uint8Array(data.buffer);
        SDL2.data32Data = data;
      }
      var data32 = SDL2.data32;
      num = data32.length;
      data32.set(GROWABLE_HEAP_I32().subarray(src, src + num));
      var data8 = SDL2.data8;
      var i = 3;
      var j = i + 4 * num;
      if (num % 8 == 0) {
        while (i < j) {
          data8[i] = 255;
          i = i + 4 | 0;
          data8[i] = 255;
          i = i + 4 | 0;
          data8[i] = 255;
          i = i + 4 | 0;
          data8[i] = 255;
          i = i + 4 | 0;
          data8[i] = 255;
          i = i + 4 | 0;
          data8[i] = 255;
          i = i + 4 | 0;
          data8[i] = 255;
          i = i + 4 | 0;
          data8[i] = 255;
          i = i + 4 | 0;
        }
      } else {
        while (i < j) {
          data8[i] = 255;
          i = i + 4 | 0;
        }
      }
    }
    SDL2.ctx.putImageData(SDL2.image, 0, 0);
  },
  429098: ($0, $1, $2, $3, $4) => {
    var w = $0;
    var h = $1;
    var hot_x = $2;
    var hot_y = $3;
    var pixels = $4;
    var canvas = document.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = canvas.getContext("2d");
    var image = ctx.createImageData(w, h);
    var data = image.data;
    var src = pixels / 4;
    var dst = 0;
    var num;
    if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
      num = data.length;
      while (dst < num) {
        var val = GROWABLE_HEAP_I32()[src];
        data[dst] = val & 255;
        data[dst + 1] = (val >> 8) & 255;
        data[dst + 2] = (val >> 16) & 255;
        data[dst + 3] = (val >> 24) & 255;
        src++;
        dst += 4;
      }
    } else {
      var data32 = new Int32Array(data.buffer);
      num = data32.length;
      data32.set(GROWABLE_HEAP_I32().subarray(src, src + num));
    }
    ctx.putImageData(image, 0, 0);
    var url = hot_x === 0 && hot_y === 0 ? "url(" + canvas.toDataURL() + "), auto" : "url(" + canvas.toDataURL() + ") " + hot_x + " " + hot_y + ", auto";
    var urlBuf = _malloc(url.length + 1);
    stringToUTF8(url, urlBuf, url.length + 1);
    return urlBuf;
  },
  430086: $0 => {
    if (Module["canvas"]) {
      Module["canvas"].style["cursor"] = UTF8ToString($0);
    }
  },
  430169: () => {
    if (Module["canvas"]) {
      Module["canvas"].style["cursor"] = "none";
    }
  },
  430238: () => window.innerWidth,
  430268: () => window.innerHeight
};

function get_unix_timestamp() {
  return Math.floor(Date.now() / 1e3);
}

var wasmImports;

function assignWasmImports() {
  wasmImports = {
    /** @export */ __assert_fail: ___assert_fail,
    /** @export */ __call_sighandler: ___call_sighandler,
    /** @export */ __pthread_create_js: ___pthread_create_js,
    /** @export */ __syscall__newselect: ___syscall__newselect,
    /** @export */ __syscall_fcntl64: ___syscall_fcntl64,
    /** @export */ __syscall_fstat64: ___syscall_fstat64,
    /** @export */ __syscall_ioctl: ___syscall_ioctl,
    /** @export */ __syscall_lstat64: ___syscall_lstat64,
    /** @export */ __syscall_newfstatat: ___syscall_newfstatat,
    /** @export */ __syscall_openat: ___syscall_openat,
    /** @export */ __syscall_stat64: ___syscall_stat64,
    /** @export */ _abort_js: __abort_js,
    /** @export */ _emscripten_init_main_thread_js: __emscripten_init_main_thread_js,
    /** @export */ _emscripten_notify_mailbox_postmessage: __emscripten_notify_mailbox_postmessage,
    /** @export */ _emscripten_receive_on_main_thread_js: __emscripten_receive_on_main_thread_js,
    /** @export */ _emscripten_runtime_keepalive_clear: __emscripten_runtime_keepalive_clear,
    /** @export */ _emscripten_thread_cleanup: __emscripten_thread_cleanup,
    /** @export */ _emscripten_thread_mailbox_await: __emscripten_thread_mailbox_await,
    /** @export */ _emscripten_thread_set_strongref: __emscripten_thread_set_strongref,
    /** @export */ clock_time_get: _clock_time_get,
    /** @export */ eglBindAPI: _eglBindAPI,
    /** @export */ eglChooseConfig: _eglChooseConfig,
    /** @export */ eglCreateContext: _eglCreateContext,
    /** @export */ eglCreateWindowSurface: _eglCreateWindowSurface,
    /** @export */ eglDestroyContext: _eglDestroyContext,
    /** @export */ eglDestroySurface: _eglDestroySurface,
    /** @export */ eglGetConfigAttrib: _eglGetConfigAttrib,
    /** @export */ eglGetDisplay: _eglGetDisplay,
    /** @export */ eglGetError: _eglGetError,
    /** @export */ eglInitialize: _eglInitialize,
    /** @export */ eglMakeCurrent: _eglMakeCurrent,
    /** @export */ eglQueryString: _eglQueryString,
    /** @export */ eglSwapBuffers: _eglSwapBuffers,
    /** @export */ eglSwapInterval: _eglSwapInterval,
    /** @export */ eglTerminate: _eglTerminate,
    /** @export */ eglWaitGL: _eglWaitGL,
    /** @export */ eglWaitNative: _eglWaitNative,
    /** @export */ emscripten_asm_const_int: _emscripten_asm_const_int,
    /** @export */ emscripten_asm_const_int_sync_on_main_thread: _emscripten_asm_const_int_sync_on_main_thread,
    /** @export */ emscripten_asm_const_ptr_sync_on_main_thread: _emscripten_asm_const_ptr_sync_on_main_thread,
    /** @export */ emscripten_cancel_main_loop: _emscripten_cancel_main_loop,
    /** @export */ emscripten_check_blocking_allowed: _emscripten_check_blocking_allowed,
    /** @export */ emscripten_date_now: _emscripten_date_now,
    /** @export */ emscripten_exit_fullscreen: _emscripten_exit_fullscreen,
    /** @export */ emscripten_exit_pointerlock: _emscripten_exit_pointerlock,
    /** @export */ emscripten_exit_with_live_runtime: _emscripten_exit_with_live_runtime,
    /** @export */ emscripten_force_exit: _emscripten_force_exit,
    /** @export */ emscripten_get_device_pixel_ratio: _emscripten_get_device_pixel_ratio,
    /** @export */ emscripten_get_element_css_size: _emscripten_get_element_css_size,
    /** @export */ emscripten_get_gamepad_status: _emscripten_get_gamepad_status,
    /** @export */ emscripten_get_now: _emscripten_get_now,
    /** @export */ emscripten_get_num_gamepads: _emscripten_get_num_gamepads,
    /** @export */ emscripten_get_screen_size: _emscripten_get_screen_size,
    /** @export */ emscripten_glActiveTexture: _emscripten_glActiveTexture,
    /** @export */ emscripten_glAttachShader: _emscripten_glAttachShader,
    /** @export */ emscripten_glBeginQueryEXT: _emscripten_glBeginQueryEXT,
    /** @export */ emscripten_glBindAttribLocation: _emscripten_glBindAttribLocation,
    /** @export */ emscripten_glBindBuffer: _emscripten_glBindBuffer,
    /** @export */ emscripten_glBindFramebuffer: _emscripten_glBindFramebuffer,
    /** @export */ emscripten_glBindRenderbuffer: _emscripten_glBindRenderbuffer,
    /** @export */ emscripten_glBindTexture: _emscripten_glBindTexture,
    /** @export */ emscripten_glBindVertexArrayOES: _emscripten_glBindVertexArrayOES,
    /** @export */ emscripten_glBlendColor: _emscripten_glBlendColor,
    /** @export */ emscripten_glBlendEquation: _emscripten_glBlendEquation,
    /** @export */ emscripten_glBlendEquationSeparate: _emscripten_glBlendEquationSeparate,
    /** @export */ emscripten_glBlendFunc: _emscripten_glBlendFunc,
    /** @export */ emscripten_glBlendFuncSeparate: _emscripten_glBlendFuncSeparate,
    /** @export */ emscripten_glBufferData: _emscripten_glBufferData,
    /** @export */ emscripten_glBufferSubData: _emscripten_glBufferSubData,
    /** @export */ emscripten_glCheckFramebufferStatus: _emscripten_glCheckFramebufferStatus,
    /** @export */ emscripten_glClear: _emscripten_glClear,
    /** @export */ emscripten_glClearColor: _emscripten_glClearColor,
    /** @export */ emscripten_glClearDepthf: _emscripten_glClearDepthf,
    /** @export */ emscripten_glClearStencil: _emscripten_glClearStencil,
    /** @export */ emscripten_glClipControlEXT: _emscripten_glClipControlEXT,
    /** @export */ emscripten_glColorMask: _emscripten_glColorMask,
    /** @export */ emscripten_glCompileShader: _emscripten_glCompileShader,
    /** @export */ emscripten_glCompressedTexImage2D: _emscripten_glCompressedTexImage2D,
    /** @export */ emscripten_glCompressedTexSubImage2D: _emscripten_glCompressedTexSubImage2D,
    /** @export */ emscripten_glCopyTexImage2D: _emscripten_glCopyTexImage2D,
    /** @export */ emscripten_glCopyTexSubImage2D: _emscripten_glCopyTexSubImage2D,
    /** @export */ emscripten_glCreateProgram: _emscripten_glCreateProgram,
    /** @export */ emscripten_glCreateShader: _emscripten_glCreateShader,
    /** @export */ emscripten_glCullFace: _emscripten_glCullFace,
    /** @export */ emscripten_glDeleteBuffers: _emscripten_glDeleteBuffers,
    /** @export */ emscripten_glDeleteFramebuffers: _emscripten_glDeleteFramebuffers,
    /** @export */ emscripten_glDeleteProgram: _emscripten_glDeleteProgram,
    /** @export */ emscripten_glDeleteQueriesEXT: _emscripten_glDeleteQueriesEXT,
    /** @export */ emscripten_glDeleteRenderbuffers: _emscripten_glDeleteRenderbuffers,
    /** @export */ emscripten_glDeleteShader: _emscripten_glDeleteShader,
    /** @export */ emscripten_glDeleteTextures: _emscripten_glDeleteTextures,
    /** @export */ emscripten_glDeleteVertexArraysOES: _emscripten_glDeleteVertexArraysOES,
    /** @export */ emscripten_glDepthFunc: _emscripten_glDepthFunc,
    /** @export */ emscripten_glDepthMask: _emscripten_glDepthMask,
    /** @export */ emscripten_glDepthRangef: _emscripten_glDepthRangef,
    /** @export */ emscripten_glDetachShader: _emscripten_glDetachShader,
    /** @export */ emscripten_glDisable: _emscripten_glDisable,
    /** @export */ emscripten_glDisableVertexAttribArray: _emscripten_glDisableVertexAttribArray,
    /** @export */ emscripten_glDrawArrays: _emscripten_glDrawArrays,
    /** @export */ emscripten_glDrawArraysInstancedANGLE: _emscripten_glDrawArraysInstancedANGLE,
    /** @export */ emscripten_glDrawBuffersWEBGL: _emscripten_glDrawBuffersWEBGL,
    /** @export */ emscripten_glDrawElements: _emscripten_glDrawElements,
    /** @export */ emscripten_glDrawElementsInstancedANGLE: _emscripten_glDrawElementsInstancedANGLE,
    /** @export */ emscripten_glEnable: _emscripten_glEnable,
    /** @export */ emscripten_glEnableVertexAttribArray: _emscripten_glEnableVertexAttribArray,
    /** @export */ emscripten_glEndQueryEXT: _emscripten_glEndQueryEXT,
    /** @export */ emscripten_glFinish: _emscripten_glFinish,
    /** @export */ emscripten_glFlush: _emscripten_glFlush,
    /** @export */ emscripten_glFramebufferRenderbuffer: _emscripten_glFramebufferRenderbuffer,
    /** @export */ emscripten_glFramebufferTexture2D: _emscripten_glFramebufferTexture2D,
    /** @export */ emscripten_glFrontFace: _emscripten_glFrontFace,
    /** @export */ emscripten_glGenBuffers: _emscripten_glGenBuffers,
    /** @export */ emscripten_glGenFramebuffers: _emscripten_glGenFramebuffers,
    /** @export */ emscripten_glGenQueriesEXT: _emscripten_glGenQueriesEXT,
    /** @export */ emscripten_glGenRenderbuffers: _emscripten_glGenRenderbuffers,
    /** @export */ emscripten_glGenTextures: _emscripten_glGenTextures,
    /** @export */ emscripten_glGenVertexArraysOES: _emscripten_glGenVertexArraysOES,
    /** @export */ emscripten_glGenerateMipmap: _emscripten_glGenerateMipmap,
    /** @export */ emscripten_glGetActiveAttrib: _emscripten_glGetActiveAttrib,
    /** @export */ emscripten_glGetActiveUniform: _emscripten_glGetActiveUniform,
    /** @export */ emscripten_glGetAttachedShaders: _emscripten_glGetAttachedShaders,
    /** @export */ emscripten_glGetAttribLocation: _emscripten_glGetAttribLocation,
    /** @export */ emscripten_glGetBooleanv: _emscripten_glGetBooleanv,
    /** @export */ emscripten_glGetBufferParameteriv: _emscripten_glGetBufferParameteriv,
    /** @export */ emscripten_glGetError: _emscripten_glGetError,
    /** @export */ emscripten_glGetFloatv: _emscripten_glGetFloatv,
    /** @export */ emscripten_glGetFramebufferAttachmentParameteriv: _emscripten_glGetFramebufferAttachmentParameteriv,
    /** @export */ emscripten_glGetIntegerv: _emscripten_glGetIntegerv,
    /** @export */ emscripten_glGetProgramInfoLog: _emscripten_glGetProgramInfoLog,
    /** @export */ emscripten_glGetProgramiv: _emscripten_glGetProgramiv,
    /** @export */ emscripten_glGetQueryObjecti64vEXT: _emscripten_glGetQueryObjecti64vEXT,
    /** @export */ emscripten_glGetQueryObjectivEXT: _emscripten_glGetQueryObjectivEXT,
    /** @export */ emscripten_glGetQueryObjectui64vEXT: _emscripten_glGetQueryObjectui64vEXT,
    /** @export */ emscripten_glGetQueryObjectuivEXT: _emscripten_glGetQueryObjectuivEXT,
    /** @export */ emscripten_glGetQueryivEXT: _emscripten_glGetQueryivEXT,
    /** @export */ emscripten_glGetRenderbufferParameteriv: _emscripten_glGetRenderbufferParameteriv,
    /** @export */ emscripten_glGetShaderInfoLog: _emscripten_glGetShaderInfoLog,
    /** @export */ emscripten_glGetShaderPrecisionFormat: _emscripten_glGetShaderPrecisionFormat,
    /** @export */ emscripten_glGetShaderSource: _emscripten_glGetShaderSource,
    /** @export */ emscripten_glGetShaderiv: _emscripten_glGetShaderiv,
    /** @export */ emscripten_glGetString: _emscripten_glGetString,
    /** @export */ emscripten_glGetTexParameterfv: _emscripten_glGetTexParameterfv,
    /** @export */ emscripten_glGetTexParameteriv: _emscripten_glGetTexParameteriv,
    /** @export */ emscripten_glGetUniformLocation: _emscripten_glGetUniformLocation,
    /** @export */ emscripten_glGetUniformfv: _emscripten_glGetUniformfv,
    /** @export */ emscripten_glGetUniformiv: _emscripten_glGetUniformiv,
    /** @export */ emscripten_glGetVertexAttribPointerv: _emscripten_glGetVertexAttribPointerv,
    /** @export */ emscripten_glGetVertexAttribfv: _emscripten_glGetVertexAttribfv,
    /** @export */ emscripten_glGetVertexAttribiv: _emscripten_glGetVertexAttribiv,
    /** @export */ emscripten_glHint: _emscripten_glHint,
    /** @export */ emscripten_glIsBuffer: _emscripten_glIsBuffer,
    /** @export */ emscripten_glIsEnabled: _emscripten_glIsEnabled,
    /** @export */ emscripten_glIsFramebuffer: _emscripten_glIsFramebuffer,
    /** @export */ emscripten_glIsProgram: _emscripten_glIsProgram,
    /** @export */ emscripten_glIsQueryEXT: _emscripten_glIsQueryEXT,
    /** @export */ emscripten_glIsRenderbuffer: _emscripten_glIsRenderbuffer,
    /** @export */ emscripten_glIsShader: _emscripten_glIsShader,
    /** @export */ emscripten_glIsTexture: _emscripten_glIsTexture,
    /** @export */ emscripten_glIsVertexArrayOES: _emscripten_glIsVertexArrayOES,
    /** @export */ emscripten_glLineWidth: _emscripten_glLineWidth,
    /** @export */ emscripten_glLinkProgram: _emscripten_glLinkProgram,
    /** @export */ emscripten_glPixelStorei: _emscripten_glPixelStorei,
    /** @export */ emscripten_glPolygonModeWEBGL: _emscripten_glPolygonModeWEBGL,
    /** @export */ emscripten_glPolygonOffset: _emscripten_glPolygonOffset,
    /** @export */ emscripten_glPolygonOffsetClampEXT: _emscripten_glPolygonOffsetClampEXT,
    /** @export */ emscripten_glQueryCounterEXT: _emscripten_glQueryCounterEXT,
    /** @export */ emscripten_glReadPixels: _emscripten_glReadPixels,
    /** @export */ emscripten_glReleaseShaderCompiler: _emscripten_glReleaseShaderCompiler,
    /** @export */ emscripten_glRenderbufferStorage: _emscripten_glRenderbufferStorage,
    /** @export */ emscripten_glSampleCoverage: _emscripten_glSampleCoverage,
    /** @export */ emscripten_glScissor: _emscripten_glScissor,
    /** @export */ emscripten_glShaderBinary: _emscripten_glShaderBinary,
    /** @export */ emscripten_glShaderSource: _emscripten_glShaderSource,
    /** @export */ emscripten_glStencilFunc: _emscripten_glStencilFunc,
    /** @export */ emscripten_glStencilFuncSeparate: _emscripten_glStencilFuncSeparate,
    /** @export */ emscripten_glStencilMask: _emscripten_glStencilMask,
    /** @export */ emscripten_glStencilMaskSeparate: _emscripten_glStencilMaskSeparate,
    /** @export */ emscripten_glStencilOp: _emscripten_glStencilOp,
    /** @export */ emscripten_glStencilOpSeparate: _emscripten_glStencilOpSeparate,
    /** @export */ emscripten_glTexImage2D: _emscripten_glTexImage2D,
    /** @export */ emscripten_glTexParameterf: _emscripten_glTexParameterf,
    /** @export */ emscripten_glTexParameterfv: _emscripten_glTexParameterfv,
    /** @export */ emscripten_glTexParameteri: _emscripten_glTexParameteri,
    /** @export */ emscripten_glTexParameteriv: _emscripten_glTexParameteriv,
    /** @export */ emscripten_glTexSubImage2D: _emscripten_glTexSubImage2D,
    /** @export */ emscripten_glUniform1f: _emscripten_glUniform1f,
    /** @export */ emscripten_glUniform1fv: _emscripten_glUniform1fv,
    /** @export */ emscripten_glUniform1i: _emscripten_glUniform1i,
    /** @export */ emscripten_glUniform1iv: _emscripten_glUniform1iv,
    /** @export */ emscripten_glUniform2f: _emscripten_glUniform2f,
    /** @export */ emscripten_glUniform2fv: _emscripten_glUniform2fv,
    /** @export */ emscripten_glUniform2i: _emscripten_glUniform2i,
    /** @export */ emscripten_glUniform2iv: _emscripten_glUniform2iv,
    /** @export */ emscripten_glUniform3f: _emscripten_glUniform3f,
    /** @export */ emscripten_glUniform3fv: _emscripten_glUniform3fv,
    /** @export */ emscripten_glUniform3i: _emscripten_glUniform3i,
    /** @export */ emscripten_glUniform3iv: _emscripten_glUniform3iv,
    /** @export */ emscripten_glUniform4f: _emscripten_glUniform4f,
    /** @export */ emscripten_glUniform4fv: _emscripten_glUniform4fv,
    /** @export */ emscripten_glUniform4i: _emscripten_glUniform4i,
    /** @export */ emscripten_glUniform4iv: _emscripten_glUniform4iv,
    /** @export */ emscripten_glUniformMatrix2fv: _emscripten_glUniformMatrix2fv,
    /** @export */ emscripten_glUniformMatrix3fv: _emscripten_glUniformMatrix3fv,
    /** @export */ emscripten_glUniformMatrix4fv: _emscripten_glUniformMatrix4fv,
    /** @export */ emscripten_glUseProgram: _emscripten_glUseProgram,
    /** @export */ emscripten_glValidateProgram: _emscripten_glValidateProgram,
    /** @export */ emscripten_glVertexAttrib1f: _emscripten_glVertexAttrib1f,
    /** @export */ emscripten_glVertexAttrib1fv: _emscripten_glVertexAttrib1fv,
    /** @export */ emscripten_glVertexAttrib2f: _emscripten_glVertexAttrib2f,
    /** @export */ emscripten_glVertexAttrib2fv: _emscripten_glVertexAttrib2fv,
    /** @export */ emscripten_glVertexAttrib3f: _emscripten_glVertexAttrib3f,
    /** @export */ emscripten_glVertexAttrib3fv: _emscripten_glVertexAttrib3fv,
    /** @export */ emscripten_glVertexAttrib4f: _emscripten_glVertexAttrib4f,
    /** @export */ emscripten_glVertexAttrib4fv: _emscripten_glVertexAttrib4fv,
    /** @export */ emscripten_glVertexAttribDivisorANGLE: _emscripten_glVertexAttribDivisorANGLE,
    /** @export */ emscripten_glVertexAttribPointer: _emscripten_glVertexAttribPointer,
    /** @export */ emscripten_glViewport: _emscripten_glViewport,
    /** @export */ emscripten_has_asyncify: _emscripten_has_asyncify,
    /** @export */ emscripten_request_fullscreen_strategy: _emscripten_request_fullscreen_strategy,
    /** @export */ emscripten_request_pointerlock: _emscripten_request_pointerlock,
    /** @export */ emscripten_resize_heap: _emscripten_resize_heap,
    /** @export */ emscripten_sample_gamepad_data: _emscripten_sample_gamepad_data,
    /** @export */ emscripten_set_beforeunload_callback_on_thread: _emscripten_set_beforeunload_callback_on_thread,
    /** @export */ emscripten_set_blur_callback_on_thread: _emscripten_set_blur_callback_on_thread,
    /** @export */ emscripten_set_canvas_element_size: _emscripten_set_canvas_element_size,
    /** @export */ emscripten_set_element_css_size: _emscripten_set_element_css_size,
    /** @export */ emscripten_set_focus_callback_on_thread: _emscripten_set_focus_callback_on_thread,
    /** @export */ emscripten_set_fullscreenchange_callback_on_thread: _emscripten_set_fullscreenchange_callback_on_thread,
    /** @export */ emscripten_set_gamepadconnected_callback_on_thread: _emscripten_set_gamepadconnected_callback_on_thread,
    /** @export */ emscripten_set_gamepaddisconnected_callback_on_thread: _emscripten_set_gamepaddisconnected_callback_on_thread,
    /** @export */ emscripten_set_keydown_callback_on_thread: _emscripten_set_keydown_callback_on_thread,
    /** @export */ emscripten_set_keypress_callback_on_thread: _emscripten_set_keypress_callback_on_thread,
    /** @export */ emscripten_set_keyup_callback_on_thread: _emscripten_set_keyup_callback_on_thread,
    /** @export */ emscripten_set_main_loop_arg: _emscripten_set_main_loop_arg,
    /** @export */ emscripten_set_mousedown_callback_on_thread: _emscripten_set_mousedown_callback_on_thread,
    /** @export */ emscripten_set_mouseenter_callback_on_thread: _emscripten_set_mouseenter_callback_on_thread,
    /** @export */ emscripten_set_mouseleave_callback_on_thread: _emscripten_set_mouseleave_callback_on_thread,
    /** @export */ emscripten_set_mousemove_callback_on_thread: _emscripten_set_mousemove_callback_on_thread,
    /** @export */ emscripten_set_mouseup_callback_on_thread: _emscripten_set_mouseup_callback_on_thread,
    /** @export */ emscripten_set_pointerlockchange_callback_on_thread: _emscripten_set_pointerlockchange_callback_on_thread,
    /** @export */ emscripten_set_resize_callback_on_thread: _emscripten_set_resize_callback_on_thread,
    /** @export */ emscripten_set_touchcancel_callback_on_thread: _emscripten_set_touchcancel_callback_on_thread,
    /** @export */ emscripten_set_touchend_callback_on_thread: _emscripten_set_touchend_callback_on_thread,
    /** @export */ emscripten_set_touchmove_callback_on_thread: _emscripten_set_touchmove_callback_on_thread,
    /** @export */ emscripten_set_touchstart_callback_on_thread: _emscripten_set_touchstart_callback_on_thread,
    /** @export */ emscripten_set_visibilitychange_callback_on_thread: _emscripten_set_visibilitychange_callback_on_thread,
    /** @export */ emscripten_set_wheel_callback_on_thread: _emscripten_set_wheel_callback_on_thread,
    /** @export */ emscripten_set_window_title: _emscripten_set_window_title,
    /** @export */ emscripten_sleep: _emscripten_sleep,
    /** @export */ environ_get: _environ_get,
    /** @export */ environ_sizes_get: _environ_sizes_get,
    /** @export */ exit: _exit,
    /** @export */ fd_close: _fd_close,
    /** @export */ fd_read: _fd_read,
    /** @export */ fd_seek: _fd_seek,
    /** @export */ fd_write: _fd_write,
    /** @export */ get_unix_timestamp,
    /** @export */ memory: wasmMemory,
    /** @export */ proc_exit: _proc_exit
  };
}

var wasmExports;

createWasm();

var ___wasm_call_ctors = createExportWrapper("__wasm_call_ctors", 0);

var _malloc = Module["_malloc"] = createExportWrapper("malloc", 1);

var _game_state_reset_main = Module["_game_state_reset_main"] = createExportWrapper("game_state_reset_main", 0);

var _main = Module["_main"] = createExportWrapper("main", 2);

var _free = Module["_free"] = createExportWrapper("free", 1);

var _setSFXVolume = Module["_setSFXVolume"] = createExportWrapper("setSFXVolume", 1);

var _setMusicVolume = Module["_setMusicVolume"] = createExportWrapper("setMusicVolume", 1);

var _strerror = createExportWrapper("strerror", 1);

var _pthread_self = () => (_pthread_self = wasmExports["pthread_self"])();

var __emscripten_tls_init = createExportWrapper("_emscripten_tls_init", 0);

var __emscripten_run_callback_on_thread = createExportWrapper("_emscripten_run_callback_on_thread", 5);

var __emscripten_thread_init = createExportWrapper("_emscripten_thread_init", 6);

var ___set_thread_state = createExportWrapper("__set_thread_state", 4);

var __emscripten_thread_crashed = createExportWrapper("_emscripten_thread_crashed", 0);

var _fflush = createExportWrapper("fflush", 1);

var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports["emscripten_stack_get_base"])();

var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports["emscripten_stack_get_end"])();

var __emscripten_run_on_main_thread_js = createExportWrapper("_emscripten_run_on_main_thread_js", 5);

var __emscripten_thread_free_data = createExportWrapper("_emscripten_thread_free_data", 1);

var __emscripten_thread_exit = createExportWrapper("_emscripten_thread_exit", 1);

var __emscripten_check_mailbox = createExportWrapper("_emscripten_check_mailbox", 0);

var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports["emscripten_stack_init"])();

var _emscripten_stack_set_limits = (a0, a1) => (_emscripten_stack_set_limits = wasmExports["emscripten_stack_set_limits"])(a0, a1);

var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports["emscripten_stack_get_free"])();

var __emscripten_stack_restore = a0 => (__emscripten_stack_restore = wasmExports["_emscripten_stack_restore"])(a0);

var __emscripten_stack_alloc = a0 => (__emscripten_stack_alloc = wasmExports["_emscripten_stack_alloc"])(a0);

var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports["emscripten_stack_get_current"])();

var __emscripten_wasm_worker_initialize = createExportWrapper("_emscripten_wasm_worker_initialize", 2);

var dynCall_iii = Module["dynCall_iii"] = createExportWrapper("dynCall_iii", 3);

var dynCall_vi = Module["dynCall_vi"] = createExportWrapper("dynCall_vi", 2);

var dynCall_v = Module["dynCall_v"] = createExportWrapper("dynCall_v", 1);

var dynCall_viii = Module["dynCall_viii"] = createExportWrapper("dynCall_viii", 4);

var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii", 2);

var dynCall_ji = Module["dynCall_ji"] = createExportWrapper("dynCall_ji", 2);

var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji", 4);

var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii", 5);

var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii", 3);

var dynCall_i = Module["dynCall_i"] = createExportWrapper("dynCall_i", 1);

var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii", 4);

var dynCall_iid = Module["dynCall_iid"] = createExportWrapper("dynCall_iid", 3);

var dynCall_di = Module["dynCall_di"] = createExportWrapper("dynCall_di", 2);

var dynCall_iiiiii = Module["dynCall_iiiiii"] = createExportWrapper("dynCall_iiiiii", 6);

var dynCall_viiii = Module["dynCall_viiii"] = createExportWrapper("dynCall_viiii", 5);

var dynCall_viiiii = Module["dynCall_viiiii"] = createExportWrapper("dynCall_viiiii", 6);

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = createExportWrapper("dynCall_iiiiiiii", 8);

var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiiii", 10);

var dynCall_iiiiiiiiiiiiiiff = Module["dynCall_iiiiiiiiiiiiiiff"] = createExportWrapper("dynCall_iiiiiiiiiiiiiiff", 16);

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiii", 9);

var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = createExportWrapper("dynCall_viiiiiii", 8);

var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = createExportWrapper("dynCall_viiiiiiiiiii", 12);

var dynCall_iiiiiidiiff = Module["dynCall_iiiiiidiiff"] = createExportWrapper("dynCall_iiiiiidiiff", 11);

var dynCall_fii = Module["dynCall_fii"] = createExportWrapper("dynCall_fii", 3);

var dynCall_jij = Module["dynCall_jij"] = createExportWrapper("dynCall_jij", 3);

var dynCall_iij = Module["dynCall_iij"] = createExportWrapper("dynCall_iij", 3);

var dynCall_vffff = Module["dynCall_vffff"] = createExportWrapper("dynCall_vffff", 5);

var dynCall_vf = Module["dynCall_vf"] = createExportWrapper("dynCall_vf", 2);

var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = createExportWrapper("dynCall_viiiiiiii", 9);

var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = createExportWrapper("dynCall_viiiiiiiii", 10);

var dynCall_vff = Module["dynCall_vff"] = createExportWrapper("dynCall_vff", 3);

var dynCall_vfi = Module["dynCall_vfi"] = createExportWrapper("dynCall_vfi", 3);

var dynCall_viif = Module["dynCall_viif"] = createExportWrapper("dynCall_viif", 4);

var dynCall_vif = Module["dynCall_vif"] = createExportWrapper("dynCall_vif", 3);

var dynCall_viff = Module["dynCall_viff"] = createExportWrapper("dynCall_viff", 4);

var dynCall_vifff = Module["dynCall_vifff"] = createExportWrapper("dynCall_vifff", 5);

var dynCall_viffff = Module["dynCall_viffff"] = createExportWrapper("dynCall_viffff", 6);

var dynCall_viiiiii = Module["dynCall_viiiiii"] = createExportWrapper("dynCall_viiiiii", 7);

var dynCall_vfff = Module["dynCall_vfff"] = createExportWrapper("dynCall_vfff", 4);

var dynCall_iijjiiii = Module["dynCall_iijjiiii"] = createExportWrapper("dynCall_iijjiiii", 8);

var _asyncify_start_unwind = createExportWrapper("asyncify_start_unwind", 1);

var _asyncify_stop_unwind = createExportWrapper("asyncify_stop_unwind", 0);

var _asyncify_start_rewind = createExportWrapper("asyncify_start_rewind", 1);

var _asyncify_stop_rewind = createExportWrapper("asyncify_stop_rewind", 0);

// include: postamble.js
// === Auto-generated postamble setup entry stuff ===
Module["addRunDependency"] = addRunDependency;

Module["removeRunDependency"] = removeRunDependency;

Module["stackSave"] = stackSave;

Module["stackRestore"] = stackRestore;

Module["stackAlloc"] = stackAlloc;

Module["wasmTable"] = wasmTable;

Module["ccall"] = ccall;

Module["cwrap"] = cwrap;

Module["FS_createPreloadedFile"] = FS_createPreloadedFile;

Module["FS_unlink"] = FS_unlink;

Module["FS_createPath"] = FS_createPath;

Module["FS_createDevice"] = FS_createDevice;

Module["FS_createDataFile"] = FS_createDataFile;

Module["FS_createLazyFile"] = FS_createLazyFile;

Module["LZ4"] = LZ4;

var missingLibrarySymbols = [ "writeI53ToI64Clamped", "writeI53ToI64Signaling", "writeI53ToU64Clamped", "writeI53ToU64Signaling", "convertI32PairToI53", "convertI32PairToI53Checked", "convertU32PairToI53", "getTempRet0", "setTempRet0", "zeroMemory", "inetPton4", "inetNtop4", "inetPton6", "inetNtop6", "readSockaddr", "writeSockaddr", "emscriptenLog", "getDynCaller", "asmjsMangle", "HandleAllocator", "getNativeTypeSize", "addOnInit", "addOnPostCtor", "addOnPreMain", "STACK_SIZE", "STACK_ALIGN", "POINTER_SIZE", "ASSERTIONS", "uleb128Encode", "generateFuncType", "convertJsFunctionToWasm", "getEmptyTableSlot", "updateTableMap", "getFunctionAddress", "addFunction", "removeFunction", "reallyNegative", "unSign", "strLen", "reSign", "formatString", "intArrayToString", "AsciiToString", "UTF16ToString", "stringToUTF16", "lengthBytesUTF16", "UTF32ToString", "stringToUTF32", "lengthBytesUTF32", "fillDeviceOrientationEventData", "registerDeviceOrientationEventCallback", "fillDeviceMotionEventData", "registerDeviceMotionEventCallback", "screenOrientation", "fillOrientationChangeEventData", "registerOrientationChangeEventCallback", "hideEverythingExceptGivenElement", "restoreHiddenElements", "softFullscreenResizeWebGLRenderTarget", "registerPointerlockErrorEventCallback", "fillBatteryEventData", "battery", "registerBatteryEventCallback", "jsStackTrace", "getCallstack", "convertPCtoSourceLocation", "wasiRightsToMuslOFlags", "wasiOFlagsToMuslOFlags", "setImmediateWrapped", "safeRequestAnimationFrame", "clearImmediateWrapped", "registerPostMainLoop", "registerPreMainLoop", "getPromise", "makePromise", "idsToPromises", "makePromiseCallback", "ExceptionInfo", "findMatchingCatch", "Browser_asyncPrepareDataCounter", "isLeapYear", "ydayFromDate", "arraySum", "addDays", "getSocketFromFD", "getSocketAddress", "FS_mkdirTree", "_setNetworkCallback", "writeGLArray", "emscripten_webgl_destroy_context_before_on_calling_thread", "registerWebGlEventCallback", "ALLOC_NORMAL", "ALLOC_STACK", "allocate", "writeStringToMemory", "writeAsciiToMemory", "demangle", "stackTrace", "_wasmWorkersID", "_wasmWorkerPostFunction1", "_wasmWorkerPostFunction2", "_wasmWorkerPostFunction3", "EmAudioCounter", "emscriptenRegisterAudioObject", "emscriptenGetAudioObject", "emscriptenGetContextQuantumSize", "_EmAudioDispatchProcessorCallback", "emscripten_audio_worklet_post_function_1", "emscripten_audio_worklet_post_function_2", "emscripten_audio_worklet_post_function_3" ];

missingLibrarySymbols.forEach(missingLibrarySymbol);

var unexportedSymbols = [ "run", "out", "err", "callMain", "abort", "wasmMemory", "wasmExports", "GROWABLE_HEAP_I8", "GROWABLE_HEAP_U8", "GROWABLE_HEAP_I16", "GROWABLE_HEAP_U16", "GROWABLE_HEAP_I32", "GROWABLE_HEAP_U32", "GROWABLE_HEAP_F32", "GROWABLE_HEAP_F64", "writeStackCookie", "checkStackCookie", "writeI53ToI64", "readI53FromI64", "readI53FromU64", "INT53_MAX", "INT53_MIN", "bigintToI53Checked", "ptrToString", "exitJS", "getHeapMax", "growMemory", "ENV", "ERRNO_CODES", "strError", "DNS", "Protocols", "Sockets", "timers", "warnOnce", "readEmAsmArgsArray", "readEmAsmArgs", "runEmAsmFunction", "runMainThreadEmAsm", "jstoi_q", "jstoi_s", "getExecutableName", "listenOnce", "autoResumeAudioContext", "dynCallLegacy", "dynCall", "handleException", "keepRuntimeAlive", "runtimeKeepalivePush", "runtimeKeepalivePop", "callUserCallback", "maybeExit", "asyncLoad", "alignMemory", "mmapAlloc", "noExitRuntime", "addOnPreRun", "addOnExit", "addOnPostRun", "getCFunc", "sigToWasmTypes", "freeTableIndexes", "functionsInTableMap", "setValue", "getValue", "PATH", "PATH_FS", "UTF8Decoder", "UTF8ArrayToString", "UTF8ToString", "stringToUTF8Array", "stringToUTF8", "lengthBytesUTF8", "intArrayFromString", "stringToAscii", "UTF16Decoder", "stringToNewUTF8", "stringToUTF8OnStack", "writeArrayToMemory", "JSEvents", "registerKeyEventCallback", "specialHTMLTargets", "maybeCStringToJsString", "findEventTarget", "findCanvasEventTarget", "getBoundingClientRect", "fillMouseEventData", "registerMouseEventCallback", "registerWheelEventCallback", "registerUiEventCallback", "registerFocusEventCallback", "fillFullscreenChangeEventData", "registerFullscreenChangeEventCallback", "JSEvents_requestFullscreen", "JSEvents_resizeCanvasForFullscreen", "registerRestoreOldStyle", "setLetterbox", "currentFullscreenStrategy", "restoreOldWindowedStyle", "doRequestFullscreen", "fillPointerlockChangeEventData", "registerPointerlockChangeEventCallback", "requestPointerLock", "fillVisibilityChangeEventData", "registerVisibilityChangeEventCallback", "registerTouchEventCallback", "fillGamepadEventData", "registerGamepadEventCallback", "registerBeforeUnloadEventCallback", "setCanvasElementSizeCallingThread", "setCanvasElementSizeMainThread", "setCanvasElementSize", "getCanvasSizeCallingThread", "getCanvasSizeMainThread", "getCanvasElementSize", "UNWIND_CACHE", "ExitStatus", "getEnvStrings", "checkWasiClock", "doReadv", "doWritev", "initRandomFill", "randomFill", "safeSetTimeout", "emSetImmediate", "emClearImmediate_deps", "emClearImmediate", "promiseMap", "uncaughtExceptionCount", "exceptionLast", "exceptionCaught", "Browser", "getPreloadedImageData__data", "wget", "MONTH_DAYS_REGULAR", "MONTH_DAYS_LEAP", "MONTH_DAYS_REGULAR_CUMULATIVE", "MONTH_DAYS_LEAP_CUMULATIVE", "SYSCALLS", "preloadPlugins", "FS_modeStringToFlags", "FS_getMode", "FS_stdin_getChar_buffer", "FS_stdin_getChar", "FS_readFile", "FS", "MEMFS", "TTY", "PIPEFS", "SOCKFS", "tempFixedLengthArray", "miniTempWebGLFloatBuffers", "miniTempWebGLIntBuffers", "heapObjectForWebGLType", "toTypedArrayIndex", "webgl_enable_ANGLE_instanced_arrays", "webgl_enable_OES_vertex_array_object", "webgl_enable_WEBGL_draw_buffers", "webgl_enable_WEBGL_multi_draw", "webgl_enable_EXT_polygon_offset_clamp", "webgl_enable_EXT_clip_control", "webgl_enable_WEBGL_polygon_mode", "GL", "emscriptenWebGLGet", "computeUnpackAlignedImageSize", "colorChannelsInGlTextureFormat", "emscriptenWebGLGetTexPixelData", "emscriptenWebGLGetUniform", "webglGetUniformLocation", "webglPrepareUniformLocationsBeforeFirstUse", "webglGetLeftBracePos", "emscriptenWebGLGetVertexAttrib", "__glGetActiveAttribOrUniform", "AL", "GLUT", "EGL", "GLEW", "IDBStore", "runAndAbortIfError", "Asyncify", "Fibers", "allocateUTF8", "allocateUTF8OnStack", "print", "printErr", "PThread", "terminateWorker", "cleanupThread", "registerTLSInit", "spawnThread", "exitOnMainThread", "proxyToMainThread", "proxiedJSCallArgs", "invokeEntryPoint", "checkMailbox", "_wasmWorkers", "_wasmWorkerDelayedMessageQueue", "_wasmWorkerAppendToQueue", "_wasmWorkerRunPostMessage", "_wasmWorkerInitializeRuntime", "EmAudio", "emscriptenDestroyAudioContext" ];

unexportedSymbols.forEach(unexportedRuntimeSymbol);

var calledRun;

function callMain() {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(typeof onPreRuns === "undefined" || onPreRuns.length == 0, "cannot call main when preRun functions remain to be called");
  var entryFunction = _main;
  var argc = 0;
  var argv = 0;
  try {
    var ret = entryFunction(argc, argv);
    // if we're not running an evented main loop, it's time to exit
    exitJS(ret, /* implicit = */ true);
    return ret;
  } catch (e) {
    return handleException(e);
  }
}

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // See $establishStackSpace for the equivalent code that runs on a thread
  assert(!ENVIRONMENT_IS_PTHREAD);
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }
  if ((ENVIRONMENT_IS_PTHREAD || ENVIRONMENT_IS_WASM_WORKER)) {
    initRuntime();
    return;
  }
  stackCheckInit();
  preRun();
  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }
  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    assert(!calledRun);
    calledRun = true;
    Module["calledRun"] = true;
    if (ABORT) return;
    initRuntime();
    preMain();
    Module["onRuntimeInitialized"]?.();
    consumedModuleProp("onRuntimeInitialized");
    var noInitialRun = Module["noInitialRun"];
    legacyModuleProp("noInitialRun", "noInitialRun");
    if (!noInitialRun) callMain();
    postRun();
  }
  if (Module["setStatus"]) {
    Module["setStatus"]("Running...");
    setTimeout(() => {
      setTimeout(() => Module["setStatus"](""), 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = x => {
    has = true;
  };
  try {
    // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    [ "stdout", "stderr" ].forEach(name => {
      var info = FS.analyzePath("/dev/" + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch (e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.");
  }
}

if (Module["preInit"]) {
  if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
  while (Module["preInit"].length > 0) {
    Module["preInit"].pop()();
  }
}

consumedModuleProp("preInit");

run();
